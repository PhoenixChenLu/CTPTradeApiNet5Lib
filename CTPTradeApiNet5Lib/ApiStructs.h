#pragma once
#include <string.h>
#include "pch.h"
#include "Functions.h"

namespace PhoenixCTP
{
	/// <summary>
	///信息分发
	/// </summary>
	public ref struct DisseminationField
	{
		/// <summary>
		///序列系列号
		/// </summary>
		short SequenceSeries;
		/// <summary>
		///序列号
		/// </summary>
		int SequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		DisseminationField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcDisseminationField* source)
		{
			SequenceSeries = source->SequenceSeries;
			SequenceNo = source->SequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		DisseminationField(CThostFtdcDisseminationField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcDisseminationField* getUnmanagedStructP()
		{
			CThostFtdcDisseminationField* result = new CThostFtdcDisseminationField();
			result->SequenceSeries = SequenceSeries;
			result->SequenceNo = SequenceNo;
			return result;
		}
	};

	/// <summary>
	///用户登录请求
	/// </summary>
	public ref struct ReqUserLoginField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///接口端产品信息
		/// </summary>
		System::String^ InterfaceProductInfo;
		/// <summary>
		///协议信息
		/// </summary>
		System::String^ ProtocolInfo;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///动态密码
		/// </summary>
		System::String^ OneTimePassword;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///登录备注
		/// </summary>
		System::String^ LoginRemark;
		/// <summary>
		///终端IP端口
		/// </summary>
		int ClientIPPort;
		/// <summary>
		///终端IP地址
		/// </summary>
		System::String^ ClientIPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqUserLoginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqUserLoginField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			Password = char2NetString(source->Password);
			UserProductInfo = char2NetString(source->UserProductInfo);
			InterfaceProductInfo = char2NetString(source->InterfaceProductInfo);
			ProtocolInfo = char2NetString(source->ProtocolInfo);
			MacAddress = char2NetString(source->MacAddress);
			OneTimePassword = char2NetString(source->OneTimePassword);
			reserve1 = char2NetString(source->reserve1);
			LoginRemark = char2NetString(source->LoginRemark);
			ClientIPPort = source->ClientIPPort;
			ClientIPAddress = char2NetString(source->ClientIPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqUserLoginField(CThostFtdcReqUserLoginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqUserLoginField* getUnmanagedStructP()
		{
			CThostFtdcReqUserLoginField* result = new CThostFtdcReqUserLoginField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			InterfaceProductInfo ? strcpy_s(result->InterfaceProductInfo, netString2ConstChar(InterfaceProductInfo)) : false;
			ProtocolInfo ? strcpy_s(result->ProtocolInfo, netString2ConstChar(ProtocolInfo)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			OneTimePassword ? strcpy_s(result->OneTimePassword, netString2ConstChar(OneTimePassword)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			LoginRemark ? strcpy_s(result->LoginRemark, netString2ConstChar(LoginRemark)) : false;
			result->ClientIPPort = ClientIPPort;
			ClientIPAddress ? strcpy_s(result->ClientIPAddress, netString2ConstChar(ClientIPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///用户登录应答
	/// </summary>
	public ref struct RspUserLoginField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///登录成功时间
		/// </summary>
		System::String^ LoginTime;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易系统名称
		/// </summary>
		System::String^ SystemName;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///最大报单引用
		/// </summary>
		System::String^ MaxOrderRef;
		/// <summary>
		///上期所时间
		/// </summary>
		System::String^ SHFETime;
		/// <summary>
		///大商所时间
		/// </summary>
		System::String^ DCETime;
		/// <summary>
		///郑商所时间
		/// </summary>
		System::String^ CZCETime;
		/// <summary>
		///中金所时间
		/// </summary>
		System::String^ FFEXTime;
		/// <summary>
		///能源中心时间
		/// </summary>
		System::String^ INETime;

		/// <summary>
		/// 默认构造函数	</summary>
		RspUserLoginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspUserLoginField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			LoginTime = char2NetString(source->LoginTime);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			SystemName = char2NetString(source->SystemName);
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			MaxOrderRef = char2NetString(source->MaxOrderRef);
			SHFETime = char2NetString(source->SHFETime);
			DCETime = char2NetString(source->DCETime);
			CZCETime = char2NetString(source->CZCETime);
			FFEXTime = char2NetString(source->FFEXTime);
			INETime = char2NetString(source->INETime);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspUserLoginField(CThostFtdcRspUserLoginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspUserLoginField* getUnmanagedStructP()
		{
			CThostFtdcRspUserLoginField* result = new CThostFtdcRspUserLoginField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			LoginTime ? strcpy_s(result->LoginTime, netString2ConstChar(LoginTime)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			SystemName ? strcpy_s(result->SystemName, netString2ConstChar(SystemName)) : false;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			MaxOrderRef ? strcpy_s(result->MaxOrderRef, netString2ConstChar(MaxOrderRef)) : false;
			SHFETime ? strcpy_s(result->SHFETime, netString2ConstChar(SHFETime)) : false;
			DCETime ? strcpy_s(result->DCETime, netString2ConstChar(DCETime)) : false;
			CZCETime ? strcpy_s(result->CZCETime, netString2ConstChar(CZCETime)) : false;
			FFEXTime ? strcpy_s(result->FFEXTime, netString2ConstChar(FFEXTime)) : false;
			INETime ? strcpy_s(result->INETime, netString2ConstChar(INETime)) : false;
			return result;
		}
	};

	/// <summary>
	///用户登出请求
	/// </summary>
	public ref struct UserLogoutField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		UserLogoutField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserLogoutField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserLogoutField(CThostFtdcUserLogoutField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserLogoutField* getUnmanagedStructP()
		{
			CThostFtdcUserLogoutField* result = new CThostFtdcUserLogoutField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///强制交易员退出
	/// </summary>
	public ref struct ForceUserLogoutField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		ForceUserLogoutField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcForceUserLogoutField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ForceUserLogoutField(CThostFtdcForceUserLogoutField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcForceUserLogoutField* getUnmanagedStructP()
		{
			CThostFtdcForceUserLogoutField* result = new CThostFtdcForceUserLogoutField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///客户端认证请求
	/// </summary>
	public ref struct ReqAuthenticateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///认证码
		/// </summary>
		System::String^ AuthCode;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ AppID;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqAuthenticateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqAuthenticateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserProductInfo = char2NetString(source->UserProductInfo);
			AuthCode = char2NetString(source->AuthCode);
			AppID = char2NetString(source->AppID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqAuthenticateField(CThostFtdcReqAuthenticateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqAuthenticateField* getUnmanagedStructP()
		{
			CThostFtdcReqAuthenticateField* result = new CThostFtdcReqAuthenticateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			AuthCode ? strcpy_s(result->AuthCode, netString2ConstChar(AuthCode)) : false;
			AppID ? strcpy_s(result->AppID, netString2ConstChar(AppID)) : false;
			return result;
		}
	};

	/// <summary>
	///客户端认证响应
	/// </summary>
	public ref struct RspAuthenticateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ AppID;
		/// <summary>
		///App类型
		/// </summary>
		char AppType;

		/// <summary>
		/// 默认构造函数	</summary>
		RspAuthenticateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspAuthenticateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserProductInfo = char2NetString(source->UserProductInfo);
			AppID = char2NetString(source->AppID);
			AppType = source->AppType;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspAuthenticateField(CThostFtdcRspAuthenticateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspAuthenticateField* getUnmanagedStructP()
		{
			CThostFtdcRspAuthenticateField* result = new CThostFtdcRspAuthenticateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			AppID ? strcpy_s(result->AppID, netString2ConstChar(AppID)) : false;
			result->AppType = AppType;
			return result;
		}
	};

	/// <summary>
	///客户端认证信息
	/// </summary>
	public ref struct AuthenticationInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///认证信息
		/// </summary>
		System::String^ AuthInfo;
		/// <summary>
		///是否为认证结果
		/// </summary>
		int IsResult;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ AppID;
		/// <summary>
		///App类型
		/// </summary>
		char AppType;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///终端IP地址
		/// </summary>
		System::String^ ClientIPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		AuthenticationInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAuthenticationInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserProductInfo = char2NetString(source->UserProductInfo);
			AuthInfo = char2NetString(source->AuthInfo);
			IsResult = source->IsResult;
			AppID = char2NetString(source->AppID);
			AppType = source->AppType;
			reserve1 = char2NetString(source->reserve1);
			ClientIPAddress = char2NetString(source->ClientIPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AuthenticationInfoField(CThostFtdcAuthenticationInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAuthenticationInfoField* getUnmanagedStructP()
		{
			CThostFtdcAuthenticationInfoField* result = new CThostFtdcAuthenticationInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			AuthInfo ? strcpy_s(result->AuthInfo, netString2ConstChar(AuthInfo)) : false;
			result->IsResult = IsResult;
			AppID ? strcpy_s(result->AppID, netString2ConstChar(AppID)) : false;
			result->AppType = AppType;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ClientIPAddress ? strcpy_s(result->ClientIPAddress, netString2ConstChar(ClientIPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///用户登录应答2
	/// </summary>
	public ref struct RspUserLogin2Field
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///登录成功时间
		/// </summary>
		System::String^ LoginTime;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易系统名称
		/// </summary>
		System::String^ SystemName;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///最大报单引用
		/// </summary>
		System::String^ MaxOrderRef;
		/// <summary>
		///上期所时间
		/// </summary>
		System::String^ SHFETime;
		/// <summary>
		///大商所时间
		/// </summary>
		System::String^ DCETime;
		/// <summary>
		///郑商所时间
		/// </summary>
		System::String^ CZCETime;
		/// <summary>
		///中金所时间
		/// </summary>
		System::String^ FFEXTime;
		/// <summary>
		///能源中心时间
		/// </summary>
		System::String^ INETime;
		/// <summary>
		///随机串
		/// </summary>
		System::String^ RandomString;

		/// <summary>
		/// 默认构造函数	</summary>
		RspUserLogin2Field()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspUserLogin2Field* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			LoginTime = char2NetString(source->LoginTime);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			SystemName = char2NetString(source->SystemName);
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			MaxOrderRef = char2NetString(source->MaxOrderRef);
			SHFETime = char2NetString(source->SHFETime);
			DCETime = char2NetString(source->DCETime);
			CZCETime = char2NetString(source->CZCETime);
			FFEXTime = char2NetString(source->FFEXTime);
			INETime = char2NetString(source->INETime);
			RandomString = char2NetString(source->RandomString);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspUserLogin2Field(CThostFtdcRspUserLogin2Field* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspUserLogin2Field* getUnmanagedStructP()
		{
			CThostFtdcRspUserLogin2Field* result = new CThostFtdcRspUserLogin2Field();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			LoginTime ? strcpy_s(result->LoginTime, netString2ConstChar(LoginTime)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			SystemName ? strcpy_s(result->SystemName, netString2ConstChar(SystemName)) : false;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			MaxOrderRef ? strcpy_s(result->MaxOrderRef, netString2ConstChar(MaxOrderRef)) : false;
			SHFETime ? strcpy_s(result->SHFETime, netString2ConstChar(SHFETime)) : false;
			DCETime ? strcpy_s(result->DCETime, netString2ConstChar(DCETime)) : false;
			CZCETime ? strcpy_s(result->CZCETime, netString2ConstChar(CZCETime)) : false;
			FFEXTime ? strcpy_s(result->FFEXTime, netString2ConstChar(FFEXTime)) : false;
			INETime ? strcpy_s(result->INETime, netString2ConstChar(INETime)) : false;
			RandomString ? strcpy_s(result->RandomString, netString2ConstChar(RandomString)) : false;
			return result;
		}
	};

	/// <summary>
	///银期转帐报文头
	/// </summary>
	public ref struct TransferHeaderField
	{
		/// <summary>
		///版本号，常量，1.0
		/// </summary>
		System::String^ Version;
		/// <summary>
		///交易代码，必填
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///交易日期，必填，格式：yyyymmdd
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间，必填，格式：hhmmss
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///发起方流水号，N/A
		/// </summary>
		System::String^ TradeSerial;
		/// <summary>
		///期货公司代码，必填
		/// </summary>
		System::String^ FutureID;
		/// <summary>
		///银行代码，根据查询银行得到，必填
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分中心代码，根据查询银行得到，必填
		/// </summary>
		System::String^ BankBrchID;
		/// <summary>
		///操作员，N/A
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///交易设备类型，N/A
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///记录数，N/A
		/// </summary>
		System::String^ RecordNum;
		/// <summary>
		///会话编号，N/A
		/// </summary>
		int SessionID;
		/// <summary>
		///请求编号，N/A
		/// </summary>
		int RequestID;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferHeaderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferHeaderField* source)
		{
			Version = char2NetString(source->Version);
			TradeCode = char2NetString(source->TradeCode);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			TradeSerial = char2NetString(source->TradeSerial);
			FutureID = char2NetString(source->FutureID);
			BankID = char2NetString(source->BankID);
			BankBrchID = char2NetString(source->BankBrchID);
			OperNo = char2NetString(source->OperNo);
			DeviceID = char2NetString(source->DeviceID);
			RecordNum = char2NetString(source->RecordNum);
			SessionID = source->SessionID;
			RequestID = source->RequestID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferHeaderField(CThostFtdcTransferHeaderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferHeaderField* getUnmanagedStructP()
		{
			CThostFtdcTransferHeaderField* result = new CThostFtdcTransferHeaderField();
			Version ? strcpy_s(result->Version, netString2ConstChar(Version)) : false;
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			TradeSerial ? strcpy_s(result->TradeSerial, netString2ConstChar(TradeSerial)) : false;
			FutureID ? strcpy_s(result->FutureID, netString2ConstChar(FutureID)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBrchID ? strcpy_s(result->BankBrchID, netString2ConstChar(BankBrchID)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			RecordNum ? strcpy_s(result->RecordNum, netString2ConstChar(RecordNum)) : false;
			result->SessionID = SessionID;
			result->RequestID = RequestID;
			return result;
		}
	};

	/// <summary>
	///银行资金转期货请求，TradeCode=202001
	/// </summary>
	public ref struct TransferBankToFutureReqField
	{
		/// <summary>
		///期货资金账户
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///密码标志
		/// </summary>
		char FuturePwdFlag;
		/// <summary>
		///密码
		/// </summary>
		System::String^ FutureAccPwd;
		/// <summary>
		///转账金额
		/// </summary>
		double TradeAmt;
		/// <summary>
		///客户手续费
		/// </summary>
		double CustFee;
		/// <summary>
		///币种：RMB-人民币 USD-美圆 HKD-港元
		/// </summary>
		System::String^ CurrencyCode;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferBankToFutureReqField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferBankToFutureReqField* source)
		{
			FutureAccount = char2NetString(source->FutureAccount);
			FuturePwdFlag = source->FuturePwdFlag;
			FutureAccPwd = char2NetString(source->FutureAccPwd);
			TradeAmt = source->TradeAmt;
			CustFee = source->CustFee;
			CurrencyCode = char2NetString(source->CurrencyCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferBankToFutureReqField(CThostFtdcTransferBankToFutureReqField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferBankToFutureReqField* getUnmanagedStructP()
		{
			CThostFtdcTransferBankToFutureReqField* result = new CThostFtdcTransferBankToFutureReqField();
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->FuturePwdFlag = FuturePwdFlag;
			FutureAccPwd ? strcpy_s(result->FutureAccPwd, netString2ConstChar(FutureAccPwd)) : false;
			result->TradeAmt = TradeAmt;
			result->CustFee = CustFee;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			return result;
		}
	};

	/// <summary>
	///银行资金转期货请求响应
	/// </summary>
	public ref struct TransferBankToFutureRspField
	{
		/// <summary>
		///响应代码
		/// </summary>
		System::String^ RetCode;
		/// <summary>
		///响应信息
		/// </summary>
		System::String^ RetInfo;
		/// <summary>
		///资金账户
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmt;
		/// <summary>
		///应收客户手续费
		/// </summary>
		double CustFee;
		/// <summary>
		///币种
		/// </summary>
		System::String^ CurrencyCode;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferBankToFutureRspField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferBankToFutureRspField* source)
		{
			RetCode = char2NetString(source->RetCode);
			RetInfo = char2NetString(source->RetInfo);
			FutureAccount = char2NetString(source->FutureAccount);
			TradeAmt = source->TradeAmt;
			CustFee = source->CustFee;
			CurrencyCode = char2NetString(source->CurrencyCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferBankToFutureRspField(CThostFtdcTransferBankToFutureRspField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferBankToFutureRspField* getUnmanagedStructP()
		{
			CThostFtdcTransferBankToFutureRspField* result = new CThostFtdcTransferBankToFutureRspField();
			RetCode ? strcpy_s(result->RetCode, netString2ConstChar(RetCode)) : false;
			RetInfo ? strcpy_s(result->RetInfo, netString2ConstChar(RetInfo)) : false;
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->TradeAmt = TradeAmt;
			result->CustFee = CustFee;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			return result;
		}
	};

	/// <summary>
	///期货资金转银行请求，TradeCode=202002
	/// </summary>
	public ref struct TransferFutureToBankReqField
	{
		/// <summary>
		///期货资金账户
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///密码标志
		/// </summary>
		char FuturePwdFlag;
		/// <summary>
		///密码
		/// </summary>
		System::String^ FutureAccPwd;
		/// <summary>
		///转账金额
		/// </summary>
		double TradeAmt;
		/// <summary>
		///客户手续费
		/// </summary>
		double CustFee;
		/// <summary>
		///币种：RMB-人民币 USD-美圆 HKD-港元
		/// </summary>
		System::String^ CurrencyCode;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferFutureToBankReqField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferFutureToBankReqField* source)
		{
			FutureAccount = char2NetString(source->FutureAccount);
			FuturePwdFlag = source->FuturePwdFlag;
			FutureAccPwd = char2NetString(source->FutureAccPwd);
			TradeAmt = source->TradeAmt;
			CustFee = source->CustFee;
			CurrencyCode = char2NetString(source->CurrencyCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferFutureToBankReqField(CThostFtdcTransferFutureToBankReqField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferFutureToBankReqField* getUnmanagedStructP()
		{
			CThostFtdcTransferFutureToBankReqField* result = new CThostFtdcTransferFutureToBankReqField();
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->FuturePwdFlag = FuturePwdFlag;
			FutureAccPwd ? strcpy_s(result->FutureAccPwd, netString2ConstChar(FutureAccPwd)) : false;
			result->TradeAmt = TradeAmt;
			result->CustFee = CustFee;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			return result;
		}
	};

	/// <summary>
	///期货资金转银行请求响应
	/// </summary>
	public ref struct TransferFutureToBankRspField
	{
		/// <summary>
		///响应代码
		/// </summary>
		System::String^ RetCode;
		/// <summary>
		///响应信息
		/// </summary>
		System::String^ RetInfo;
		/// <summary>
		///资金账户
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmt;
		/// <summary>
		///应收客户手续费
		/// </summary>
		double CustFee;
		/// <summary>
		///币种
		/// </summary>
		System::String^ CurrencyCode;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferFutureToBankRspField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferFutureToBankRspField* source)
		{
			RetCode = char2NetString(source->RetCode);
			RetInfo = char2NetString(source->RetInfo);
			FutureAccount = char2NetString(source->FutureAccount);
			TradeAmt = source->TradeAmt;
			CustFee = source->CustFee;
			CurrencyCode = char2NetString(source->CurrencyCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferFutureToBankRspField(CThostFtdcTransferFutureToBankRspField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferFutureToBankRspField* getUnmanagedStructP()
		{
			CThostFtdcTransferFutureToBankRspField* result = new CThostFtdcTransferFutureToBankRspField();
			RetCode ? strcpy_s(result->RetCode, netString2ConstChar(RetCode)) : false;
			RetInfo ? strcpy_s(result->RetInfo, netString2ConstChar(RetInfo)) : false;
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->TradeAmt = TradeAmt;
			result->CustFee = CustFee;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			return result;
		}
	};

	/// <summary>
	///查询银行资金请求，TradeCode=204002
	/// </summary>
	public ref struct TransferQryBankReqField
	{
		/// <summary>
		///期货资金账户
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///密码标志
		/// </summary>
		char FuturePwdFlag;
		/// <summary>
		///密码
		/// </summary>
		System::String^ FutureAccPwd;
		/// <summary>
		///币种：RMB-人民币 USD-美圆 HKD-港元
		/// </summary>
		System::String^ CurrencyCode;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferQryBankReqField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferQryBankReqField* source)
		{
			FutureAccount = char2NetString(source->FutureAccount);
			FuturePwdFlag = source->FuturePwdFlag;
			FutureAccPwd = char2NetString(source->FutureAccPwd);
			CurrencyCode = char2NetString(source->CurrencyCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferQryBankReqField(CThostFtdcTransferQryBankReqField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferQryBankReqField* getUnmanagedStructP()
		{
			CThostFtdcTransferQryBankReqField* result = new CThostFtdcTransferQryBankReqField();
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->FuturePwdFlag = FuturePwdFlag;
			FutureAccPwd ? strcpy_s(result->FutureAccPwd, netString2ConstChar(FutureAccPwd)) : false;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			return result;
		}
	};

	/// <summary>
	///查询银行资金请求响应
	/// </summary>
	public ref struct TransferQryBankRspField
	{
		/// <summary>
		///响应代码
		/// </summary>
		System::String^ RetCode;
		/// <summary>
		///响应信息
		/// </summary>
		System::String^ RetInfo;
		/// <summary>
		///资金账户
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///银行余额
		/// </summary>
		double TradeAmt;
		/// <summary>
		///银行可用余额
		/// </summary>
		double UseAmt;
		/// <summary>
		///银行可取余额
		/// </summary>
		double FetchAmt;
		/// <summary>
		///币种
		/// </summary>
		System::String^ CurrencyCode;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferQryBankRspField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferQryBankRspField* source)
		{
			RetCode = char2NetString(source->RetCode);
			RetInfo = char2NetString(source->RetInfo);
			FutureAccount = char2NetString(source->FutureAccount);
			TradeAmt = source->TradeAmt;
			UseAmt = source->UseAmt;
			FetchAmt = source->FetchAmt;
			CurrencyCode = char2NetString(source->CurrencyCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferQryBankRspField(CThostFtdcTransferQryBankRspField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferQryBankRspField* getUnmanagedStructP()
		{
			CThostFtdcTransferQryBankRspField* result = new CThostFtdcTransferQryBankRspField();
			RetCode ? strcpy_s(result->RetCode, netString2ConstChar(RetCode)) : false;
			RetInfo ? strcpy_s(result->RetInfo, netString2ConstChar(RetInfo)) : false;
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->TradeAmt = TradeAmt;
			result->UseAmt = UseAmt;
			result->FetchAmt = FetchAmt;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			return result;
		}
	};

	/// <summary>
	///查询银行交易明细请求，TradeCode=204999
	/// </summary>
	public ref struct TransferQryDetailReqField
	{
		/// <summary>
		///期货资金账户
		/// </summary>
		System::String^ FutureAccount;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferQryDetailReqField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferQryDetailReqField* source)
		{
			FutureAccount = char2NetString(source->FutureAccount);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferQryDetailReqField(CThostFtdcTransferQryDetailReqField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferQryDetailReqField* getUnmanagedStructP()
		{
			CThostFtdcTransferQryDetailReqField* result = new CThostFtdcTransferQryDetailReqField();
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			return result;
		}
	};

	/// <summary>
	///查询银行交易明细请求响应
	/// </summary>
	public ref struct TransferQryDetailRspField
	{
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///交易代码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///期货流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///期货公司代码
		/// </summary>
		System::String^ FutureID;
		/// <summary>
		///资金帐号
		/// </summary>
		System::String^ FutureAccount;
		/// <summary>
		///银行流水号
		/// </summary>
		int BankSerial;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分中心代码
		/// </summary>
		System::String^ BankBrchID;
		/// <summary>
		///银行账号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ CertCode;
		/// <summary>
		///货币代码
		/// </summary>
		System::String^ CurrencyCode;
		/// <summary>
		///发生金额
		/// </summary>
		double TxAmount;
		/// <summary>
		///有效标志
		/// </summary>
		char Flag;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferQryDetailRspField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferQryDetailRspField* source)
		{
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			TradeCode = char2NetString(source->TradeCode);
			FutureSerial = source->FutureSerial;
			FutureID = char2NetString(source->FutureID);
			FutureAccount = char2NetString(source->FutureAccount);
			BankSerial = source->BankSerial;
			BankID = char2NetString(source->BankID);
			BankBrchID = char2NetString(source->BankBrchID);
			BankAccount = char2NetString(source->BankAccount);
			CertCode = char2NetString(source->CertCode);
			CurrencyCode = char2NetString(source->CurrencyCode);
			TxAmount = source->TxAmount;
			Flag = source->Flag;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferQryDetailRspField(CThostFtdcTransferQryDetailRspField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferQryDetailRspField* getUnmanagedStructP()
		{
			CThostFtdcTransferQryDetailRspField* result = new CThostFtdcTransferQryDetailRspField();
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			result->FutureSerial = FutureSerial;
			FutureID ? strcpy_s(result->FutureID, netString2ConstChar(FutureID)) : false;
			FutureAccount ? strcpy_s(result->FutureAccount, netString2ConstChar(FutureAccount)) : false;
			result->BankSerial = BankSerial;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBrchID ? strcpy_s(result->BankBrchID, netString2ConstChar(BankBrchID)) : false;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			CertCode ? strcpy_s(result->CertCode, netString2ConstChar(CertCode)) : false;
			CurrencyCode ? strcpy_s(result->CurrencyCode, netString2ConstChar(CurrencyCode)) : false;
			result->TxAmount = TxAmount;
			result->Flag = Flag;
			return result;
		}
	};

	/// <summary>
	///响应信息
	/// </summary>
	public ref struct RspInfoField
	{
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		RspInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspInfoField* source)
		{
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspInfoField(CThostFtdcRspInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspInfoField* getUnmanagedStructP()
		{
			CThostFtdcRspInfoField* result = new CThostFtdcRspInfoField();
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所
	/// </summary>
	public ref struct ExchangeField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所名称
		/// </summary>
		System::String^ ExchangeName;
		/// <summary>
		///交易所属性
		/// </summary>
		char ExchangeProperty;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ExchangeName = char2NetString(source->ExchangeName);
			ExchangeProperty = source->ExchangeProperty;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeField(CThostFtdcExchangeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeField* getUnmanagedStructP()
		{
			CThostFtdcExchangeField* result = new CThostFtdcExchangeField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExchangeName ? strcpy_s(result->ExchangeName, netString2ConstChar(ExchangeName)) : false;
			result->ExchangeProperty = ExchangeProperty;
			return result;
		}
	};

	/// <summary>
	///产品
	/// </summary>
	public ref struct ProductField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///产品名称
		/// </summary>
		System::String^ ProductName;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品类型
		/// </summary>
		char ProductClass;
		/// <summary>
		///合约数量乘数
		/// </summary>
		int VolumeMultiple;
		/// <summary>
		///最小变动价位
		/// </summary>
		double PriceTick;
		/// <summary>
		///市价单最大下单量
		/// </summary>
		int MaxMarketOrderVolume;
		/// <summary>
		///市价单最小下单量
		/// </summary>
		int MinMarketOrderVolume;
		/// <summary>
		///限价单最大下单量
		/// </summary>
		int MaxLimitOrderVolume;
		/// <summary>
		///限价单最小下单量
		/// </summary>
		int MinLimitOrderVolume;
		/// <summary>
		///持仓类型
		/// </summary>
		char PositionType;
		/// <summary>
		///持仓日期类型
		/// </summary>
		char PositionDateType;
		/// <summary>
		///平仓处理类型
		/// </summary>
		char CloseDealType;
		/// <summary>
		///交易币种类型
		/// </summary>
		System::String^ TradeCurrencyID;
		/// <summary>
		///质押资金可用范围
		/// </summary>
		char MortgageFundUseRange;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///合约基础商品乘数
		/// </summary>
		double UnderlyingMultiple;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///交易所产品代码
		/// </summary>
		System::String^ ExchangeProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		ProductField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcProductField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ProductName = char2NetString(source->ProductName);
			ExchangeID = char2NetString(source->ExchangeID);
			ProductClass = source->ProductClass;
			VolumeMultiple = source->VolumeMultiple;
			PriceTick = source->PriceTick;
			MaxMarketOrderVolume = source->MaxMarketOrderVolume;
			MinMarketOrderVolume = source->MinMarketOrderVolume;
			MaxLimitOrderVolume = source->MaxLimitOrderVolume;
			MinLimitOrderVolume = source->MinLimitOrderVolume;
			PositionType = source->PositionType;
			PositionDateType = source->PositionDateType;
			CloseDealType = source->CloseDealType;
			TradeCurrencyID = char2NetString(source->TradeCurrencyID);
			MortgageFundUseRange = source->MortgageFundUseRange;
			reserve2 = char2NetString(source->reserve2);
			UnderlyingMultiple = source->UnderlyingMultiple;
			ProductID = char2NetString(source->ProductID);
			ExchangeProductID = char2NetString(source->ExchangeProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ProductField(CThostFtdcProductField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcProductField* getUnmanagedStructP()
		{
			CThostFtdcProductField* result = new CThostFtdcProductField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ProductName ? strcpy_s(result->ProductName, netString2ConstChar(ProductName)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->ProductClass = ProductClass;
			result->VolumeMultiple = VolumeMultiple;
			result->PriceTick = PriceTick;
			result->MaxMarketOrderVolume = MaxMarketOrderVolume;
			result->MinMarketOrderVolume = MinMarketOrderVolume;
			result->MaxLimitOrderVolume = MaxLimitOrderVolume;
			result->MinLimitOrderVolume = MinLimitOrderVolume;
			result->PositionType = PositionType;
			result->PositionDateType = PositionDateType;
			result->CloseDealType = CloseDealType;
			TradeCurrencyID ? strcpy_s(result->TradeCurrencyID, netString2ConstChar(TradeCurrencyID)) : false;
			result->MortgageFundUseRange = MortgageFundUseRange;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->UnderlyingMultiple = UnderlyingMultiple;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			ExchangeProductID ? strcpy_s(result->ExchangeProductID, netString2ConstChar(ExchangeProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///合约
	/// </summary>
	public ref struct InstrumentField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约名称
		/// </summary>
		System::String^ InstrumentName;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///产品类型
		/// </summary>
		char ProductClass;
		/// <summary>
		///交割年份
		/// </summary>
		int DeliveryYear;
		/// <summary>
		///交割月
		/// </summary>
		int DeliveryMonth;
		/// <summary>
		///市价单最大下单量
		/// </summary>
		int MaxMarketOrderVolume;
		/// <summary>
		///市价单最小下单量
		/// </summary>
		int MinMarketOrderVolume;
		/// <summary>
		///限价单最大下单量
		/// </summary>
		int MaxLimitOrderVolume;
		/// <summary>
		///限价单最小下单量
		/// </summary>
		int MinLimitOrderVolume;
		/// <summary>
		///合约数量乘数
		/// </summary>
		int VolumeMultiple;
		/// <summary>
		///最小变动价位
		/// </summary>
		double PriceTick;
		/// <summary>
		///创建日
		/// </summary>
		System::String^ CreateDate;
		/// <summary>
		///上市日
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///到期日
		/// </summary>
		System::String^ ExpireDate;
		/// <summary>
		///开始交割日
		/// </summary>
		System::String^ StartDelivDate;
		/// <summary>
		///结束交割日
		/// </summary>
		System::String^ EndDelivDate;
		/// <summary>
		///合约生命周期状态
		/// </summary>
		char InstLifePhase;
		/// <summary>
		///当前是否交易
		/// </summary>
		int IsTrading;
		/// <summary>
		///持仓类型
		/// </summary>
		char PositionType;
		/// <summary>
		///持仓日期类型
		/// </summary>
		char PositionDateType;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatio;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatio;
		/// <summary>
		///是否使用大额单边保证金算法
		/// </summary>
		char MaxMarginSideAlgorithm;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve4;
		/// <summary>
		///执行价
		/// </summary>
		double StrikePrice;
		/// <summary>
		///期权类型
		/// </summary>
		char OptionsType;
		/// <summary>
		///合约基础商品乘数
		/// </summary>
		double UnderlyingMultiple;
		/// <summary>
		///组合类型
		/// </summary>
		char CombinationType;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///基础商品代码
		/// </summary>
		System::String^ UnderlyingInstrID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentName = char2NetString(source->InstrumentName);
			reserve2 = char2NetString(source->reserve2);
			reserve3 = char2NetString(source->reserve3);
			ProductClass = source->ProductClass;
			DeliveryYear = source->DeliveryYear;
			DeliveryMonth = source->DeliveryMonth;
			MaxMarketOrderVolume = source->MaxMarketOrderVolume;
			MinMarketOrderVolume = source->MinMarketOrderVolume;
			MaxLimitOrderVolume = source->MaxLimitOrderVolume;
			MinLimitOrderVolume = source->MinLimitOrderVolume;
			VolumeMultiple = source->VolumeMultiple;
			PriceTick = source->PriceTick;
			CreateDate = char2NetString(source->CreateDate);
			OpenDate = char2NetString(source->OpenDate);
			ExpireDate = char2NetString(source->ExpireDate);
			StartDelivDate = char2NetString(source->StartDelivDate);
			EndDelivDate = char2NetString(source->EndDelivDate);
			InstLifePhase = source->InstLifePhase;
			IsTrading = source->IsTrading;
			PositionType = source->PositionType;
			PositionDateType = source->PositionDateType;
			LongMarginRatio = source->LongMarginRatio;
			ShortMarginRatio = source->ShortMarginRatio;
			MaxMarginSideAlgorithm = source->MaxMarginSideAlgorithm;
			reserve4 = char2NetString(source->reserve4);
			StrikePrice = source->StrikePrice;
			OptionsType = source->OptionsType;
			UnderlyingMultiple = source->UnderlyingMultiple;
			CombinationType = source->CombinationType;
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			ProductID = char2NetString(source->ProductID);
			UnderlyingInstrID = char2NetString(source->UnderlyingInstrID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentField(CThostFtdcInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentField* result = new CThostFtdcInstrumentField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentName ? strcpy_s(result->InstrumentName, netString2ConstChar(InstrumentName)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			result->ProductClass = ProductClass;
			result->DeliveryYear = DeliveryYear;
			result->DeliveryMonth = DeliveryMonth;
			result->MaxMarketOrderVolume = MaxMarketOrderVolume;
			result->MinMarketOrderVolume = MinMarketOrderVolume;
			result->MaxLimitOrderVolume = MaxLimitOrderVolume;
			result->MinLimitOrderVolume = MinLimitOrderVolume;
			result->VolumeMultiple = VolumeMultiple;
			result->PriceTick = PriceTick;
			CreateDate ? strcpy_s(result->CreateDate, netString2ConstChar(CreateDate)) : false;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			ExpireDate ? strcpy_s(result->ExpireDate, netString2ConstChar(ExpireDate)) : false;
			StartDelivDate ? strcpy_s(result->StartDelivDate, netString2ConstChar(StartDelivDate)) : false;
			EndDelivDate ? strcpy_s(result->EndDelivDate, netString2ConstChar(EndDelivDate)) : false;
			result->InstLifePhase = InstLifePhase;
			result->IsTrading = IsTrading;
			result->PositionType = PositionType;
			result->PositionDateType = PositionDateType;
			result->LongMarginRatio = LongMarginRatio;
			result->ShortMarginRatio = ShortMarginRatio;
			result->MaxMarginSideAlgorithm = MaxMarginSideAlgorithm;
			reserve4 ? strcpy_s(result->reserve4, netString2ConstChar(reserve4)) : false;
			result->StrikePrice = StrikePrice;
			result->OptionsType = OptionsType;
			result->UnderlyingMultiple = UnderlyingMultiple;
			result->CombinationType = CombinationType;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			UnderlyingInstrID ? strcpy_s(result->UnderlyingInstrID, netString2ConstChar(UnderlyingInstrID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司
	/// </summary>
	public ref struct BrokerField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///经纪公司简称
		/// </summary>
		System::String^ BrokerAbbr;
		/// <summary>
		///经纪公司名称
		/// </summary>
		System::String^ BrokerName;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			BrokerAbbr = char2NetString(source->BrokerAbbr);
			BrokerName = char2NetString(source->BrokerName);
			IsActive = source->IsActive;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerField(CThostFtdcBrokerField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerField* getUnmanagedStructP()
		{
			CThostFtdcBrokerField* result = new CThostFtdcBrokerField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerAbbr ? strcpy_s(result->BrokerAbbr, netString2ConstChar(BrokerAbbr)) : false;
			BrokerName ? strcpy_s(result->BrokerName, netString2ConstChar(BrokerName)) : false;
			result->IsActive = IsActive;
			return result;
		}
	};

	/// <summary>
	///交易所交易员
	/// </summary>
	public ref struct TraderField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装数量
		/// </summary>
		int InstallCount;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		TraderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTraderField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ParticipantID = char2NetString(source->ParticipantID);
			Password = char2NetString(source->Password);
			InstallCount = source->InstallCount;
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TraderField(CThostFtdcTraderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTraderField* getUnmanagedStructP()
		{
			CThostFtdcTraderField* result = new CThostFtdcTraderField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallCount = InstallCount;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者
	/// </summary>
	public ref struct InvestorField
	{
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者分组代码
		/// </summary>
		System::String^ InvestorGroupID;
		/// <summary>
		///投资者名称
		/// </summary>
		System::String^ InvestorName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdentifiedCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;
		/// <summary>
		///联系电话
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///通讯地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///开户日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///手机
		/// </summary>
		System::String^ Mobile;
		/// <summary>
		///手续费率模板代码
		/// </summary>
		System::String^ CommModelID;
		/// <summary>
		///保证金率模板代码
		/// </summary>
		System::String^ MarginModelID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorField* source)
		{
			InvestorID = char2NetString(source->InvestorID);
			BrokerID = char2NetString(source->BrokerID);
			InvestorGroupID = char2NetString(source->InvestorGroupID);
			InvestorName = char2NetString(source->InvestorName);
			IdentifiedCardType = source->IdentifiedCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			IsActive = source->IsActive;
			Telephone = char2NetString(source->Telephone);
			Address = char2NetString(source->Address);
			OpenDate = char2NetString(source->OpenDate);
			Mobile = char2NetString(source->Mobile);
			CommModelID = char2NetString(source->CommModelID);
			MarginModelID = char2NetString(source->MarginModelID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorField(CThostFtdcInvestorField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorField* getUnmanagedStructP()
		{
			CThostFtdcInvestorField* result = new CThostFtdcInvestorField();
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorGroupID ? strcpy_s(result->InvestorGroupID, netString2ConstChar(InvestorGroupID)) : false;
			InvestorName ? strcpy_s(result->InvestorName, netString2ConstChar(InvestorName)) : false;
			result->IdentifiedCardType = IdentifiedCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->IsActive = IsActive;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			Mobile ? strcpy_s(result->Mobile, netString2ConstChar(Mobile)) : false;
			CommModelID ? strcpy_s(result->CommModelID, netString2ConstChar(CommModelID)) : false;
			MarginModelID ? strcpy_s(result->MarginModelID, netString2ConstChar(MarginModelID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易编码
	/// </summary>
	public ref struct TradingCodeField
	{
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;
		/// <summary>
		///交易编码类型
		/// </summary>
		char ClientIDType;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///业务类型
		/// </summary>
		char BizType;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingCodeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingCodeField* source)
		{
			InvestorID = char2NetString(source->InvestorID);
			BrokerID = char2NetString(source->BrokerID);
			ExchangeID = char2NetString(source->ExchangeID);
			ClientID = char2NetString(source->ClientID);
			IsActive = source->IsActive;
			ClientIDType = source->ClientIDType;
			BranchID = char2NetString(source->BranchID);
			BizType = source->BizType;
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingCodeField(CThostFtdcTradingCodeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingCodeField* getUnmanagedStructP()
		{
			CThostFtdcTradingCodeField* result = new CThostFtdcTradingCodeField();
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			result->IsActive = IsActive;
			result->ClientIDType = ClientIDType;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			result->BizType = BizType;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///会员编码和经纪公司编码对照表
	/// </summary>
	public ref struct PartBrokerField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;

		/// <summary>
		/// 默认构造函数	</summary>
		PartBrokerField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcPartBrokerField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			IsActive = source->IsActive;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		PartBrokerField(CThostFtdcPartBrokerField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcPartBrokerField* getUnmanagedStructP()
		{
			CThostFtdcPartBrokerField* result = new CThostFtdcPartBrokerField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			result->IsActive = IsActive;
			return result;
		}
	};

	/// <summary>
	///管理用户
	/// </summary>
	public ref struct SuperUserField
	{
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户名称
		/// </summary>
		System::String^ UserName;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;

		/// <summary>
		/// 默认构造函数	</summary>
		SuperUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSuperUserField* source)
		{
			UserID = char2NetString(source->UserID);
			UserName = char2NetString(source->UserName);
			Password = char2NetString(source->Password);
			IsActive = source->IsActive;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SuperUserField(CThostFtdcSuperUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSuperUserField* getUnmanagedStructP()
		{
			CThostFtdcSuperUserField* result = new CThostFtdcSuperUserField();
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			UserName ? strcpy_s(result->UserName, netString2ConstChar(UserName)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->IsActive = IsActive;
			return result;
		}
	};

	/// <summary>
	///管理用户功能权限
	/// </summary>
	public ref struct SuperUserFunctionField
	{
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///功能代码
		/// </summary>
		char FunctionCode;

		/// <summary>
		/// 默认构造函数	</summary>
		SuperUserFunctionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSuperUserFunctionField* source)
		{
			UserID = char2NetString(source->UserID);
			FunctionCode = source->FunctionCode;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SuperUserFunctionField(CThostFtdcSuperUserFunctionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSuperUserFunctionField* getUnmanagedStructP()
		{
			CThostFtdcSuperUserFunctionField* result = new CThostFtdcSuperUserFunctionField();
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->FunctionCode = FunctionCode;
			return result;
		}
	};

	/// <summary>
	///投资者组
	/// </summary>
	public ref struct InvestorGroupField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者分组代码
		/// </summary>
		System::String^ InvestorGroupID;
		/// <summary>
		///投资者分组名称
		/// </summary>
		System::String^ InvestorGroupName;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorGroupField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorGroupField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorGroupID = char2NetString(source->InvestorGroupID);
			InvestorGroupName = char2NetString(source->InvestorGroupName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorGroupField(CThostFtdcInvestorGroupField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorGroupField* getUnmanagedStructP()
		{
			CThostFtdcInvestorGroupField* result = new CThostFtdcInvestorGroupField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorGroupID ? strcpy_s(result->InvestorGroupID, netString2ConstChar(InvestorGroupID)) : false;
			InvestorGroupName ? strcpy_s(result->InvestorGroupName, netString2ConstChar(InvestorGroupName)) : false;
			return result;
		}
	};

	/// <summary>
	///资金账户
	/// </summary>
	public ref struct TradingAccountField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///上次质押金额
		/// </summary>
		double PreMortgage;
		/// <summary>
		///上次信用额度
		/// </summary>
		double PreCredit;
		/// <summary>
		///上次存款额
		/// </summary>
		double PreDeposit;
		/// <summary>
		///上次结算准备金
		/// </summary>
		double PreBalance;
		/// <summary>
		///上次占用的保证金
		/// </summary>
		double PreMargin;
		/// <summary>
		///利息基数
		/// </summary>
		double InterestBase;
		/// <summary>
		///利息收入
		/// </summary>
		double Interest;
		/// <summary>
		///入金金额
		/// </summary>
		double Deposit;
		/// <summary>
		///出金金额
		/// </summary>
		double Withdraw;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///当前保证金总额
		/// </summary>
		double CurrMargin;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///期货结算准备金
		/// </summary>
		double Balance;
		/// <summary>
		///可用资金
		/// </summary>
		double Available;
		/// <summary>
		///可取资金
		/// </summary>
		double WithdrawQuota;
		/// <summary>
		///基本准备金
		/// </summary>
		double Reserve;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///信用额度
		/// </summary>
		double Credit;
		/// <summary>
		///质押金额
		/// </summary>
		double Mortgage;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchangeMargin;
		/// <summary>
		///投资者交割保证金
		/// </summary>
		double DeliveryMargin;
		/// <summary>
		///交易所交割保证金
		/// </summary>
		double ExchangeDeliveryMargin;
		/// <summary>
		///保底期货结算准备金
		/// </summary>
		double ReserveBalance;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///上次货币质入金额
		/// </summary>
		double PreFundMortgageIn;
		/// <summary>
		///上次货币质出金额
		/// </summary>
		double PreFundMortgageOut;
		/// <summary>
		///货币质入金额
		/// </summary>
		double FundMortgageIn;
		/// <summary>
		///货币质出金额
		/// </summary>
		double FundMortgageOut;
		/// <summary>
		///货币质押余额
		/// </summary>
		double FundMortgageAvailable;
		/// <summary>
		///可质押货币金额
		/// </summary>
		double MortgageableFund;
		/// <summary>
		///特殊产品占用保证金
		/// </summary>
		double SpecProductMargin;
		/// <summary>
		///特殊产品冻结保证金
		/// </summary>
		double SpecProductFrozenMargin;
		/// <summary>
		///特殊产品手续费
		/// </summary>
		double SpecProductCommission;
		/// <summary>
		///特殊产品冻结手续费
		/// </summary>
		double SpecProductFrozenCommission;
		/// <summary>
		///特殊产品持仓盈亏
		/// </summary>
		double SpecProductPositionProfit;
		/// <summary>
		///特殊产品平仓盈亏
		/// </summary>
		double SpecProductCloseProfit;
		/// <summary>
		///根据持仓盈亏算法计算的特殊产品持仓盈亏
		/// </summary>
		double SpecProductPositionProfitByAlg;
		/// <summary>
		///特殊产品交易所保证金
		/// </summary>
		double SpecProductExchangeMargin;
		/// <summary>
		///业务类型
		/// </summary>
		char BizType;
		/// <summary>
		///延时换汇冻结金额
		/// </summary>
		double FrozenSwap;
		/// <summary>
		///剩余换汇额度
		/// </summary>
		double RemainSwap;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingAccountField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			PreMortgage = source->PreMortgage;
			PreCredit = source->PreCredit;
			PreDeposit = source->PreDeposit;
			PreBalance = source->PreBalance;
			PreMargin = source->PreMargin;
			InterestBase = source->InterestBase;
			Interest = source->Interest;
			Deposit = source->Deposit;
			Withdraw = source->Withdraw;
			FrozenMargin = source->FrozenMargin;
			FrozenCash = source->FrozenCash;
			FrozenCommission = source->FrozenCommission;
			CurrMargin = source->CurrMargin;
			CashIn = source->CashIn;
			Commission = source->Commission;
			CloseProfit = source->CloseProfit;
			PositionProfit = source->PositionProfit;
			Balance = source->Balance;
			Available = source->Available;
			WithdrawQuota = source->WithdrawQuota;
			Reserve = source->Reserve;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			Credit = source->Credit;
			Mortgage = source->Mortgage;
			ExchangeMargin = source->ExchangeMargin;
			DeliveryMargin = source->DeliveryMargin;
			ExchangeDeliveryMargin = source->ExchangeDeliveryMargin;
			ReserveBalance = source->ReserveBalance;
			CurrencyID = char2NetString(source->CurrencyID);
			PreFundMortgageIn = source->PreFundMortgageIn;
			PreFundMortgageOut = source->PreFundMortgageOut;
			FundMortgageIn = source->FundMortgageIn;
			FundMortgageOut = source->FundMortgageOut;
			FundMortgageAvailable = source->FundMortgageAvailable;
			MortgageableFund = source->MortgageableFund;
			SpecProductMargin = source->SpecProductMargin;
			SpecProductFrozenMargin = source->SpecProductFrozenMargin;
			SpecProductCommission = source->SpecProductCommission;
			SpecProductFrozenCommission = source->SpecProductFrozenCommission;
			SpecProductPositionProfit = source->SpecProductPositionProfit;
			SpecProductCloseProfit = source->SpecProductCloseProfit;
			SpecProductPositionProfitByAlg = source->SpecProductPositionProfitByAlg;
			SpecProductExchangeMargin = source->SpecProductExchangeMargin;
			BizType = source->BizType;
			FrozenSwap = source->FrozenSwap;
			RemainSwap = source->RemainSwap;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingAccountField(CThostFtdcTradingAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingAccountField* getUnmanagedStructP()
		{
			CThostFtdcTradingAccountField* result = new CThostFtdcTradingAccountField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->PreMortgage = PreMortgage;
			result->PreCredit = PreCredit;
			result->PreDeposit = PreDeposit;
			result->PreBalance = PreBalance;
			result->PreMargin = PreMargin;
			result->InterestBase = InterestBase;
			result->Interest = Interest;
			result->Deposit = Deposit;
			result->Withdraw = Withdraw;
			result->FrozenMargin = FrozenMargin;
			result->FrozenCash = FrozenCash;
			result->FrozenCommission = FrozenCommission;
			result->CurrMargin = CurrMargin;
			result->CashIn = CashIn;
			result->Commission = Commission;
			result->CloseProfit = CloseProfit;
			result->PositionProfit = PositionProfit;
			result->Balance = Balance;
			result->Available = Available;
			result->WithdrawQuota = WithdrawQuota;
			result->Reserve = Reserve;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->Credit = Credit;
			result->Mortgage = Mortgage;
			result->ExchangeMargin = ExchangeMargin;
			result->DeliveryMargin = DeliveryMargin;
			result->ExchangeDeliveryMargin = ExchangeDeliveryMargin;
			result->ReserveBalance = ReserveBalance;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->PreFundMortgageIn = PreFundMortgageIn;
			result->PreFundMortgageOut = PreFundMortgageOut;
			result->FundMortgageIn = FundMortgageIn;
			result->FundMortgageOut = FundMortgageOut;
			result->FundMortgageAvailable = FundMortgageAvailable;
			result->MortgageableFund = MortgageableFund;
			result->SpecProductMargin = SpecProductMargin;
			result->SpecProductFrozenMargin = SpecProductFrozenMargin;
			result->SpecProductCommission = SpecProductCommission;
			result->SpecProductFrozenCommission = SpecProductFrozenCommission;
			result->SpecProductPositionProfit = SpecProductPositionProfit;
			result->SpecProductCloseProfit = SpecProductCloseProfit;
			result->SpecProductPositionProfitByAlg = SpecProductPositionProfitByAlg;
			result->SpecProductExchangeMargin = SpecProductExchangeMargin;
			result->BizType = BizType;
			result->FrozenSwap = FrozenSwap;
			result->RemainSwap = RemainSwap;
			return result;
		}
	};

	/// <summary>
	///投资者持仓
	/// </summary>
	public ref struct InvestorPositionField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///持仓多空方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///持仓日期
		/// </summary>
		char PositionDate;
		/// <summary>
		///上日持仓
		/// </summary>
		int YdPosition;
		/// <summary>
		///今日持仓
		/// </summary>
		int Position;
		/// <summary>
		///多头冻结
		/// </summary>
		int LongFrozen;
		/// <summary>
		///空头冻结
		/// </summary>
		int ShortFrozen;
		/// <summary>
		///开仓冻结金额
		/// </summary>
		double LongFrozenAmount;
		/// <summary>
		///开仓冻结金额
		/// </summary>
		double ShortFrozenAmount;
		/// <summary>
		///开仓量
		/// </summary>
		int OpenVolume;
		/// <summary>
		///平仓量
		/// </summary>
		int CloseVolume;
		/// <summary>
		///开仓金额
		/// </summary>
		double OpenAmount;
		/// <summary>
		///平仓金额
		/// </summary>
		double CloseAmount;
		/// <summary>
		///持仓成本
		/// </summary>
		double PositionCost;
		/// <summary>
		///上次占用的保证金
		/// </summary>
		double PreMargin;
		/// <summary>
		///占用的保证金
		/// </summary>
		double UseMargin;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///开仓成本
		/// </summary>
		double OpenCost;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchangeMargin;
		/// <summary>
		///组合成交形成的持仓
		/// </summary>
		int CombPosition;
		/// <summary>
		///组合多头冻结
		/// </summary>
		int CombLongFrozen;
		/// <summary>
		///组合空头冻结
		/// </summary>
		int CombShortFrozen;
		/// <summary>
		///逐日盯市平仓盈亏
		/// </summary>
		double CloseProfitByDate;
		/// <summary>
		///逐笔对冲平仓盈亏
		/// </summary>
		double CloseProfitByTrade;
		/// <summary>
		///今日持仓
		/// </summary>
		int TodayPosition;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///执行冻结
		/// </summary>
		int StrikeFrozen;
		/// <summary>
		///执行冻结金额
		/// </summary>
		double StrikeFrozenAmount;
		/// <summary>
		///放弃执行冻结
		/// </summary>
		int AbandonFrozen;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行冻结的昨仓
		/// </summary>
		int YdStrikeFrozen;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///大商所持仓成本差值，只有大商所使用
		/// </summary>
		double PositionCostOffset;
		/// <summary>
		///tas持仓手数
		/// </summary>
		int TasPosition;
		/// <summary>
		///tas持仓成本
		/// </summary>
		double TasPositionCost;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorPositionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorPositionField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			PosiDirection = source->PosiDirection;
			HedgeFlag = source->HedgeFlag;
			PositionDate = source->PositionDate;
			YdPosition = source->YdPosition;
			Position = source->Position;
			LongFrozen = source->LongFrozen;
			ShortFrozen = source->ShortFrozen;
			LongFrozenAmount = source->LongFrozenAmount;
			ShortFrozenAmount = source->ShortFrozenAmount;
			OpenVolume = source->OpenVolume;
			CloseVolume = source->CloseVolume;
			OpenAmount = source->OpenAmount;
			CloseAmount = source->CloseAmount;
			PositionCost = source->PositionCost;
			PreMargin = source->PreMargin;
			UseMargin = source->UseMargin;
			FrozenMargin = source->FrozenMargin;
			FrozenCash = source->FrozenCash;
			FrozenCommission = source->FrozenCommission;
			CashIn = source->CashIn;
			Commission = source->Commission;
			CloseProfit = source->CloseProfit;
			PositionProfit = source->PositionProfit;
			PreSettlementPrice = source->PreSettlementPrice;
			SettlementPrice = source->SettlementPrice;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OpenCost = source->OpenCost;
			ExchangeMargin = source->ExchangeMargin;
			CombPosition = source->CombPosition;
			CombLongFrozen = source->CombLongFrozen;
			CombShortFrozen = source->CombShortFrozen;
			CloseProfitByDate = source->CloseProfitByDate;
			CloseProfitByTrade = source->CloseProfitByTrade;
			TodayPosition = source->TodayPosition;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			StrikeFrozen = source->StrikeFrozen;
			StrikeFrozenAmount = source->StrikeFrozenAmount;
			AbandonFrozen = source->AbandonFrozen;
			ExchangeID = char2NetString(source->ExchangeID);
			YdStrikeFrozen = source->YdStrikeFrozen;
			InvestUnitID = char2NetString(source->InvestUnitID);
			PositionCostOffset = source->PositionCostOffset;
			TasPosition = source->TasPosition;
			TasPositionCost = source->TasPositionCost;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorPositionField(CThostFtdcInvestorPositionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorPositionField* getUnmanagedStructP()
		{
			CThostFtdcInvestorPositionField* result = new CThostFtdcInvestorPositionField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->PosiDirection = PosiDirection;
			result->HedgeFlag = HedgeFlag;
			result->PositionDate = PositionDate;
			result->YdPosition = YdPosition;
			result->Position = Position;
			result->LongFrozen = LongFrozen;
			result->ShortFrozen = ShortFrozen;
			result->LongFrozenAmount = LongFrozenAmount;
			result->ShortFrozenAmount = ShortFrozenAmount;
			result->OpenVolume = OpenVolume;
			result->CloseVolume = CloseVolume;
			result->OpenAmount = OpenAmount;
			result->CloseAmount = CloseAmount;
			result->PositionCost = PositionCost;
			result->PreMargin = PreMargin;
			result->UseMargin = UseMargin;
			result->FrozenMargin = FrozenMargin;
			result->FrozenCash = FrozenCash;
			result->FrozenCommission = FrozenCommission;
			result->CashIn = CashIn;
			result->Commission = Commission;
			result->CloseProfit = CloseProfit;
			result->PositionProfit = PositionProfit;
			result->PreSettlementPrice = PreSettlementPrice;
			result->SettlementPrice = SettlementPrice;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->OpenCost = OpenCost;
			result->ExchangeMargin = ExchangeMargin;
			result->CombPosition = CombPosition;
			result->CombLongFrozen = CombLongFrozen;
			result->CombShortFrozen = CombShortFrozen;
			result->CloseProfitByDate = CloseProfitByDate;
			result->CloseProfitByTrade = CloseProfitByTrade;
			result->TodayPosition = TodayPosition;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->StrikeFrozen = StrikeFrozen;
			result->StrikeFrozenAmount = StrikeFrozenAmount;
			result->AbandonFrozen = AbandonFrozen;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->YdStrikeFrozen = YdStrikeFrozen;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			result->PositionCostOffset = PositionCostOffset;
			result->TasPosition = TasPosition;
			result->TasPositionCost = TasPositionCost;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///合约保证金率
	/// </summary>
	public ref struct InstrumentMarginRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///是否相对交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentMarginRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			IsRelative = source->IsRelative;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentMarginRateField(CThostFtdcInstrumentMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentMarginRateField* result = new CThostFtdcInstrumentMarginRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->IsRelative = IsRelative;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///合约手续费率
	/// </summary>
	public ref struct InstrumentCommissionRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///业务类型
		/// </summary>
		char BizType;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentCommissionRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentCommissionRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			ExchangeID = char2NetString(source->ExchangeID);
			BizType = source->BizType;
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentCommissionRateField(CThostFtdcInstrumentCommissionRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentCommissionRateField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentCommissionRateField* result = new CThostFtdcInstrumentCommissionRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->BizType = BizType;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///深度行情
	/// </summary>
	public ref struct DepthMarketDataField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///最新价
		/// </summary>
		double LastPrice;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///昨收盘
		/// </summary>
		double PreClosePrice;
		/// <summary>
		///昨持仓量
		/// </summary>
		double PreOpenInterest;
		/// <summary>
		///今开盘
		/// </summary>
		double OpenPrice;
		/// <summary>
		///最高价
		/// </summary>
		double HighestPrice;
		/// <summary>
		///最低价
		/// </summary>
		double LowestPrice;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///成交金额
		/// </summary>
		double Turnover;
		/// <summary>
		///持仓量
		/// </summary>
		double OpenInterest;
		/// <summary>
		///今收盘
		/// </summary>
		double ClosePrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///涨停板价
		/// </summary>
		double UpperLimitPrice;
		/// <summary>
		///跌停板价
		/// </summary>
		double LowerLimitPrice;
		/// <summary>
		///昨虚实度
		/// </summary>
		double PreDelta;
		/// <summary>
		///今虚实度
		/// </summary>
		double CurrDelta;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///最后修改毫秒
		/// </summary>
		int UpdateMillisec;
		/// <summary>
		///申买价一
		/// </summary>
		double BidPrice1;
		/// <summary>
		///申买量一
		/// </summary>
		int BidVolume1;
		/// <summary>
		///申卖价一
		/// </summary>
		double AskPrice1;
		/// <summary>
		///申卖量一
		/// </summary>
		int AskVolume1;
		/// <summary>
		///申买价二
		/// </summary>
		double BidPrice2;
		/// <summary>
		///申买量二
		/// </summary>
		int BidVolume2;
		/// <summary>
		///申卖价二
		/// </summary>
		double AskPrice2;
		/// <summary>
		///申卖量二
		/// </summary>
		int AskVolume2;
		/// <summary>
		///申买价三
		/// </summary>
		double BidPrice3;
		/// <summary>
		///申买量三
		/// </summary>
		int BidVolume3;
		/// <summary>
		///申卖价三
		/// </summary>
		double AskPrice3;
		/// <summary>
		///申卖量三
		/// </summary>
		int AskVolume3;
		/// <summary>
		///申买价四
		/// </summary>
		double BidPrice4;
		/// <summary>
		///申买量四
		/// </summary>
		int BidVolume4;
		/// <summary>
		///申卖价四
		/// </summary>
		double AskPrice4;
		/// <summary>
		///申卖量四
		/// </summary>
		int AskVolume4;
		/// <summary>
		///申买价五
		/// </summary>
		double BidPrice5;
		/// <summary>
		///申买量五
		/// </summary>
		int BidVolume5;
		/// <summary>
		///申卖价五
		/// </summary>
		double AskPrice5;
		/// <summary>
		///申卖量五
		/// </summary>
		int AskVolume5;
		/// <summary>
		///当日均价
		/// </summary>
		double AveragePrice;
		/// <summary>
		///业务日期
		/// </summary>
		System::String^ ActionDay;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///上带价
		/// </summary>
		double BandingUpperPrice;
		/// <summary>
		///下带价
		/// </summary>
		double BandingLowerPrice;

		/// <summary>
		/// 默认构造函数	</summary>
		DepthMarketDataField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcDepthMarketDataField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve2 = char2NetString(source->reserve2);
			LastPrice = source->LastPrice;
			PreSettlementPrice = source->PreSettlementPrice;
			PreClosePrice = source->PreClosePrice;
			PreOpenInterest = source->PreOpenInterest;
			OpenPrice = source->OpenPrice;
			HighestPrice = source->HighestPrice;
			LowestPrice = source->LowestPrice;
			Volume = source->Volume;
			Turnover = source->Turnover;
			OpenInterest = source->OpenInterest;
			ClosePrice = source->ClosePrice;
			SettlementPrice = source->SettlementPrice;
			UpperLimitPrice = source->UpperLimitPrice;
			LowerLimitPrice = source->LowerLimitPrice;
			PreDelta = source->PreDelta;
			CurrDelta = source->CurrDelta;
			UpdateTime = char2NetString(source->UpdateTime);
			UpdateMillisec = source->UpdateMillisec;
			BidPrice1 = source->BidPrice1;
			BidVolume1 = source->BidVolume1;
			AskPrice1 = source->AskPrice1;
			AskVolume1 = source->AskVolume1;
			BidPrice2 = source->BidPrice2;
			BidVolume2 = source->BidVolume2;
			AskPrice2 = source->AskPrice2;
			AskVolume2 = source->AskVolume2;
			BidPrice3 = source->BidPrice3;
			BidVolume3 = source->BidVolume3;
			AskPrice3 = source->AskPrice3;
			AskVolume3 = source->AskVolume3;
			BidPrice4 = source->BidPrice4;
			BidVolume4 = source->BidVolume4;
			AskPrice4 = source->AskPrice4;
			AskVolume4 = source->AskVolume4;
			BidPrice5 = source->BidPrice5;
			BidVolume5 = source->BidVolume5;
			AskPrice5 = source->AskPrice5;
			AskVolume5 = source->AskVolume5;
			AveragePrice = source->AveragePrice;
			ActionDay = char2NetString(source->ActionDay);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			BandingUpperPrice = source->BandingUpperPrice;
			BandingLowerPrice = source->BandingLowerPrice;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		DepthMarketDataField(CThostFtdcDepthMarketDataField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcDepthMarketDataField* getUnmanagedStructP()
		{
			CThostFtdcDepthMarketDataField* result = new CThostFtdcDepthMarketDataField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->LastPrice = LastPrice;
			result->PreSettlementPrice = PreSettlementPrice;
			result->PreClosePrice = PreClosePrice;
			result->PreOpenInterest = PreOpenInterest;
			result->OpenPrice = OpenPrice;
			result->HighestPrice = HighestPrice;
			result->LowestPrice = LowestPrice;
			result->Volume = Volume;
			result->Turnover = Turnover;
			result->OpenInterest = OpenInterest;
			result->ClosePrice = ClosePrice;
			result->SettlementPrice = SettlementPrice;
			result->UpperLimitPrice = UpperLimitPrice;
			result->LowerLimitPrice = LowerLimitPrice;
			result->PreDelta = PreDelta;
			result->CurrDelta = CurrDelta;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			result->UpdateMillisec = UpdateMillisec;
			result->BidPrice1 = BidPrice1;
			result->BidVolume1 = BidVolume1;
			result->AskPrice1 = AskPrice1;
			result->AskVolume1 = AskVolume1;
			result->BidPrice2 = BidPrice2;
			result->BidVolume2 = BidVolume2;
			result->AskPrice2 = AskPrice2;
			result->AskVolume2 = AskVolume2;
			result->BidPrice3 = BidPrice3;
			result->BidVolume3 = BidVolume3;
			result->AskPrice3 = AskPrice3;
			result->AskVolume3 = AskVolume3;
			result->BidPrice4 = BidPrice4;
			result->BidVolume4 = BidVolume4;
			result->AskPrice4 = AskPrice4;
			result->AskVolume4 = AskVolume4;
			result->BidPrice5 = BidPrice5;
			result->BidVolume5 = BidVolume5;
			result->AskPrice5 = AskPrice5;
			result->AskVolume5 = AskVolume5;
			result->AveragePrice = AveragePrice;
			ActionDay ? strcpy_s(result->ActionDay, netString2ConstChar(ActionDay)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			result->BandingUpperPrice = BandingUpperPrice;
			result->BandingLowerPrice = BandingLowerPrice;
			return result;
		}
	};

	/// <summary>
	///投资者合约交易权限
	/// </summary>
	public ref struct InstrumentTradingRightField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易权限
		/// </summary>
		char TradingRight;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentTradingRightField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentTradingRightField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			TradingRight = source->TradingRight;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentTradingRightField(CThostFtdcInstrumentTradingRightField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentTradingRightField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentTradingRightField* result = new CThostFtdcInstrumentTradingRightField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->TradingRight = TradingRight;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司用户
	/// </summary>
	public ref struct BrokerUserField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户名称
		/// </summary>
		System::String^ UserName;
		/// <summary>
		///用户类型
		/// </summary>
		char UserType;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;
		/// <summary>
		///是否使用令牌
		/// </summary>
		int IsUsingOTP;
		/// <summary>
		///是否强制终端认证
		/// </summary>
		int IsAuthForce;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerUserField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserName = char2NetString(source->UserName);
			UserType = source->UserType;
			IsActive = source->IsActive;
			IsUsingOTP = source->IsUsingOTP;
			IsAuthForce = source->IsAuthForce;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerUserField(CThostFtdcBrokerUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerUserField* getUnmanagedStructP()
		{
			CThostFtdcBrokerUserField* result = new CThostFtdcBrokerUserField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			UserName ? strcpy_s(result->UserName, netString2ConstChar(UserName)) : false;
			result->UserType = UserType;
			result->IsActive = IsActive;
			result->IsUsingOTP = IsUsingOTP;
			result->IsAuthForce = IsAuthForce;
			return result;
		}
	};

	/// <summary>
	///经纪公司用户口令
	/// </summary>
	public ref struct BrokerUserPasswordField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///上次修改时间
		/// </summary>
		System::String^ LastUpdateTime;
		/// <summary>
		///上次登陆时间
		/// </summary>
		System::String^ LastLoginTime;
		/// <summary>
		///密码过期时间
		/// </summary>
		System::String^ ExpireDate;
		/// <summary>
		///弱密码过期时间
		/// </summary>
		System::String^ WeakExpireDate;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerUserPasswordField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerUserPasswordField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			Password = char2NetString(source->Password);
			LastUpdateTime = char2NetString(source->LastUpdateTime);
			LastLoginTime = char2NetString(source->LastLoginTime);
			ExpireDate = char2NetString(source->ExpireDate);
			WeakExpireDate = char2NetString(source->WeakExpireDate);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerUserPasswordField(CThostFtdcBrokerUserPasswordField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerUserPasswordField* getUnmanagedStructP()
		{
			CThostFtdcBrokerUserPasswordField* result = new CThostFtdcBrokerUserPasswordField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			LastUpdateTime ? strcpy_s(result->LastUpdateTime, netString2ConstChar(LastUpdateTime)) : false;
			LastLoginTime ? strcpy_s(result->LastLoginTime, netString2ConstChar(LastLoginTime)) : false;
			ExpireDate ? strcpy_s(result->ExpireDate, netString2ConstChar(ExpireDate)) : false;
			WeakExpireDate ? strcpy_s(result->WeakExpireDate, netString2ConstChar(WeakExpireDate)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司用户功能权限
	/// </summary>
	public ref struct BrokerUserFunctionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///经纪公司功能代码
		/// </summary>
		char BrokerFunctionCode;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerUserFunctionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerUserFunctionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			BrokerFunctionCode = source->BrokerFunctionCode;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerUserFunctionField(CThostFtdcBrokerUserFunctionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerUserFunctionField* getUnmanagedStructP()
		{
			CThostFtdcBrokerUserFunctionField* result = new CThostFtdcBrokerUserFunctionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->BrokerFunctionCode = BrokerFunctionCode;
			return result;
		}
	};

	/// <summary>
	///交易所交易员报盘机
	/// </summary>
	public ref struct TraderOfferField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///交易所交易员连接状态
		/// </summary>
		char TraderConnectStatus;
		/// <summary>
		///发出连接请求的日期
		/// </summary>
		System::String^ ConnectRequestDate;
		/// <summary>
		///发出连接请求的时间
		/// </summary>
		System::String^ ConnectRequestTime;
		/// <summary>
		///上次报告日期
		/// </summary>
		System::String^ LastReportDate;
		/// <summary>
		///上次报告时间
		/// </summary>
		System::String^ LastReportTime;
		/// <summary>
		///完成连接日期
		/// </summary>
		System::String^ ConnectDate;
		/// <summary>
		///完成连接时间
		/// </summary>
		System::String^ ConnectTime;
		/// <summary>
		///启动日期
		/// </summary>
		System::String^ StartDate;
		/// <summary>
		///启动时间
		/// </summary>
		System::String^ StartTime;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///本席位最大成交编号
		/// </summary>
		System::String^ MaxTradeID;
		/// <summary>
		///本席位最大报单备拷
		/// </summary>
		System::String^ MaxOrderMessageReference;

		/// <summary>
		/// 默认构造函数	</summary>
		TraderOfferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTraderOfferField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ParticipantID = char2NetString(source->ParticipantID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			TraderConnectStatus = source->TraderConnectStatus;
			ConnectRequestDate = char2NetString(source->ConnectRequestDate);
			ConnectRequestTime = char2NetString(source->ConnectRequestTime);
			LastReportDate = char2NetString(source->LastReportDate);
			LastReportTime = char2NetString(source->LastReportTime);
			ConnectDate = char2NetString(source->ConnectDate);
			ConnectTime = char2NetString(source->ConnectTime);
			StartDate = char2NetString(source->StartDate);
			StartTime = char2NetString(source->StartTime);
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			MaxTradeID = char2NetString(source->MaxTradeID);
			MaxOrderMessageReference = char2NetString(source->MaxOrderMessageReference);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TraderOfferField(CThostFtdcTraderOfferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTraderOfferField* getUnmanagedStructP()
		{
			CThostFtdcTraderOfferField* result = new CThostFtdcTraderOfferField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			result->TraderConnectStatus = TraderConnectStatus;
			ConnectRequestDate ? strcpy_s(result->ConnectRequestDate, netString2ConstChar(ConnectRequestDate)) : false;
			ConnectRequestTime ? strcpy_s(result->ConnectRequestTime, netString2ConstChar(ConnectRequestTime)) : false;
			LastReportDate ? strcpy_s(result->LastReportDate, netString2ConstChar(LastReportDate)) : false;
			LastReportTime ? strcpy_s(result->LastReportTime, netString2ConstChar(LastReportTime)) : false;
			ConnectDate ? strcpy_s(result->ConnectDate, netString2ConstChar(ConnectDate)) : false;
			ConnectTime ? strcpy_s(result->ConnectTime, netString2ConstChar(ConnectTime)) : false;
			StartDate ? strcpy_s(result->StartDate, netString2ConstChar(StartDate)) : false;
			StartTime ? strcpy_s(result->StartTime, netString2ConstChar(StartTime)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			MaxTradeID ? strcpy_s(result->MaxTradeID, netString2ConstChar(MaxTradeID)) : false;
			MaxOrderMessageReference ? strcpy_s(result->MaxOrderMessageReference, netString2ConstChar(MaxOrderMessageReference)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者结算结果
	/// </summary>
	public ref struct SettlementInfoField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///消息正文
		/// </summary>
		System::String^ Content;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		SettlementInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSettlementInfoField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			SequenceNo = source->SequenceNo;
			Content = char2NetString(source->Content);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SettlementInfoField(CThostFtdcSettlementInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSettlementInfoField* getUnmanagedStructP()
		{
			CThostFtdcSettlementInfoField* result = new CThostFtdcSettlementInfoField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->SequenceNo = SequenceNo;
			Content ? strcpy_s(result->Content, netString2ConstChar(Content)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///合约保证金率调整
	/// </summary>
	public ref struct InstrumentMarginRateAdjustField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///是否相对交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentMarginRateAdjustField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentMarginRateAdjustField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			IsRelative = source->IsRelative;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentMarginRateAdjustField(CThostFtdcInstrumentMarginRateAdjustField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentMarginRateAdjustField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentMarginRateAdjustField* result = new CThostFtdcInstrumentMarginRateAdjustField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->IsRelative = IsRelative;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所保证金率
	/// </summary>
	public ref struct ExchangeMarginRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeMarginRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeMarginRateField(CThostFtdcExchangeMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcExchangeMarginRateField* result = new CThostFtdcExchangeMarginRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所保证金率调整
	/// </summary>
	public ref struct ExchangeMarginRateAdjustField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///跟随交易所投资者多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///跟随交易所投资者多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///跟随交易所投资者空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///跟随交易所投资者空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///交易所多头保证金率
		/// </summary>
		double ExchLongMarginRatioByMoney;
		/// <summary>
		///交易所多头保证金费
		/// </summary>
		double ExchLongMarginRatioByVolume;
		/// <summary>
		///交易所空头保证金率
		/// </summary>
		double ExchShortMarginRatioByMoney;
		/// <summary>
		///交易所空头保证金费
		/// </summary>
		double ExchShortMarginRatioByVolume;
		/// <summary>
		///不跟随交易所投资者多头保证金率
		/// </summary>
		double NoLongMarginRatioByMoney;
		/// <summary>
		///不跟随交易所投资者多头保证金费
		/// </summary>
		double NoLongMarginRatioByVolume;
		/// <summary>
		///不跟随交易所投资者空头保证金率
		/// </summary>
		double NoShortMarginRatioByMoney;
		/// <summary>
		///不跟随交易所投资者空头保证金费
		/// </summary>
		double NoShortMarginRatioByVolume;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeMarginRateAdjustField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeMarginRateAdjustField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			ExchLongMarginRatioByMoney = source->ExchLongMarginRatioByMoney;
			ExchLongMarginRatioByVolume = source->ExchLongMarginRatioByVolume;
			ExchShortMarginRatioByMoney = source->ExchShortMarginRatioByMoney;
			ExchShortMarginRatioByVolume = source->ExchShortMarginRatioByVolume;
			NoLongMarginRatioByMoney = source->NoLongMarginRatioByMoney;
			NoLongMarginRatioByVolume = source->NoLongMarginRatioByVolume;
			NoShortMarginRatioByMoney = source->NoShortMarginRatioByMoney;
			NoShortMarginRatioByVolume = source->NoShortMarginRatioByVolume;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeMarginRateAdjustField(CThostFtdcExchangeMarginRateAdjustField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeMarginRateAdjustField* getUnmanagedStructP()
		{
			CThostFtdcExchangeMarginRateAdjustField* result = new CThostFtdcExchangeMarginRateAdjustField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->ExchLongMarginRatioByMoney = ExchLongMarginRatioByMoney;
			result->ExchLongMarginRatioByVolume = ExchLongMarginRatioByVolume;
			result->ExchShortMarginRatioByMoney = ExchShortMarginRatioByMoney;
			result->ExchShortMarginRatioByVolume = ExchShortMarginRatioByVolume;
			result->NoLongMarginRatioByMoney = NoLongMarginRatioByMoney;
			result->NoLongMarginRatioByVolume = NoLongMarginRatioByVolume;
			result->NoShortMarginRatioByMoney = NoShortMarginRatioByMoney;
			result->NoShortMarginRatioByVolume = NoShortMarginRatioByVolume;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///汇率
	/// </summary>
	public ref struct ExchangeRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///源币种
		/// </summary>
		System::String^ FromCurrencyID;
		/// <summary>
		///源币种单位数量
		/// </summary>
		double FromCurrencyUnit;
		/// <summary>
		///目标币种
		/// </summary>
		System::String^ ToCurrencyID;
		/// <summary>
		///汇率
		/// </summary>
		double ExchangeRate;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			FromCurrencyID = char2NetString(source->FromCurrencyID);
			FromCurrencyUnit = source->FromCurrencyUnit;
			ToCurrencyID = char2NetString(source->ToCurrencyID);
			ExchangeRate = source->ExchangeRate;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeRateField(CThostFtdcExchangeRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeRateField* getUnmanagedStructP()
		{
			CThostFtdcExchangeRateField* result = new CThostFtdcExchangeRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			FromCurrencyID ? strcpy_s(result->FromCurrencyID, netString2ConstChar(FromCurrencyID)) : false;
			result->FromCurrencyUnit = FromCurrencyUnit;
			ToCurrencyID ? strcpy_s(result->ToCurrencyID, netString2ConstChar(ToCurrencyID)) : false;
			result->ExchangeRate = ExchangeRate;
			return result;
		}
	};

	/// <summary>
	///结算引用
	/// </summary>
	public ref struct SettlementRefField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;

		/// <summary>
		/// 默认构造函数	</summary>
		SettlementRefField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSettlementRefField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SettlementRefField(CThostFtdcSettlementRefField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSettlementRefField* getUnmanagedStructP()
		{
			CThostFtdcSettlementRefField* result = new CThostFtdcSettlementRefField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			return result;
		}
	};

	/// <summary>
	///当前时间
	/// </summary>
	public ref struct CurrentTimeField
	{
		/// <summary>
		///当前日期
		/// </summary>
		System::String^ CurrDate;
		/// <summary>
		///当前时间
		/// </summary>
		System::String^ CurrTime;
		/// <summary>
		///当前时间（毫秒）
		/// </summary>
		int CurrMillisec;
		/// <summary>
		///业务日期
		/// </summary>
		System::String^ ActionDay;

		/// <summary>
		/// 默认构造函数	</summary>
		CurrentTimeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCurrentTimeField* source)
		{
			CurrDate = char2NetString(source->CurrDate);
			CurrTime = char2NetString(source->CurrTime);
			CurrMillisec = source->CurrMillisec;
			ActionDay = char2NetString(source->ActionDay);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CurrentTimeField(CThostFtdcCurrentTimeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCurrentTimeField* getUnmanagedStructP()
		{
			CThostFtdcCurrentTimeField* result = new CThostFtdcCurrentTimeField();
			CurrDate ? strcpy_s(result->CurrDate, netString2ConstChar(CurrDate)) : false;
			CurrTime ? strcpy_s(result->CurrTime, netString2ConstChar(CurrTime)) : false;
			result->CurrMillisec = CurrMillisec;
			ActionDay ? strcpy_s(result->ActionDay, netString2ConstChar(ActionDay)) : false;
			return result;
		}
	};

	/// <summary>
	///通讯阶段
	/// </summary>
	public ref struct CommPhaseField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///通讯时段编号
		/// </summary>
		short CommPhaseNo;
		/// <summary>
		///系统编号
		/// </summary>
		System::String^ SystemID;

		/// <summary>
		/// 默认构造函数	</summary>
		CommPhaseField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCommPhaseField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			CommPhaseNo = source->CommPhaseNo;
			SystemID = char2NetString(source->SystemID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CommPhaseField(CThostFtdcCommPhaseField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCommPhaseField* getUnmanagedStructP()
		{
			CThostFtdcCommPhaseField* result = new CThostFtdcCommPhaseField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->CommPhaseNo = CommPhaseNo;
			SystemID ? strcpy_s(result->SystemID, netString2ConstChar(SystemID)) : false;
			return result;
		}
	};

	/// <summary>
	///登录信息
	/// </summary>
	public ref struct LoginInfoField
	{
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///登录日期
		/// </summary>
		System::String^ LoginDate;
		/// <summary>
		///登录时间
		/// </summary>
		System::String^ LoginTime;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///接口端产品信息
		/// </summary>
		System::String^ InterfaceProductInfo;
		/// <summary>
		///协议信息
		/// </summary>
		System::String^ ProtocolInfo;
		/// <summary>
		///系统名称
		/// </summary>
		System::String^ SystemName;
		/// <summary>
		///密码,已弃用
		/// </summary>
		System::String^ PasswordDeprecated;
		/// <summary>
		///最大报单引用
		/// </summary>
		System::String^ MaxOrderRef;
		/// <summary>
		///上期所时间
		/// </summary>
		System::String^ SHFETime;
		/// <summary>
		///大商所时间
		/// </summary>
		System::String^ DCETime;
		/// <summary>
		///郑商所时间
		/// </summary>
		System::String^ CZCETime;
		/// <summary>
		///中金所时间
		/// </summary>
		System::String^ FFEXTime;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///动态密码
		/// </summary>
		System::String^ OneTimePassword;
		/// <summary>
		///能源中心时间
		/// </summary>
		System::String^ INETime;
		/// <summary>
		///查询时是否需要流控
		/// </summary>
		int IsQryControl;
		/// <summary>
		///登录备注
		/// </summary>
		System::String^ LoginRemark;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		LoginInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcLoginInfoField* source)
		{
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			LoginDate = char2NetString(source->LoginDate);
			LoginTime = char2NetString(source->LoginTime);
			reserve1 = char2NetString(source->reserve1);
			UserProductInfo = char2NetString(source->UserProductInfo);
			InterfaceProductInfo = char2NetString(source->InterfaceProductInfo);
			ProtocolInfo = char2NetString(source->ProtocolInfo);
			SystemName = char2NetString(source->SystemName);
			PasswordDeprecated = char2NetString(source->PasswordDeprecated);
			MaxOrderRef = char2NetString(source->MaxOrderRef);
			SHFETime = char2NetString(source->SHFETime);
			DCETime = char2NetString(source->DCETime);
			CZCETime = char2NetString(source->CZCETime);
			FFEXTime = char2NetString(source->FFEXTime);
			MacAddress = char2NetString(source->MacAddress);
			OneTimePassword = char2NetString(source->OneTimePassword);
			INETime = char2NetString(source->INETime);
			IsQryControl = source->IsQryControl;
			LoginRemark = char2NetString(source->LoginRemark);
			Password = char2NetString(source->Password);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		LoginInfoField(CThostFtdcLoginInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcLoginInfoField* getUnmanagedStructP()
		{
			CThostFtdcLoginInfoField* result = new CThostFtdcLoginInfoField();
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			LoginDate ? strcpy_s(result->LoginDate, netString2ConstChar(LoginDate)) : false;
			LoginTime ? strcpy_s(result->LoginTime, netString2ConstChar(LoginTime)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			InterfaceProductInfo ? strcpy_s(result->InterfaceProductInfo, netString2ConstChar(InterfaceProductInfo)) : false;
			ProtocolInfo ? strcpy_s(result->ProtocolInfo, netString2ConstChar(ProtocolInfo)) : false;
			SystemName ? strcpy_s(result->SystemName, netString2ConstChar(SystemName)) : false;
			PasswordDeprecated ? strcpy_s(result->PasswordDeprecated, netString2ConstChar(PasswordDeprecated)) : false;
			MaxOrderRef ? strcpy_s(result->MaxOrderRef, netString2ConstChar(MaxOrderRef)) : false;
			SHFETime ? strcpy_s(result->SHFETime, netString2ConstChar(SHFETime)) : false;
			DCETime ? strcpy_s(result->DCETime, netString2ConstChar(DCETime)) : false;
			CZCETime ? strcpy_s(result->CZCETime, netString2ConstChar(CZCETime)) : false;
			FFEXTime ? strcpy_s(result->FFEXTime, netString2ConstChar(FFEXTime)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			OneTimePassword ? strcpy_s(result->OneTimePassword, netString2ConstChar(OneTimePassword)) : false;
			INETime ? strcpy_s(result->INETime, netString2ConstChar(INETime)) : false;
			result->IsQryControl = IsQryControl;
			LoginRemark ? strcpy_s(result->LoginRemark, netString2ConstChar(LoginRemark)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///登录信息
	/// </summary>
	public ref struct LogoutAllField
	{
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///系统名称
		/// </summary>
		System::String^ SystemName;

		/// <summary>
		/// 默认构造函数	</summary>
		LogoutAllField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcLogoutAllField* source)
		{
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			SystemName = char2NetString(source->SystemName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		LogoutAllField(CThostFtdcLogoutAllField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcLogoutAllField* getUnmanagedStructP()
		{
			CThostFtdcLogoutAllField* result = new CThostFtdcLogoutAllField();
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			SystemName ? strcpy_s(result->SystemName, netString2ConstChar(SystemName)) : false;
			return result;
		}
	};

	/// <summary>
	///前置状态
	/// </summary>
	public ref struct FrontStatusField
	{
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///上次报告日期
		/// </summary>
		System::String^ LastReportDate;
		/// <summary>
		///上次报告时间
		/// </summary>
		System::String^ LastReportTime;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;

		/// <summary>
		/// 默认构造函数	</summary>
		FrontStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcFrontStatusField* source)
		{
			FrontID = source->FrontID;
			LastReportDate = char2NetString(source->LastReportDate);
			LastReportTime = char2NetString(source->LastReportTime);
			IsActive = source->IsActive;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		FrontStatusField(CThostFtdcFrontStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcFrontStatusField* getUnmanagedStructP()
		{
			CThostFtdcFrontStatusField* result = new CThostFtdcFrontStatusField();
			result->FrontID = FrontID;
			LastReportDate ? strcpy_s(result->LastReportDate, netString2ConstChar(LastReportDate)) : false;
			LastReportTime ? strcpy_s(result->LastReportTime, netString2ConstChar(LastReportTime)) : false;
			result->IsActive = IsActive;
			return result;
		}
	};

	/// <summary>
	///用户口令变更
	/// </summary>
	public ref struct UserPasswordUpdateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///原来的口令
		/// </summary>
		System::String^ OldPassword;
		/// <summary>
		///新的口令
		/// </summary>
		System::String^ NewPassword;

		/// <summary>
		/// 默认构造函数	</summary>
		UserPasswordUpdateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserPasswordUpdateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			OldPassword = char2NetString(source->OldPassword);
			NewPassword = char2NetString(source->NewPassword);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserPasswordUpdateField(CThostFtdcUserPasswordUpdateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserPasswordUpdateField* getUnmanagedStructP()
		{
			CThostFtdcUserPasswordUpdateField* result = new CThostFtdcUserPasswordUpdateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			OldPassword ? strcpy_s(result->OldPassword, netString2ConstChar(OldPassword)) : false;
			NewPassword ? strcpy_s(result->NewPassword, netString2ConstChar(NewPassword)) : false;
			return result;
		}
	};

	/// <summary>
	///输入报单
	/// </summary>
	public ref struct InputOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///报单价格条件
		/// </summary>
		char OrderPriceType;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///组合开平标志
		/// </summary>
		System::String^ CombOffsetFlag;
		/// <summary>
		///组合投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量
		/// </summary>
		int VolumeTotalOriginal;
		/// <summary>
		///有效期类型
		/// </summary>
		char TimeCondition;
		/// <summary>
		///GTD日期
		/// </summary>
		System::String^ GTDDate;
		/// <summary>
		///成交量类型
		/// </summary>
		char VolumeCondition;
		/// <summary>
		///最小成交量
		/// </summary>
		int MinVolume;
		/// <summary>
		///触发条件
		/// </summary>
		char ContingentCondition;
		/// <summary>
		///止损价
		/// </summary>
		double StopPrice;
		/// <summary>
		///强平原因
		/// </summary>
		char ForceCloseReason;
		/// <summary>
		///自动挂起标志
		/// </summary>
		int IsAutoSuspend;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///用户强评标志
		/// </summary>
		int UserForceClose;
		/// <summary>
		///互换单标志
		/// </summary>
		int IsSwapOrder;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OrderRef = char2NetString(source->OrderRef);
			UserID = char2NetString(source->UserID);
			OrderPriceType = source->OrderPriceType;
			Direction = source->Direction;
			CombOffsetFlag = char2NetString(source->CombOffsetFlag);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			LimitPrice = source->LimitPrice;
			VolumeTotalOriginal = source->VolumeTotalOriginal;
			TimeCondition = source->TimeCondition;
			GTDDate = char2NetString(source->GTDDate);
			VolumeCondition = source->VolumeCondition;
			MinVolume = source->MinVolume;
			ContingentCondition = source->ContingentCondition;
			StopPrice = source->StopPrice;
			ForceCloseReason = source->ForceCloseReason;
			IsAutoSuspend = source->IsAutoSuspend;
			BusinessUnit = char2NetString(source->BusinessUnit);
			RequestID = source->RequestID;
			UserForceClose = source->UserForceClose;
			IsSwapOrder = source->IsSwapOrder;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputOrderField(CThostFtdcInputOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputOrderField* getUnmanagedStructP()
		{
			CThostFtdcInputOrderField* result = new CThostFtdcInputOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->OrderPriceType = OrderPriceType;
			result->Direction = Direction;
			CombOffsetFlag ? strcpy_s(result->CombOffsetFlag, netString2ConstChar(CombOffsetFlag)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->LimitPrice = LimitPrice;
			result->VolumeTotalOriginal = VolumeTotalOriginal;
			result->TimeCondition = TimeCondition;
			GTDDate ? strcpy_s(result->GTDDate, netString2ConstChar(GTDDate)) : false;
			result->VolumeCondition = VolumeCondition;
			result->MinVolume = MinVolume;
			result->ContingentCondition = ContingentCondition;
			result->StopPrice = StopPrice;
			result->ForceCloseReason = ForceCloseReason;
			result->IsAutoSuspend = IsAutoSuspend;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->RequestID = RequestID;
			result->UserForceClose = UserForceClose;
			result->IsSwapOrder = IsSwapOrder;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///报单
	/// </summary>
	public ref struct OrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///报单价格条件
		/// </summary>
		char OrderPriceType;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///组合开平标志
		/// </summary>
		System::String^ CombOffsetFlag;
		/// <summary>
		///组合投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量
		/// </summary>
		int VolumeTotalOriginal;
		/// <summary>
		///有效期类型
		/// </summary>
		char TimeCondition;
		/// <summary>
		///GTD日期
		/// </summary>
		System::String^ GTDDate;
		/// <summary>
		///成交量类型
		/// </summary>
		char VolumeCondition;
		/// <summary>
		///最小成交量
		/// </summary>
		int MinVolume;
		/// <summary>
		///触发条件
		/// </summary>
		char ContingentCondition;
		/// <summary>
		///止损价
		/// </summary>
		double StopPrice;
		/// <summary>
		///强平原因
		/// </summary>
		char ForceCloseReason;
		/// <summary>
		///自动挂起标志
		/// </summary>
		int IsAutoSuspend;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报单提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///报单来源
		/// </summary>
		char OrderSource;
		/// <summary>
		///报单状态
		/// </summary>
		char OrderStatus;
		/// <summary>
		///报单类型
		/// </summary>
		char OrderType;
		/// <summary>
		///今成交数量
		/// </summary>
		int VolumeTraded;
		/// <summary>
		///剩余数量
		/// </summary>
		int VolumeTotal;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///委托时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///激活时间
		/// </summary>
		System::String^ ActiveTime;
		/// <summary>
		///挂起时间
		/// </summary>
		System::String^ SuspendTime;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///最后修改交易所交易员代码
		/// </summary>
		System::String^ ActiveTraderID;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///用户强评标志
		/// </summary>
		int UserForceClose;
		/// <summary>
		///操作用户代码
		/// </summary>
		System::String^ ActiveUserID;
		/// <summary>
		///经纪公司报单编号
		/// </summary>
		int BrokerOrderSeq;
		/// <summary>
		///相关报单
		/// </summary>
		System::String^ RelativeOrderSysID;
		/// <summary>
		///郑商所成交数量
		/// </summary>
		int ZCETotalTradedVolume;
		/// <summary>
		///互换单标志
		/// </summary>
		int IsSwapOrder;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		OrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OrderRef = char2NetString(source->OrderRef);
			UserID = char2NetString(source->UserID);
			OrderPriceType = source->OrderPriceType;
			Direction = source->Direction;
			CombOffsetFlag = char2NetString(source->CombOffsetFlag);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			LimitPrice = source->LimitPrice;
			VolumeTotalOriginal = source->VolumeTotalOriginal;
			TimeCondition = source->TimeCondition;
			GTDDate = char2NetString(source->GTDDate);
			VolumeCondition = source->VolumeCondition;
			MinVolume = source->MinVolume;
			ContingentCondition = source->ContingentCondition;
			StopPrice = source->StopPrice;
			ForceCloseReason = source->ForceCloseReason;
			IsAutoSuspend = source->IsAutoSuspend;
			BusinessUnit = char2NetString(source->BusinessUnit);
			RequestID = source->RequestID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OrderSysID = char2NetString(source->OrderSysID);
			OrderSource = source->OrderSource;
			OrderStatus = source->OrderStatus;
			OrderType = source->OrderType;
			VolumeTraded = source->VolumeTraded;
			VolumeTotal = source->VolumeTotal;
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			ActiveTime = char2NetString(source->ActiveTime);
			SuspendTime = char2NetString(source->SuspendTime);
			UpdateTime = char2NetString(source->UpdateTime);
			CancelTime = char2NetString(source->CancelTime);
			ActiveTraderID = char2NetString(source->ActiveTraderID);
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			UserProductInfo = char2NetString(source->UserProductInfo);
			StatusMsg = char2NetString(source->StatusMsg);
			UserForceClose = source->UserForceClose;
			ActiveUserID = char2NetString(source->ActiveUserID);
			BrokerOrderSeq = source->BrokerOrderSeq;
			RelativeOrderSysID = char2NetString(source->RelativeOrderSysID);
			ZCETotalTradedVolume = source->ZCETotalTradedVolume;
			IsSwapOrder = source->IsSwapOrder;
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OrderField(CThostFtdcOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOrderField* getUnmanagedStructP()
		{
			CThostFtdcOrderField* result = new CThostFtdcOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->OrderPriceType = OrderPriceType;
			result->Direction = Direction;
			CombOffsetFlag ? strcpy_s(result->CombOffsetFlag, netString2ConstChar(CombOffsetFlag)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->LimitPrice = LimitPrice;
			result->VolumeTotalOriginal = VolumeTotalOriginal;
			result->TimeCondition = TimeCondition;
			GTDDate ? strcpy_s(result->GTDDate, netString2ConstChar(GTDDate)) : false;
			result->VolumeCondition = VolumeCondition;
			result->MinVolume = MinVolume;
			result->ContingentCondition = ContingentCondition;
			result->StopPrice = StopPrice;
			result->ForceCloseReason = ForceCloseReason;
			result->IsAutoSuspend = IsAutoSuspend;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->RequestID = RequestID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->OrderSource = OrderSource;
			result->OrderStatus = OrderStatus;
			result->OrderType = OrderType;
			result->VolumeTraded = VolumeTraded;
			result->VolumeTotal = VolumeTotal;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			ActiveTime ? strcpy_s(result->ActiveTime, netString2ConstChar(ActiveTime)) : false;
			SuspendTime ? strcpy_s(result->SuspendTime, netString2ConstChar(SuspendTime)) : false;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			ActiveTraderID ? strcpy_s(result->ActiveTraderID, netString2ConstChar(ActiveTraderID)) : false;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			result->UserForceClose = UserForceClose;
			ActiveUserID ? strcpy_s(result->ActiveUserID, netString2ConstChar(ActiveUserID)) : false;
			result->BrokerOrderSeq = BrokerOrderSeq;
			RelativeOrderSysID ? strcpy_s(result->RelativeOrderSysID, netString2ConstChar(RelativeOrderSysID)) : false;
			result->ZCETotalTradedVolume = ZCETotalTradedVolume;
			result->IsSwapOrder = IsSwapOrder;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报单
	/// </summary>
	public ref struct ExchangeOrderField
	{
		/// <summary>
		///报单价格条件
		/// </summary>
		char OrderPriceType;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///组合开平标志
		/// </summary>
		System::String^ CombOffsetFlag;
		/// <summary>
		///组合投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量
		/// </summary>
		int VolumeTotalOriginal;
		/// <summary>
		///有效期类型
		/// </summary>
		char TimeCondition;
		/// <summary>
		///GTD日期
		/// </summary>
		System::String^ GTDDate;
		/// <summary>
		///成交量类型
		/// </summary>
		char VolumeCondition;
		/// <summary>
		///最小成交量
		/// </summary>
		int MinVolume;
		/// <summary>
		///触发条件
		/// </summary>
		char ContingentCondition;
		/// <summary>
		///止损价
		/// </summary>
		double StopPrice;
		/// <summary>
		///强平原因
		/// </summary>
		char ForceCloseReason;
		/// <summary>
		///自动挂起标志
		/// </summary>
		int IsAutoSuspend;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报单提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///报单来源
		/// </summary>
		char OrderSource;
		/// <summary>
		///报单状态
		/// </summary>
		char OrderStatus;
		/// <summary>
		///报单类型
		/// </summary>
		char OrderType;
		/// <summary>
		///今成交数量
		/// </summary>
		int VolumeTraded;
		/// <summary>
		///剩余数量
		/// </summary>
		int VolumeTotal;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///委托时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///激活时间
		/// </summary>
		System::String^ ActiveTime;
		/// <summary>
		///挂起时间
		/// </summary>
		System::String^ SuspendTime;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///最后修改交易所交易员代码
		/// </summary>
		System::String^ ActiveTraderID;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeOrderField* source)
		{
			OrderPriceType = source->OrderPriceType;
			Direction = source->Direction;
			CombOffsetFlag = char2NetString(source->CombOffsetFlag);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			LimitPrice = source->LimitPrice;
			VolumeTotalOriginal = source->VolumeTotalOriginal;
			TimeCondition = source->TimeCondition;
			GTDDate = char2NetString(source->GTDDate);
			VolumeCondition = source->VolumeCondition;
			MinVolume = source->MinVolume;
			ContingentCondition = source->ContingentCondition;
			StopPrice = source->StopPrice;
			ForceCloseReason = source->ForceCloseReason;
			IsAutoSuspend = source->IsAutoSuspend;
			BusinessUnit = char2NetString(source->BusinessUnit);
			RequestID = source->RequestID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OrderSysID = char2NetString(source->OrderSysID);
			OrderSource = source->OrderSource;
			OrderStatus = source->OrderStatus;
			OrderType = source->OrderType;
			VolumeTraded = source->VolumeTraded;
			VolumeTotal = source->VolumeTotal;
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			ActiveTime = char2NetString(source->ActiveTime);
			SuspendTime = char2NetString(source->SuspendTime);
			UpdateTime = char2NetString(source->UpdateTime);
			CancelTime = char2NetString(source->CancelTime);
			ActiveTraderID = char2NetString(source->ActiveTraderID);
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			BranchID = char2NetString(source->BranchID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeOrderField(CThostFtdcExchangeOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeOrderField* getUnmanagedStructP()
		{
			CThostFtdcExchangeOrderField* result = new CThostFtdcExchangeOrderField();
			result->OrderPriceType = OrderPriceType;
			result->Direction = Direction;
			CombOffsetFlag ? strcpy_s(result->CombOffsetFlag, netString2ConstChar(CombOffsetFlag)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->LimitPrice = LimitPrice;
			result->VolumeTotalOriginal = VolumeTotalOriginal;
			result->TimeCondition = TimeCondition;
			GTDDate ? strcpy_s(result->GTDDate, netString2ConstChar(GTDDate)) : false;
			result->VolumeCondition = VolumeCondition;
			result->MinVolume = MinVolume;
			result->ContingentCondition = ContingentCondition;
			result->StopPrice = StopPrice;
			result->ForceCloseReason = ForceCloseReason;
			result->IsAutoSuspend = IsAutoSuspend;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->RequestID = RequestID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->OrderSource = OrderSource;
			result->OrderStatus = OrderStatus;
			result->OrderType = OrderType;
			result->VolumeTraded = VolumeTraded;
			result->VolumeTotal = VolumeTotal;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			ActiveTime ? strcpy_s(result->ActiveTime, netString2ConstChar(ActiveTime)) : false;
			SuspendTime ? strcpy_s(result->SuspendTime, netString2ConstChar(SuspendTime)) : false;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			ActiveTraderID ? strcpy_s(result->ActiveTraderID, netString2ConstChar(ActiveTraderID)) : false;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报单插入失败
	/// </summary>
	public ref struct ExchangeOrderInsertErrorField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeOrderInsertErrorField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeOrderInsertErrorField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeOrderInsertErrorField(CThostFtdcExchangeOrderInsertErrorField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeOrderInsertErrorField* getUnmanagedStructP()
		{
			CThostFtdcExchangeOrderInsertErrorField* result = new CThostFtdcExchangeOrderInsertErrorField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///输入报单操作
	/// </summary>
	public ref struct InputOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报单操作引用
		/// </summary>
		int OrderActionRef;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量变化
		/// </summary>
		int VolumeChange;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OrderActionRef = source->OrderActionRef;
			OrderRef = char2NetString(source->OrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			ActionFlag = source->ActionFlag;
			LimitPrice = source->LimitPrice;
			VolumeChange = source->VolumeChange;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputOrderActionField(CThostFtdcInputOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcInputOrderActionField* result = new CThostFtdcInputOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OrderActionRef = OrderActionRef;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			result->LimitPrice = LimitPrice;
			result->VolumeChange = VolumeChange;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///报单操作
	/// </summary>
	public ref struct OrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报单操作引用
		/// </summary>
		int OrderActionRef;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量变化
		/// </summary>
		int VolumeChange;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		OrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OrderActionRef = source->OrderActionRef;
			OrderRef = char2NetString(source->OrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			ActionFlag = source->ActionFlag;
			LimitPrice = source->LimitPrice;
			VolumeChange = source->VolumeChange;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			StatusMsg = char2NetString(source->StatusMsg);
			reserve1 = char2NetString(source->reserve1);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OrderActionField(CThostFtdcOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcOrderActionField* result = new CThostFtdcOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OrderActionRef = OrderActionRef;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			result->LimitPrice = LimitPrice;
			result->VolumeChange = VolumeChange;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报单操作
	/// </summary>
	public ref struct ExchangeOrderActionField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量变化
		/// </summary>
		int VolumeChange;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeOrderActionField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			ActionFlag = source->ActionFlag;
			LimitPrice = source->LimitPrice;
			VolumeChange = source->VolumeChange;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			BranchID = char2NetString(source->BranchID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeOrderActionField(CThostFtdcExchangeOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcExchangeOrderActionField* result = new CThostFtdcExchangeOrderActionField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			result->LimitPrice = LimitPrice;
			result->VolumeChange = VolumeChange;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报单操作失败
	/// </summary>
	public ref struct ExchangeOrderActionErrorField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeOrderActionErrorField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeOrderActionErrorField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeOrderActionErrorField(CThostFtdcExchangeOrderActionErrorField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeOrderActionErrorField* getUnmanagedStructP()
		{
			CThostFtdcExchangeOrderActionErrorField* result = new CThostFtdcExchangeOrderActionErrorField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所成交
	/// </summary>
	public ref struct ExchangeTradeField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///成交编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///交易角色
		/// </summary>
		char TradingRole;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double Price;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///成交时期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///成交时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///成交类型
		/// </summary>
		char TradeType;
		/// <summary>
		///成交价来源
		/// </summary>
		char PriceSource;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///成交来源
		/// </summary>
		char TradeSource;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeTradeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeTradeField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			TradeID = char2NetString(source->TradeID);
			Direction = source->Direction;
			OrderSysID = char2NetString(source->OrderSysID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			TradingRole = source->TradingRole;
			reserve1 = char2NetString(source->reserve1);
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			Price = source->Price;
			Volume = source->Volume;
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			TradeType = source->TradeType;
			PriceSource = source->PriceSource;
			TraderID = char2NetString(source->TraderID);
			OrderLocalID = char2NetString(source->OrderLocalID);
			ClearingPartID = char2NetString(source->ClearingPartID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			SequenceNo = source->SequenceNo;
			TradeSource = source->TradeSource;
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeTradeField(CThostFtdcExchangeTradeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeTradeField* getUnmanagedStructP()
		{
			CThostFtdcExchangeTradeField* result = new CThostFtdcExchangeTradeField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			result->Direction = Direction;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			result->TradingRole = TradingRole;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->Price = Price;
			result->Volume = Volume;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			result->TradeType = TradeType;
			result->PriceSource = PriceSource;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->SequenceNo = SequenceNo;
			result->TradeSource = TradeSource;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///成交
	/// </summary>
	public ref struct TradeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///成交编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///交易角色
		/// </summary>
		char TradingRole;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double Price;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///成交时期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///成交时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///成交类型
		/// </summary>
		char TradeType;
		/// <summary>
		///成交价来源
		/// </summary>
		char PriceSource;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///经纪公司报单编号
		/// </summary>
		int BrokerOrderSeq;
		/// <summary>
		///成交来源
		/// </summary>
		char TradeSource;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OrderRef = char2NetString(source->OrderRef);
			UserID = char2NetString(source->UserID);
			ExchangeID = char2NetString(source->ExchangeID);
			TradeID = char2NetString(source->TradeID);
			Direction = source->Direction;
			OrderSysID = char2NetString(source->OrderSysID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			TradingRole = source->TradingRole;
			reserve2 = char2NetString(source->reserve2);
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			Price = source->Price;
			Volume = source->Volume;
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			TradeType = source->TradeType;
			PriceSource = source->PriceSource;
			TraderID = char2NetString(source->TraderID);
			OrderLocalID = char2NetString(source->OrderLocalID);
			ClearingPartID = char2NetString(source->ClearingPartID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			SequenceNo = source->SequenceNo;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			BrokerOrderSeq = source->BrokerOrderSeq;
			TradeSource = source->TradeSource;
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradeField(CThostFtdcTradeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradeField* getUnmanagedStructP()
		{
			CThostFtdcTradeField* result = new CThostFtdcTradeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			result->Direction = Direction;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			result->TradingRole = TradingRole;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->Price = Price;
			result->Volume = Volume;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			result->TradeType = TradeType;
			result->PriceSource = PriceSource;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->SequenceNo = SequenceNo;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->BrokerOrderSeq = BrokerOrderSeq;
			result->TradeSource = TradeSource;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///用户会话
	/// </summary>
	public ref struct UserSessionField
	{
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///登录日期
		/// </summary>
		System::String^ LoginDate;
		/// <summary>
		///登录时间
		/// </summary>
		System::String^ LoginTime;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///接口端产品信息
		/// </summary>
		System::String^ InterfaceProductInfo;
		/// <summary>
		///协议信息
		/// </summary>
		System::String^ ProtocolInfo;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///登录备注
		/// </summary>
		System::String^ LoginRemark;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		UserSessionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserSessionField* source)
		{
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			LoginDate = char2NetString(source->LoginDate);
			LoginTime = char2NetString(source->LoginTime);
			reserve1 = char2NetString(source->reserve1);
			UserProductInfo = char2NetString(source->UserProductInfo);
			InterfaceProductInfo = char2NetString(source->InterfaceProductInfo);
			ProtocolInfo = char2NetString(source->ProtocolInfo);
			MacAddress = char2NetString(source->MacAddress);
			LoginRemark = char2NetString(source->LoginRemark);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserSessionField(CThostFtdcUserSessionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserSessionField* getUnmanagedStructP()
		{
			CThostFtdcUserSessionField* result = new CThostFtdcUserSessionField();
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			LoginDate ? strcpy_s(result->LoginDate, netString2ConstChar(LoginDate)) : false;
			LoginTime ? strcpy_s(result->LoginTime, netString2ConstChar(LoginTime)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			InterfaceProductInfo ? strcpy_s(result->InterfaceProductInfo, netString2ConstChar(InterfaceProductInfo)) : false;
			ProtocolInfo ? strcpy_s(result->ProtocolInfo, netString2ConstChar(ProtocolInfo)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			LoginRemark ? strcpy_s(result->LoginRemark, netString2ConstChar(LoginRemark)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询最大报单数量
	/// </summary>
	public ref struct QryMaxOrderVolumeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///最大允许报单数量
		/// </summary>
		int MaxVolume;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMaxOrderVolumeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMaxOrderVolumeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			Direction = source->Direction;
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			MaxVolume = source->MaxVolume;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMaxOrderVolumeField(CThostFtdcQryMaxOrderVolumeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMaxOrderVolumeField* getUnmanagedStructP()
		{
			CThostFtdcQryMaxOrderVolumeField* result = new CThostFtdcQryMaxOrderVolumeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->Direction = Direction;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->MaxVolume = MaxVolume;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者结算结果确认信息
	/// </summary>
	public ref struct SettlementInfoConfirmField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///确认日期
		/// </summary>
		System::String^ ConfirmDate;
		/// <summary>
		///确认时间
		/// </summary>
		System::String^ ConfirmTime;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		SettlementInfoConfirmField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSettlementInfoConfirmField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ConfirmDate = char2NetString(source->ConfirmDate);
			ConfirmTime = char2NetString(source->ConfirmTime);
			SettlementID = source->SettlementID;
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SettlementInfoConfirmField(CThostFtdcSettlementInfoConfirmField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSettlementInfoConfirmField* getUnmanagedStructP()
		{
			CThostFtdcSettlementInfoConfirmField* result = new CThostFtdcSettlementInfoConfirmField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ConfirmDate ? strcpy_s(result->ConfirmDate, netString2ConstChar(ConfirmDate)) : false;
			ConfirmTime ? strcpy_s(result->ConfirmTime, netString2ConstChar(ConfirmTime)) : false;
			result->SettlementID = SettlementID;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///出入金同步
	/// </summary>
	public ref struct SyncDepositField
	{
		/// <summary>
		///出入金流水号
		/// </summary>
		System::String^ DepositSeqNo;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///入金金额
		/// </summary>
		double Deposit;
		/// <summary>
		///是否强制进行
		/// </summary>
		int IsForce;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///是否是个股期权内转
		/// </summary>
		int IsFromSopt;
		/// <summary>
		///资金密码
		/// </summary>
		System::String^ TradingPassword;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDepositField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDepositField* source)
		{
			DepositSeqNo = char2NetString(source->DepositSeqNo);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			Deposit = source->Deposit;
			IsForce = source->IsForce;
			CurrencyID = char2NetString(source->CurrencyID);
			IsFromSopt = source->IsFromSopt;
			TradingPassword = char2NetString(source->TradingPassword);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDepositField(CThostFtdcSyncDepositField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDepositField* getUnmanagedStructP()
		{
			CThostFtdcSyncDepositField* result = new CThostFtdcSyncDepositField();
			DepositSeqNo ? strcpy_s(result->DepositSeqNo, netString2ConstChar(DepositSeqNo)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->Deposit = Deposit;
			result->IsForce = IsForce;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->IsFromSopt = IsFromSopt;
			TradingPassword ? strcpy_s(result->TradingPassword, netString2ConstChar(TradingPassword)) : false;
			return result;
		}
	};

	/// <summary>
	///货币质押同步
	/// </summary>
	public ref struct SyncFundMortgageField
	{
		/// <summary>
		///货币质押流水号
		/// </summary>
		System::String^ MortgageSeqNo;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///源币种
		/// </summary>
		System::String^ FromCurrencyID;
		/// <summary>
		///质押金额
		/// </summary>
		double MortgageAmount;
		/// <summary>
		///目标币种
		/// </summary>
		System::String^ ToCurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncFundMortgageField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncFundMortgageField* source)
		{
			MortgageSeqNo = char2NetString(source->MortgageSeqNo);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			FromCurrencyID = char2NetString(source->FromCurrencyID);
			MortgageAmount = source->MortgageAmount;
			ToCurrencyID = char2NetString(source->ToCurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncFundMortgageField(CThostFtdcSyncFundMortgageField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncFundMortgageField* getUnmanagedStructP()
		{
			CThostFtdcSyncFundMortgageField* result = new CThostFtdcSyncFundMortgageField();
			MortgageSeqNo ? strcpy_s(result->MortgageSeqNo, netString2ConstChar(MortgageSeqNo)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			FromCurrencyID ? strcpy_s(result->FromCurrencyID, netString2ConstChar(FromCurrencyID)) : false;
			result->MortgageAmount = MortgageAmount;
			ToCurrencyID ? strcpy_s(result->ToCurrencyID, netString2ConstChar(ToCurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司同步
	/// </summary>
	public ref struct BrokerSyncField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerSyncField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerSyncField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerSyncField(CThostFtdcBrokerSyncField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerSyncField* getUnmanagedStructP()
		{
			CThostFtdcBrokerSyncField* result = new CThostFtdcBrokerSyncField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///正在同步中的投资者
	/// </summary>
	public ref struct SyncingInvestorField
	{
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者分组代码
		/// </summary>
		System::String^ InvestorGroupID;
		/// <summary>
		///投资者名称
		/// </summary>
		System::String^ InvestorName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdentifiedCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;
		/// <summary>
		///联系电话
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///通讯地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///开户日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///手机
		/// </summary>
		System::String^ Mobile;
		/// <summary>
		///手续费率模板代码
		/// </summary>
		System::String^ CommModelID;
		/// <summary>
		///保证金率模板代码
		/// </summary>
		System::String^ MarginModelID;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingInvestorField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingInvestorField* source)
		{
			InvestorID = char2NetString(source->InvestorID);
			BrokerID = char2NetString(source->BrokerID);
			InvestorGroupID = char2NetString(source->InvestorGroupID);
			InvestorName = char2NetString(source->InvestorName);
			IdentifiedCardType = source->IdentifiedCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			IsActive = source->IsActive;
			Telephone = char2NetString(source->Telephone);
			Address = char2NetString(source->Address);
			OpenDate = char2NetString(source->OpenDate);
			Mobile = char2NetString(source->Mobile);
			CommModelID = char2NetString(source->CommModelID);
			MarginModelID = char2NetString(source->MarginModelID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingInvestorField(CThostFtdcSyncingInvestorField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingInvestorField* getUnmanagedStructP()
		{
			CThostFtdcSyncingInvestorField* result = new CThostFtdcSyncingInvestorField();
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorGroupID ? strcpy_s(result->InvestorGroupID, netString2ConstChar(InvestorGroupID)) : false;
			InvestorName ? strcpy_s(result->InvestorName, netString2ConstChar(InvestorName)) : false;
			result->IdentifiedCardType = IdentifiedCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->IsActive = IsActive;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			Mobile ? strcpy_s(result->Mobile, netString2ConstChar(Mobile)) : false;
			CommModelID ? strcpy_s(result->CommModelID, netString2ConstChar(CommModelID)) : false;
			MarginModelID ? strcpy_s(result->MarginModelID, netString2ConstChar(MarginModelID)) : false;
			return result;
		}
	};

	/// <summary>
	///正在同步中的交易代码
	/// </summary>
	public ref struct SyncingTradingCodeField
	{
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;
		/// <summary>
		///交易编码类型
		/// </summary>
		char ClientIDType;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingTradingCodeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingTradingCodeField* source)
		{
			InvestorID = char2NetString(source->InvestorID);
			BrokerID = char2NetString(source->BrokerID);
			ExchangeID = char2NetString(source->ExchangeID);
			ClientID = char2NetString(source->ClientID);
			IsActive = source->IsActive;
			ClientIDType = source->ClientIDType;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingTradingCodeField(CThostFtdcSyncingTradingCodeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingTradingCodeField* getUnmanagedStructP()
		{
			CThostFtdcSyncingTradingCodeField* result = new CThostFtdcSyncingTradingCodeField();
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			result->IsActive = IsActive;
			result->ClientIDType = ClientIDType;
			return result;
		}
	};

	/// <summary>
	///正在同步中的投资者分组
	/// </summary>
	public ref struct SyncingInvestorGroupField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者分组代码
		/// </summary>
		System::String^ InvestorGroupID;
		/// <summary>
		///投资者分组名称
		/// </summary>
		System::String^ InvestorGroupName;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingInvestorGroupField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingInvestorGroupField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorGroupID = char2NetString(source->InvestorGroupID);
			InvestorGroupName = char2NetString(source->InvestorGroupName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingInvestorGroupField(CThostFtdcSyncingInvestorGroupField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingInvestorGroupField* getUnmanagedStructP()
		{
			CThostFtdcSyncingInvestorGroupField* result = new CThostFtdcSyncingInvestorGroupField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorGroupID ? strcpy_s(result->InvestorGroupID, netString2ConstChar(InvestorGroupID)) : false;
			InvestorGroupName ? strcpy_s(result->InvestorGroupName, netString2ConstChar(InvestorGroupName)) : false;
			return result;
		}
	};

	/// <summary>
	///正在同步中的交易账号
	/// </summary>
	public ref struct SyncingTradingAccountField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///上次质押金额
		/// </summary>
		double PreMortgage;
		/// <summary>
		///上次信用额度
		/// </summary>
		double PreCredit;
		/// <summary>
		///上次存款额
		/// </summary>
		double PreDeposit;
		/// <summary>
		///上次结算准备金
		/// </summary>
		double PreBalance;
		/// <summary>
		///上次占用的保证金
		/// </summary>
		double PreMargin;
		/// <summary>
		///利息基数
		/// </summary>
		double InterestBase;
		/// <summary>
		///利息收入
		/// </summary>
		double Interest;
		/// <summary>
		///入金金额
		/// </summary>
		double Deposit;
		/// <summary>
		///出金金额
		/// </summary>
		double Withdraw;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///当前保证金总额
		/// </summary>
		double CurrMargin;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///期货结算准备金
		/// </summary>
		double Balance;
		/// <summary>
		///可用资金
		/// </summary>
		double Available;
		/// <summary>
		///可取资金
		/// </summary>
		double WithdrawQuota;
		/// <summary>
		///基本准备金
		/// </summary>
		double Reserve;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///信用额度
		/// </summary>
		double Credit;
		/// <summary>
		///质押金额
		/// </summary>
		double Mortgage;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchangeMargin;
		/// <summary>
		///投资者交割保证金
		/// </summary>
		double DeliveryMargin;
		/// <summary>
		///交易所交割保证金
		/// </summary>
		double ExchangeDeliveryMargin;
		/// <summary>
		///保底期货结算准备金
		/// </summary>
		double ReserveBalance;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///上次货币质入金额
		/// </summary>
		double PreFundMortgageIn;
		/// <summary>
		///上次货币质出金额
		/// </summary>
		double PreFundMortgageOut;
		/// <summary>
		///货币质入金额
		/// </summary>
		double FundMortgageIn;
		/// <summary>
		///货币质出金额
		/// </summary>
		double FundMortgageOut;
		/// <summary>
		///货币质押余额
		/// </summary>
		double FundMortgageAvailable;
		/// <summary>
		///可质押货币金额
		/// </summary>
		double MortgageableFund;
		/// <summary>
		///特殊产品占用保证金
		/// </summary>
		double SpecProductMargin;
		/// <summary>
		///特殊产品冻结保证金
		/// </summary>
		double SpecProductFrozenMargin;
		/// <summary>
		///特殊产品手续费
		/// </summary>
		double SpecProductCommission;
		/// <summary>
		///特殊产品冻结手续费
		/// </summary>
		double SpecProductFrozenCommission;
		/// <summary>
		///特殊产品持仓盈亏
		/// </summary>
		double SpecProductPositionProfit;
		/// <summary>
		///特殊产品平仓盈亏
		/// </summary>
		double SpecProductCloseProfit;
		/// <summary>
		///根据持仓盈亏算法计算的特殊产品持仓盈亏
		/// </summary>
		double SpecProductPositionProfitByAlg;
		/// <summary>
		///特殊产品交易所保证金
		/// </summary>
		double SpecProductExchangeMargin;
		/// <summary>
		///延时换汇冻结金额
		/// </summary>
		double FrozenSwap;
		/// <summary>
		///剩余换汇额度
		/// </summary>
		double RemainSwap;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingTradingAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingTradingAccountField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			PreMortgage = source->PreMortgage;
			PreCredit = source->PreCredit;
			PreDeposit = source->PreDeposit;
			PreBalance = source->PreBalance;
			PreMargin = source->PreMargin;
			InterestBase = source->InterestBase;
			Interest = source->Interest;
			Deposit = source->Deposit;
			Withdraw = source->Withdraw;
			FrozenMargin = source->FrozenMargin;
			FrozenCash = source->FrozenCash;
			FrozenCommission = source->FrozenCommission;
			CurrMargin = source->CurrMargin;
			CashIn = source->CashIn;
			Commission = source->Commission;
			CloseProfit = source->CloseProfit;
			PositionProfit = source->PositionProfit;
			Balance = source->Balance;
			Available = source->Available;
			WithdrawQuota = source->WithdrawQuota;
			Reserve = source->Reserve;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			Credit = source->Credit;
			Mortgage = source->Mortgage;
			ExchangeMargin = source->ExchangeMargin;
			DeliveryMargin = source->DeliveryMargin;
			ExchangeDeliveryMargin = source->ExchangeDeliveryMargin;
			ReserveBalance = source->ReserveBalance;
			CurrencyID = char2NetString(source->CurrencyID);
			PreFundMortgageIn = source->PreFundMortgageIn;
			PreFundMortgageOut = source->PreFundMortgageOut;
			FundMortgageIn = source->FundMortgageIn;
			FundMortgageOut = source->FundMortgageOut;
			FundMortgageAvailable = source->FundMortgageAvailable;
			MortgageableFund = source->MortgageableFund;
			SpecProductMargin = source->SpecProductMargin;
			SpecProductFrozenMargin = source->SpecProductFrozenMargin;
			SpecProductCommission = source->SpecProductCommission;
			SpecProductFrozenCommission = source->SpecProductFrozenCommission;
			SpecProductPositionProfit = source->SpecProductPositionProfit;
			SpecProductCloseProfit = source->SpecProductCloseProfit;
			SpecProductPositionProfitByAlg = source->SpecProductPositionProfitByAlg;
			SpecProductExchangeMargin = source->SpecProductExchangeMargin;
			FrozenSwap = source->FrozenSwap;
			RemainSwap = source->RemainSwap;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingTradingAccountField(CThostFtdcSyncingTradingAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingTradingAccountField* getUnmanagedStructP()
		{
			CThostFtdcSyncingTradingAccountField* result = new CThostFtdcSyncingTradingAccountField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->PreMortgage = PreMortgage;
			result->PreCredit = PreCredit;
			result->PreDeposit = PreDeposit;
			result->PreBalance = PreBalance;
			result->PreMargin = PreMargin;
			result->InterestBase = InterestBase;
			result->Interest = Interest;
			result->Deposit = Deposit;
			result->Withdraw = Withdraw;
			result->FrozenMargin = FrozenMargin;
			result->FrozenCash = FrozenCash;
			result->FrozenCommission = FrozenCommission;
			result->CurrMargin = CurrMargin;
			result->CashIn = CashIn;
			result->Commission = Commission;
			result->CloseProfit = CloseProfit;
			result->PositionProfit = PositionProfit;
			result->Balance = Balance;
			result->Available = Available;
			result->WithdrawQuota = WithdrawQuota;
			result->Reserve = Reserve;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->Credit = Credit;
			result->Mortgage = Mortgage;
			result->ExchangeMargin = ExchangeMargin;
			result->DeliveryMargin = DeliveryMargin;
			result->ExchangeDeliveryMargin = ExchangeDeliveryMargin;
			result->ReserveBalance = ReserveBalance;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->PreFundMortgageIn = PreFundMortgageIn;
			result->PreFundMortgageOut = PreFundMortgageOut;
			result->FundMortgageIn = FundMortgageIn;
			result->FundMortgageOut = FundMortgageOut;
			result->FundMortgageAvailable = FundMortgageAvailable;
			result->MortgageableFund = MortgageableFund;
			result->SpecProductMargin = SpecProductMargin;
			result->SpecProductFrozenMargin = SpecProductFrozenMargin;
			result->SpecProductCommission = SpecProductCommission;
			result->SpecProductFrozenCommission = SpecProductFrozenCommission;
			result->SpecProductPositionProfit = SpecProductPositionProfit;
			result->SpecProductCloseProfit = SpecProductCloseProfit;
			result->SpecProductPositionProfitByAlg = SpecProductPositionProfitByAlg;
			result->SpecProductExchangeMargin = SpecProductExchangeMargin;
			result->FrozenSwap = FrozenSwap;
			result->RemainSwap = RemainSwap;
			return result;
		}
	};

	/// <summary>
	///正在同步中的投资者持仓
	/// </summary>
	public ref struct SyncingInvestorPositionField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///持仓多空方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///持仓日期
		/// </summary>
		char PositionDate;
		/// <summary>
		///上日持仓
		/// </summary>
		int YdPosition;
		/// <summary>
		///今日持仓
		/// </summary>
		int Position;
		/// <summary>
		///多头冻结
		/// </summary>
		int LongFrozen;
		/// <summary>
		///空头冻结
		/// </summary>
		int ShortFrozen;
		/// <summary>
		///开仓冻结金额
		/// </summary>
		double LongFrozenAmount;
		/// <summary>
		///开仓冻结金额
		/// </summary>
		double ShortFrozenAmount;
		/// <summary>
		///开仓量
		/// </summary>
		int OpenVolume;
		/// <summary>
		///平仓量
		/// </summary>
		int CloseVolume;
		/// <summary>
		///开仓金额
		/// </summary>
		double OpenAmount;
		/// <summary>
		///平仓金额
		/// </summary>
		double CloseAmount;
		/// <summary>
		///持仓成本
		/// </summary>
		double PositionCost;
		/// <summary>
		///上次占用的保证金
		/// </summary>
		double PreMargin;
		/// <summary>
		///占用的保证金
		/// </summary>
		double UseMargin;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///开仓成本
		/// </summary>
		double OpenCost;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchangeMargin;
		/// <summary>
		///组合成交形成的持仓
		/// </summary>
		int CombPosition;
		/// <summary>
		///组合多头冻结
		/// </summary>
		int CombLongFrozen;
		/// <summary>
		///组合空头冻结
		/// </summary>
		int CombShortFrozen;
		/// <summary>
		///逐日盯市平仓盈亏
		/// </summary>
		double CloseProfitByDate;
		/// <summary>
		///逐笔对冲平仓盈亏
		/// </summary>
		double CloseProfitByTrade;
		/// <summary>
		///今日持仓
		/// </summary>
		int TodayPosition;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///执行冻结
		/// </summary>
		int StrikeFrozen;
		/// <summary>
		///执行冻结金额
		/// </summary>
		double StrikeFrozenAmount;
		/// <summary>
		///放弃执行冻结
		/// </summary>
		int AbandonFrozen;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行冻结的昨仓
		/// </summary>
		int YdStrikeFrozen;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///大商所持仓成本差值，只有大商所使用
		/// </summary>
		double PositionCostOffset;
		/// <summary>
		///tas持仓手数
		/// </summary>
		int TasPosition;
		/// <summary>
		///tas持仓成本
		/// </summary>
		double TasPositionCost;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingInvestorPositionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingInvestorPositionField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			PosiDirection = source->PosiDirection;
			HedgeFlag = source->HedgeFlag;
			PositionDate = source->PositionDate;
			YdPosition = source->YdPosition;
			Position = source->Position;
			LongFrozen = source->LongFrozen;
			ShortFrozen = source->ShortFrozen;
			LongFrozenAmount = source->LongFrozenAmount;
			ShortFrozenAmount = source->ShortFrozenAmount;
			OpenVolume = source->OpenVolume;
			CloseVolume = source->CloseVolume;
			OpenAmount = source->OpenAmount;
			CloseAmount = source->CloseAmount;
			PositionCost = source->PositionCost;
			PreMargin = source->PreMargin;
			UseMargin = source->UseMargin;
			FrozenMargin = source->FrozenMargin;
			FrozenCash = source->FrozenCash;
			FrozenCommission = source->FrozenCommission;
			CashIn = source->CashIn;
			Commission = source->Commission;
			CloseProfit = source->CloseProfit;
			PositionProfit = source->PositionProfit;
			PreSettlementPrice = source->PreSettlementPrice;
			SettlementPrice = source->SettlementPrice;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OpenCost = source->OpenCost;
			ExchangeMargin = source->ExchangeMargin;
			CombPosition = source->CombPosition;
			CombLongFrozen = source->CombLongFrozen;
			CombShortFrozen = source->CombShortFrozen;
			CloseProfitByDate = source->CloseProfitByDate;
			CloseProfitByTrade = source->CloseProfitByTrade;
			TodayPosition = source->TodayPosition;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			StrikeFrozen = source->StrikeFrozen;
			StrikeFrozenAmount = source->StrikeFrozenAmount;
			AbandonFrozen = source->AbandonFrozen;
			ExchangeID = char2NetString(source->ExchangeID);
			YdStrikeFrozen = source->YdStrikeFrozen;
			InvestUnitID = char2NetString(source->InvestUnitID);
			PositionCostOffset = source->PositionCostOffset;
			TasPosition = source->TasPosition;
			TasPositionCost = source->TasPositionCost;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingInvestorPositionField(CThostFtdcSyncingInvestorPositionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingInvestorPositionField* getUnmanagedStructP()
		{
			CThostFtdcSyncingInvestorPositionField* result = new CThostFtdcSyncingInvestorPositionField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->PosiDirection = PosiDirection;
			result->HedgeFlag = HedgeFlag;
			result->PositionDate = PositionDate;
			result->YdPosition = YdPosition;
			result->Position = Position;
			result->LongFrozen = LongFrozen;
			result->ShortFrozen = ShortFrozen;
			result->LongFrozenAmount = LongFrozenAmount;
			result->ShortFrozenAmount = ShortFrozenAmount;
			result->OpenVolume = OpenVolume;
			result->CloseVolume = CloseVolume;
			result->OpenAmount = OpenAmount;
			result->CloseAmount = CloseAmount;
			result->PositionCost = PositionCost;
			result->PreMargin = PreMargin;
			result->UseMargin = UseMargin;
			result->FrozenMargin = FrozenMargin;
			result->FrozenCash = FrozenCash;
			result->FrozenCommission = FrozenCommission;
			result->CashIn = CashIn;
			result->Commission = Commission;
			result->CloseProfit = CloseProfit;
			result->PositionProfit = PositionProfit;
			result->PreSettlementPrice = PreSettlementPrice;
			result->SettlementPrice = SettlementPrice;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->OpenCost = OpenCost;
			result->ExchangeMargin = ExchangeMargin;
			result->CombPosition = CombPosition;
			result->CombLongFrozen = CombLongFrozen;
			result->CombShortFrozen = CombShortFrozen;
			result->CloseProfitByDate = CloseProfitByDate;
			result->CloseProfitByTrade = CloseProfitByTrade;
			result->TodayPosition = TodayPosition;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->StrikeFrozen = StrikeFrozen;
			result->StrikeFrozenAmount = StrikeFrozenAmount;
			result->AbandonFrozen = AbandonFrozen;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->YdStrikeFrozen = YdStrikeFrozen;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			result->PositionCostOffset = PositionCostOffset;
			result->TasPosition = TasPosition;
			result->TasPositionCost = TasPositionCost;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///正在同步中的合约保证金率
	/// </summary>
	public ref struct SyncingInstrumentMarginRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///是否相对交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingInstrumentMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingInstrumentMarginRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			IsRelative = source->IsRelative;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingInstrumentMarginRateField(CThostFtdcSyncingInstrumentMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingInstrumentMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncingInstrumentMarginRateField* result = new CThostFtdcSyncingInstrumentMarginRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->IsRelative = IsRelative;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///正在同步中的合约手续费率
	/// </summary>
	public ref struct SyncingInstrumentCommissionRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingInstrumentCommissionRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingInstrumentCommissionRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingInstrumentCommissionRateField(CThostFtdcSyncingInstrumentCommissionRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingInstrumentCommissionRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncingInstrumentCommissionRateField* result = new CThostFtdcSyncingInstrumentCommissionRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///正在同步中的合约交易权限
	/// </summary>
	public ref struct SyncingInstrumentTradingRightField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易权限
		/// </summary>
		char TradingRight;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncingInstrumentTradingRightField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncingInstrumentTradingRightField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			TradingRight = source->TradingRight;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncingInstrumentTradingRightField(CThostFtdcSyncingInstrumentTradingRightField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncingInstrumentTradingRightField* getUnmanagedStructP()
		{
			CThostFtdcSyncingInstrumentTradingRightField* result = new CThostFtdcSyncingInstrumentTradingRightField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->TradingRight = TradingRight;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询报单
	/// </summary>
	public ref struct QryOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ InsertTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ InsertTimeEnd;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			InsertTimeStart = char2NetString(source->InsertTimeStart);
			InsertTimeEnd = char2NetString(source->InsertTimeEnd);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOrderField(CThostFtdcQryOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryOrderField* result = new CThostFtdcQryOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			InsertTimeStart ? strcpy_s(result->InsertTimeStart, netString2ConstChar(InsertTimeStart)) : false;
			InsertTimeEnd ? strcpy_s(result->InsertTimeEnd, netString2ConstChar(InsertTimeEnd)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询成交
	/// </summary>
	public ref struct QryTradeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///成交编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ TradeTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ TradeTimeEnd;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTradeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTradeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			TradeID = char2NetString(source->TradeID);
			TradeTimeStart = char2NetString(source->TradeTimeStart);
			TradeTimeEnd = char2NetString(source->TradeTimeEnd);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTradeField(CThostFtdcQryTradeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTradeField* getUnmanagedStructP()
		{
			CThostFtdcQryTradeField* result = new CThostFtdcQryTradeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			TradeTimeStart ? strcpy_s(result->TradeTimeStart, netString2ConstChar(TradeTimeStart)) : false;
			TradeTimeEnd ? strcpy_s(result->TradeTimeEnd, netString2ConstChar(TradeTimeEnd)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询投资者持仓
	/// </summary>
	public ref struct QryInvestorPositionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestorPositionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestorPositionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestorPositionField(CThostFtdcQryInvestorPositionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestorPositionField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestorPositionField* result = new CThostFtdcQryInvestorPositionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询资金账户
	/// </summary>
	public ref struct QryTradingAccountField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///业务类型
		/// </summary>
		char BizType;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTradingAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTradingAccountField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			CurrencyID = char2NetString(source->CurrencyID);
			BizType = source->BizType;
			AccountID = char2NetString(source->AccountID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTradingAccountField(CThostFtdcQryTradingAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTradingAccountField* getUnmanagedStructP()
		{
			CThostFtdcQryTradingAccountField* result = new CThostFtdcQryTradingAccountField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->BizType = BizType;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询投资者
	/// </summary>
	public ref struct QryInvestorField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestorField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestorField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestorField(CThostFtdcQryInvestorField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestorField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestorField* result = new CThostFtdcQryInvestorField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易编码
	/// </summary>
	public ref struct QryTradingCodeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///交易编码类型
		/// </summary>
		char ClientIDType;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTradingCodeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTradingCodeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
			ClientID = char2NetString(source->ClientID);
			ClientIDType = source->ClientIDType;
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTradingCodeField(CThostFtdcQryTradingCodeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTradingCodeField* getUnmanagedStructP()
		{
			CThostFtdcQryTradingCodeField* result = new CThostFtdcQryTradingCodeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			result->ClientIDType = ClientIDType;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询投资者组
	/// </summary>
	public ref struct QryInvestorGroupField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestorGroupField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestorGroupField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestorGroupField(CThostFtdcQryInvestorGroupField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestorGroupField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestorGroupField* result = new CThostFtdcQryInvestorGroupField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询合约保证金率
	/// </summary>
	public ref struct QryInstrumentMarginRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInstrumentMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInstrumentMarginRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInstrumentMarginRateField(CThostFtdcQryInstrumentMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInstrumentMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcQryInstrumentMarginRateField* result = new CThostFtdcQryInstrumentMarginRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询手续费率
	/// </summary>
	public ref struct QryInstrumentCommissionRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInstrumentCommissionRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInstrumentCommissionRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInstrumentCommissionRateField(CThostFtdcQryInstrumentCommissionRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInstrumentCommissionRateField* getUnmanagedStructP()
		{
			CThostFtdcQryInstrumentCommissionRateField* result = new CThostFtdcQryInstrumentCommissionRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询合约交易权限
	/// </summary>
	public ref struct QryInstrumentTradingRightField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInstrumentTradingRightField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInstrumentTradingRightField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInstrumentTradingRightField(CThostFtdcQryInstrumentTradingRightField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInstrumentTradingRightField* getUnmanagedStructP()
		{
			CThostFtdcQryInstrumentTradingRightField* result = new CThostFtdcQryInstrumentTradingRightField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司
	/// </summary>
	public ref struct QryBrokerField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBrokerField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBrokerField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBrokerField(CThostFtdcQryBrokerField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBrokerField* getUnmanagedStructP()
		{
			CThostFtdcQryBrokerField* result = new CThostFtdcQryBrokerField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易员
	/// </summary>
	public ref struct QryTraderField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTraderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTraderField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			TraderID = char2NetString(source->TraderID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTraderField(CThostFtdcQryTraderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTraderField* getUnmanagedStructP()
		{
			CThostFtdcQryTraderField* result = new CThostFtdcQryTraderField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询管理用户功能权限
	/// </summary>
	public ref struct QrySuperUserFunctionField
	{
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySuperUserFunctionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySuperUserFunctionField* source)
		{
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySuperUserFunctionField(CThostFtdcQrySuperUserFunctionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySuperUserFunctionField* getUnmanagedStructP()
		{
			CThostFtdcQrySuperUserFunctionField* result = new CThostFtdcQrySuperUserFunctionField();
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询用户会话
	/// </summary>
	public ref struct QryUserSessionField
	{
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryUserSessionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryUserSessionField* source)
		{
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryUserSessionField(CThostFtdcQryUserSessionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryUserSessionField* getUnmanagedStructP()
		{
			CThostFtdcQryUserSessionField* result = new CThostFtdcQryUserSessionField();
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司会员代码
	/// </summary>
	public ref struct QryPartBrokerField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryPartBrokerField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryPartBrokerField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			BrokerID = char2NetString(source->BrokerID);
			ParticipantID = char2NetString(source->ParticipantID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryPartBrokerField(CThostFtdcQryPartBrokerField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryPartBrokerField* getUnmanagedStructP()
		{
			CThostFtdcQryPartBrokerField* result = new CThostFtdcQryPartBrokerField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询前置状态
	/// </summary>
	public ref struct QryFrontStatusField
	{
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryFrontStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryFrontStatusField* source)
		{
			FrontID = source->FrontID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryFrontStatusField(CThostFtdcQryFrontStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryFrontStatusField* getUnmanagedStructP()
		{
			CThostFtdcQryFrontStatusField* result = new CThostFtdcQryFrontStatusField();
			result->FrontID = FrontID;
			return result;
		}
	};

	/// <summary>
	///查询交易所报单
	/// </summary>
	public ref struct QryExchangeOrderField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeOrderField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeOrderField(CThostFtdcQryExchangeOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeOrderField* result = new CThostFtdcQryExchangeOrderField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询报单操作
	/// </summary>
	public ref struct QryOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOrderActionField(CThostFtdcQryOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryOrderActionField* result = new CThostFtdcQryOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易所报单操作
	/// </summary>
	public ref struct QryExchangeOrderActionField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeOrderActionField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeOrderActionField(CThostFtdcQryExchangeOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeOrderActionField* result = new CThostFtdcQryExchangeOrderActionField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询管理用户
	/// </summary>
	public ref struct QrySuperUserField
	{
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySuperUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySuperUserField* source)
		{
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySuperUserField(CThostFtdcQrySuperUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySuperUserField* getUnmanagedStructP()
		{
			CThostFtdcQrySuperUserField* result = new CThostFtdcQrySuperUserField();
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易所
	/// </summary>
	public ref struct QryExchangeField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeField(CThostFtdcQryExchangeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeField* result = new CThostFtdcQryExchangeField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询产品
	/// </summary>
	public ref struct QryProductField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///产品类型
		/// </summary>
		char ProductClass;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryProductField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryProductField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ProductClass = source->ProductClass;
			ExchangeID = char2NetString(source->ExchangeID);
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryProductField(CThostFtdcQryProductField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryProductField* getUnmanagedStructP()
		{
			CThostFtdcQryProductField* result = new CThostFtdcQryProductField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->ProductClass = ProductClass;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询合约
	/// </summary>
	public ref struct QryInstrumentField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInstrumentField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve2 = char2NetString(source->reserve2);
			reserve3 = char2NetString(source->reserve3);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInstrumentField(CThostFtdcQryInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcQryInstrumentField* result = new CThostFtdcQryInstrumentField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询行情
	/// </summary>
	public ref struct QryDepthMarketDataField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryDepthMarketDataField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryDepthMarketDataField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryDepthMarketDataField(CThostFtdcQryDepthMarketDataField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryDepthMarketDataField* getUnmanagedStructP()
		{
			CThostFtdcQryDepthMarketDataField* result = new CThostFtdcQryDepthMarketDataField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司用户
	/// </summary>
	public ref struct QryBrokerUserField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBrokerUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBrokerUserField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBrokerUserField(CThostFtdcQryBrokerUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBrokerUserField* getUnmanagedStructP()
		{
			CThostFtdcQryBrokerUserField* result = new CThostFtdcQryBrokerUserField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司用户权限
	/// </summary>
	public ref struct QryBrokerUserFunctionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBrokerUserFunctionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBrokerUserFunctionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBrokerUserFunctionField(CThostFtdcQryBrokerUserFunctionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBrokerUserFunctionField* getUnmanagedStructP()
		{
			CThostFtdcQryBrokerUserFunctionField* result = new CThostFtdcQryBrokerUserFunctionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易员报盘机
	/// </summary>
	public ref struct QryTraderOfferField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTraderOfferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTraderOfferField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			TraderID = char2NetString(source->TraderID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTraderOfferField(CThostFtdcQryTraderOfferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTraderOfferField* getUnmanagedStructP()
		{
			CThostFtdcQryTraderOfferField* result = new CThostFtdcQryTraderOfferField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询出入金流水
	/// </summary>
	public ref struct QrySyncDepositField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///出入金流水号
		/// </summary>
		System::String^ DepositSeqNo;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySyncDepositField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySyncDepositField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			DepositSeqNo = char2NetString(source->DepositSeqNo);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySyncDepositField(CThostFtdcQrySyncDepositField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySyncDepositField* getUnmanagedStructP()
		{
			CThostFtdcQrySyncDepositField* result = new CThostFtdcQrySyncDepositField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			DepositSeqNo ? strcpy_s(result->DepositSeqNo, netString2ConstChar(DepositSeqNo)) : false;
			return result;
		}
	};

	/// <summary>
	///查询投资者结算结果
	/// </summary>
	public ref struct QrySettlementInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySettlementInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySettlementInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			TradingDay = char2NetString(source->TradingDay);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySettlementInfoField(CThostFtdcQrySettlementInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySettlementInfoField* getUnmanagedStructP()
		{
			CThostFtdcQrySettlementInfoField* result = new CThostFtdcQrySettlementInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易所保证金率
	/// </summary>
	public ref struct QryExchangeMarginRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeMarginRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeMarginRateField(CThostFtdcQryExchangeMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeMarginRateField* result = new CThostFtdcQryExchangeMarginRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易所调整保证金率
	/// </summary>
	public ref struct QryExchangeMarginRateAdjustField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeMarginRateAdjustField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeMarginRateAdjustField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeMarginRateAdjustField(CThostFtdcQryExchangeMarginRateAdjustField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeMarginRateAdjustField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeMarginRateAdjustField* result = new CThostFtdcQryExchangeMarginRateAdjustField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询汇率
	/// </summary>
	public ref struct QryExchangeRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///源币种
		/// </summary>
		System::String^ FromCurrencyID;
		/// <summary>
		///目标币种
		/// </summary>
		System::String^ ToCurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			FromCurrencyID = char2NetString(source->FromCurrencyID);
			ToCurrencyID = char2NetString(source->ToCurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeRateField(CThostFtdcQryExchangeRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeRateField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeRateField* result = new CThostFtdcQryExchangeRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			FromCurrencyID ? strcpy_s(result->FromCurrencyID, netString2ConstChar(FromCurrencyID)) : false;
			ToCurrencyID ? strcpy_s(result->ToCurrencyID, netString2ConstChar(ToCurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询货币质押流水
	/// </summary>
	public ref struct QrySyncFundMortgageField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///货币质押流水号
		/// </summary>
		System::String^ MortgageSeqNo;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySyncFundMortgageField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySyncFundMortgageField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			MortgageSeqNo = char2NetString(source->MortgageSeqNo);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySyncFundMortgageField(CThostFtdcQrySyncFundMortgageField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySyncFundMortgageField* getUnmanagedStructP()
		{
			CThostFtdcQrySyncFundMortgageField* result = new CThostFtdcQrySyncFundMortgageField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			MortgageSeqNo ? strcpy_s(result->MortgageSeqNo, netString2ConstChar(MortgageSeqNo)) : false;
			return result;
		}
	};

	/// <summary>
	///查询报单
	/// </summary>
	public ref struct QryHisOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ InsertTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ InsertTimeEnd;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryHisOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryHisOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			InsertTimeStart = char2NetString(source->InsertTimeStart);
			InsertTimeEnd = char2NetString(source->InsertTimeEnd);
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryHisOrderField(CThostFtdcQryHisOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryHisOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryHisOrderField* result = new CThostFtdcQryHisOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			InsertTimeStart ? strcpy_s(result->InsertTimeStart, netString2ConstChar(InsertTimeStart)) : false;
			InsertTimeEnd ? strcpy_s(result->InsertTimeEnd, netString2ConstChar(InsertTimeEnd)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///当前期权合约最小保证金
	/// </summary>
	public ref struct OptionInstrMiniMarginField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///单位（手）期权合约最小保证金
		/// </summary>
		double MinMargin;
		/// <summary>
		///取值方式
		/// </summary>
		char ValueMethod;
		/// <summary>
		///是否跟随交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionInstrMiniMarginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionInstrMiniMarginField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			MinMargin = source->MinMargin;
			ValueMethod = source->ValueMethod;
			IsRelative = source->IsRelative;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionInstrMiniMarginField(CThostFtdcOptionInstrMiniMarginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionInstrMiniMarginField* getUnmanagedStructP()
		{
			CThostFtdcOptionInstrMiniMarginField* result = new CThostFtdcOptionInstrMiniMarginField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->MinMargin = MinMargin;
			result->ValueMethod = ValueMethod;
			result->IsRelative = IsRelative;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///当前期权合约保证金调整系数
	/// </summary>
	public ref struct OptionInstrMarginAdjustField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机空头保证金调整系数
		/// </summary>
		double SShortMarginRatioByMoney;
		/// <summary>
		///投机空头保证金调整系数
		/// </summary>
		double SShortMarginRatioByVolume;
		/// <summary>
		///保值空头保证金调整系数
		/// </summary>
		double HShortMarginRatioByMoney;
		/// <summary>
		///保值空头保证金调整系数
		/// </summary>
		double HShortMarginRatioByVolume;
		/// <summary>
		///套利空头保证金调整系数
		/// </summary>
		double AShortMarginRatioByMoney;
		/// <summary>
		///套利空头保证金调整系数
		/// </summary>
		double AShortMarginRatioByVolume;
		/// <summary>
		///是否跟随交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///做市商空头保证金调整系数
		/// </summary>
		double MShortMarginRatioByMoney;
		/// <summary>
		///做市商空头保证金调整系数
		/// </summary>
		double MShortMarginRatioByVolume;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionInstrMarginAdjustField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionInstrMarginAdjustField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			SShortMarginRatioByMoney = source->SShortMarginRatioByMoney;
			SShortMarginRatioByVolume = source->SShortMarginRatioByVolume;
			HShortMarginRatioByMoney = source->HShortMarginRatioByMoney;
			HShortMarginRatioByVolume = source->HShortMarginRatioByVolume;
			AShortMarginRatioByMoney = source->AShortMarginRatioByMoney;
			AShortMarginRatioByVolume = source->AShortMarginRatioByVolume;
			IsRelative = source->IsRelative;
			MShortMarginRatioByMoney = source->MShortMarginRatioByMoney;
			MShortMarginRatioByVolume = source->MShortMarginRatioByVolume;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionInstrMarginAdjustField(CThostFtdcOptionInstrMarginAdjustField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionInstrMarginAdjustField* getUnmanagedStructP()
		{
			CThostFtdcOptionInstrMarginAdjustField* result = new CThostFtdcOptionInstrMarginAdjustField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->SShortMarginRatioByMoney = SShortMarginRatioByMoney;
			result->SShortMarginRatioByVolume = SShortMarginRatioByVolume;
			result->HShortMarginRatioByMoney = HShortMarginRatioByMoney;
			result->HShortMarginRatioByVolume = HShortMarginRatioByVolume;
			result->AShortMarginRatioByMoney = AShortMarginRatioByMoney;
			result->AShortMarginRatioByVolume = AShortMarginRatioByVolume;
			result->IsRelative = IsRelative;
			result->MShortMarginRatioByMoney = MShortMarginRatioByMoney;
			result->MShortMarginRatioByVolume = MShortMarginRatioByVolume;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///当前期权合约手续费的详细内容
	/// </summary>
	public ref struct OptionInstrCommRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///执行手续费率
		/// </summary>
		double StrikeRatioByMoney;
		/// <summary>
		///执行手续费
		/// </summary>
		double StrikeRatioByVolume;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionInstrCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionInstrCommRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			StrikeRatioByMoney = source->StrikeRatioByMoney;
			StrikeRatioByVolume = source->StrikeRatioByVolume;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionInstrCommRateField(CThostFtdcOptionInstrCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionInstrCommRateField* getUnmanagedStructP()
		{
			CThostFtdcOptionInstrCommRateField* result = new CThostFtdcOptionInstrCommRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			result->StrikeRatioByMoney = StrikeRatioByMoney;
			result->StrikeRatioByVolume = StrikeRatioByVolume;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///期权交易成本
	/// </summary>
	public ref struct OptionInstrTradeCostField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///期权合约保证金不变部分
		/// </summary>
		double FixedMargin;
		/// <summary>
		///期权合约最小保证金
		/// </summary>
		double MiniMargin;
		/// <summary>
		///期权合约权利金
		/// </summary>
		double Royalty;
		/// <summary>
		///交易所期权合约保证金不变部分
		/// </summary>
		double ExchFixedMargin;
		/// <summary>
		///交易所期权合约最小保证金
		/// </summary>
		double ExchMiniMargin;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionInstrTradeCostField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionInstrTradeCostField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			FixedMargin = source->FixedMargin;
			MiniMargin = source->MiniMargin;
			Royalty = source->Royalty;
			ExchFixedMargin = source->ExchFixedMargin;
			ExchMiniMargin = source->ExchMiniMargin;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionInstrTradeCostField(CThostFtdcOptionInstrTradeCostField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionInstrTradeCostField* getUnmanagedStructP()
		{
			CThostFtdcOptionInstrTradeCostField* result = new CThostFtdcOptionInstrTradeCostField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			result->FixedMargin = FixedMargin;
			result->MiniMargin = MiniMargin;
			result->Royalty = Royalty;
			result->ExchFixedMargin = ExchFixedMargin;
			result->ExchMiniMargin = ExchMiniMargin;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///期权交易成本查询
	/// </summary>
	public ref struct QryOptionInstrTradeCostField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///期权合约报价
		/// </summary>
		double InputPrice;
		/// <summary>
		///标的价格,填0则用昨结算价
		/// </summary>
		double UnderlyingPrice;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOptionInstrTradeCostField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOptionInstrTradeCostField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			InputPrice = source->InputPrice;
			UnderlyingPrice = source->UnderlyingPrice;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOptionInstrTradeCostField(CThostFtdcQryOptionInstrTradeCostField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOptionInstrTradeCostField* getUnmanagedStructP()
		{
			CThostFtdcQryOptionInstrTradeCostField* result = new CThostFtdcQryOptionInstrTradeCostField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			result->InputPrice = InputPrice;
			result->UnderlyingPrice = UnderlyingPrice;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///期权手续费率查询
	/// </summary>
	public ref struct QryOptionInstrCommRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOptionInstrCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOptionInstrCommRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOptionInstrCommRateField(CThostFtdcQryOptionInstrCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOptionInstrCommRateField* getUnmanagedStructP()
		{
			CThostFtdcQryOptionInstrCommRateField* result = new CThostFtdcQryOptionInstrCommRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///股指现货指数
	/// </summary>
	public ref struct IndexPriceField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///指数现货收盘价
		/// </summary>
		double ClosePrice;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		IndexPriceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcIndexPriceField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			ClosePrice = source->ClosePrice;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		IndexPriceField(CThostFtdcIndexPriceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcIndexPriceField* getUnmanagedStructP()
		{
			CThostFtdcIndexPriceField* result = new CThostFtdcIndexPriceField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->ClosePrice = ClosePrice;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///输入的执行宣告
	/// </summary>
	public ref struct InputExecOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///执行宣告引用
		/// </summary>
		System::String^ ExecOrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///执行类型
		/// </summary>
		char ActionType;
		/// <summary>
		///保留头寸申请的持仓方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///期权行权后是否保留期货头寸的标记,该字段已废弃
		/// </summary>
		char ReservePositionFlag;
		/// <summary>
		///期权行权后生成的头寸是否自动平仓
		/// </summary>
		char CloseFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputExecOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExecOrderRef = char2NetString(source->ExecOrderRef);
			UserID = char2NetString(source->UserID);
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			ActionType = source->ActionType;
			PosiDirection = source->PosiDirection;
			ReservePositionFlag = source->ReservePositionFlag;
			CloseFlag = source->CloseFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputExecOrderField(CThostFtdcInputExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcInputExecOrderField* result = new CThostFtdcInputExecOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExecOrderRef ? strcpy_s(result->ExecOrderRef, netString2ConstChar(ExecOrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->ActionType = ActionType;
			result->PosiDirection = PosiDirection;
			result->ReservePositionFlag = ReservePositionFlag;
			result->CloseFlag = CloseFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///输入执行宣告操作
	/// </summary>
	public ref struct InputExecOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///执行宣告操作引用
		/// </summary>
		int ExecOrderActionRef;
		/// <summary>
		///执行宣告引用
		/// </summary>
		System::String^ ExecOrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行宣告操作编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputExecOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExecOrderActionRef = source->ExecOrderActionRef;
			ExecOrderRef = char2NetString(source->ExecOrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			ActionFlag = source->ActionFlag;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputExecOrderActionField(CThostFtdcInputExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcInputExecOrderActionField* result = new CThostFtdcInputExecOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->ExecOrderActionRef = ExecOrderActionRef;
			ExecOrderRef ? strcpy_s(result->ExecOrderRef, netString2ConstChar(ExecOrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///执行宣告
	/// </summary>
	public ref struct ExecOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///执行宣告引用
		/// </summary>
		System::String^ ExecOrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///执行类型
		/// </summary>
		char ActionType;
		/// <summary>
		///保留头寸申请的持仓方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///期权行权后是否保留期货头寸的标记,该字段已废弃
		/// </summary>
		char ReservePositionFlag;
		/// <summary>
		///期权行权后生成的头寸是否自动平仓
		/// </summary>
		char CloseFlag;
		/// <summary>
		///本地执行宣告编号
		/// </summary>
		System::String^ ExecOrderLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///执行宣告提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///执行宣告编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///执行结果
		/// </summary>
		char ExecResult;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///操作用户代码
		/// </summary>
		System::String^ ActiveUserID;
		/// <summary>
		///经纪公司报单编号
		/// </summary>
		int BrokerExecOrderSeq;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExecOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExecOrderRef = char2NetString(source->ExecOrderRef);
			UserID = char2NetString(source->UserID);
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			ActionType = source->ActionType;
			PosiDirection = source->PosiDirection;
			ReservePositionFlag = source->ReservePositionFlag;
			CloseFlag = source->CloseFlag;
			ExecOrderLocalID = char2NetString(source->ExecOrderLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			CancelTime = char2NetString(source->CancelTime);
			ExecResult = source->ExecResult;
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			UserProductInfo = char2NetString(source->UserProductInfo);
			StatusMsg = char2NetString(source->StatusMsg);
			ActiveUserID = char2NetString(source->ActiveUserID);
			BrokerExecOrderSeq = source->BrokerExecOrderSeq;
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExecOrderField(CThostFtdcExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcExecOrderField* result = new CThostFtdcExecOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExecOrderRef ? strcpy_s(result->ExecOrderRef, netString2ConstChar(ExecOrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->ActionType = ActionType;
			result->PosiDirection = PosiDirection;
			result->ReservePositionFlag = ReservePositionFlag;
			result->CloseFlag = CloseFlag;
			ExecOrderLocalID ? strcpy_s(result->ExecOrderLocalID, netString2ConstChar(ExecOrderLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			result->ExecResult = ExecResult;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			ActiveUserID ? strcpy_s(result->ActiveUserID, netString2ConstChar(ActiveUserID)) : false;
			result->BrokerExecOrderSeq = BrokerExecOrderSeq;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///执行宣告操作
	/// </summary>
	public ref struct ExecOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///执行宣告操作引用
		/// </summary>
		int ExecOrderActionRef;
		/// <summary>
		///执行宣告引用
		/// </summary>
		System::String^ ExecOrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行宣告操作编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地执行宣告编号
		/// </summary>
		System::String^ ExecOrderLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///执行类型
		/// </summary>
		char ActionType;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExecOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExecOrderActionRef = source->ExecOrderActionRef;
			ExecOrderRef = char2NetString(source->ExecOrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			ActionFlag = source->ActionFlag;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			ExecOrderLocalID = char2NetString(source->ExecOrderLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			ActionType = source->ActionType;
			StatusMsg = char2NetString(source->StatusMsg);
			reserve1 = char2NetString(source->reserve1);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExecOrderActionField(CThostFtdcExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcExecOrderActionField* result = new CThostFtdcExecOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->ExecOrderActionRef = ExecOrderActionRef;
			ExecOrderRef ? strcpy_s(result->ExecOrderRef, netString2ConstChar(ExecOrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			ExecOrderLocalID ? strcpy_s(result->ExecOrderLocalID, netString2ConstChar(ExecOrderLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->ActionType = ActionType;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///执行宣告查询
	/// </summary>
	public ref struct QryExecOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行宣告编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ InsertTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ InsertTimeEnd;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExecOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			InsertTimeStart = char2NetString(source->InsertTimeStart);
			InsertTimeEnd = char2NetString(source->InsertTimeEnd);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExecOrderField(CThostFtdcQryExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryExecOrderField* result = new CThostFtdcQryExecOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			InsertTimeStart ? strcpy_s(result->InsertTimeStart, netString2ConstChar(InsertTimeStart)) : false;
			InsertTimeEnd ? strcpy_s(result->InsertTimeEnd, netString2ConstChar(InsertTimeEnd)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所执行宣告信息
	/// </summary>
	public ref struct ExchangeExecOrderField
	{
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///执行类型
		/// </summary>
		char ActionType;
		/// <summary>
		///保留头寸申请的持仓方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///期权行权后是否保留期货头寸的标记,该字段已废弃
		/// </summary>
		char ReservePositionFlag;
		/// <summary>
		///期权行权后生成的头寸是否自动平仓
		/// </summary>
		char CloseFlag;
		/// <summary>
		///本地执行宣告编号
		/// </summary>
		System::String^ ExecOrderLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///执行宣告提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///执行宣告编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///执行结果
		/// </summary>
		char ExecResult;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeExecOrderField* source)
		{
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			ActionType = source->ActionType;
			PosiDirection = source->PosiDirection;
			ReservePositionFlag = source->ReservePositionFlag;
			CloseFlag = source->CloseFlag;
			ExecOrderLocalID = char2NetString(source->ExecOrderLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			CancelTime = char2NetString(source->CancelTime);
			ExecResult = source->ExecResult;
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			BranchID = char2NetString(source->BranchID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeExecOrderField(CThostFtdcExchangeExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcExchangeExecOrderField* result = new CThostFtdcExchangeExecOrderField();
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->ActionType = ActionType;
			result->PosiDirection = PosiDirection;
			result->ReservePositionFlag = ReservePositionFlag;
			result->CloseFlag = CloseFlag;
			ExecOrderLocalID ? strcpy_s(result->ExecOrderLocalID, netString2ConstChar(ExecOrderLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			result->ExecResult = ExecResult;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所执行宣告查询
	/// </summary>
	public ref struct QryExchangeExecOrderField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeExecOrderField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeExecOrderField(CThostFtdcQryExchangeExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeExecOrderField* result = new CThostFtdcQryExchangeExecOrderField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///执行宣告操作查询
	/// </summary>
	public ref struct QryExecOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExecOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExecOrderActionField(CThostFtdcQryExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryExecOrderActionField* result = new CThostFtdcQryExecOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所执行宣告操作
	/// </summary>
	public ref struct ExchangeExecOrderActionField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行宣告操作编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地执行宣告编号
		/// </summary>
		System::String^ ExecOrderLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///执行类型
		/// </summary>
		char ActionType;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeExecOrderActionField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			ActionFlag = source->ActionFlag;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			ExecOrderLocalID = char2NetString(source->ExecOrderLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			ActionType = source->ActionType;
			BranchID = char2NetString(source->BranchID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			reserve2 = char2NetString(source->reserve2);
			Volume = source->Volume;
			IPAddress = char2NetString(source->IPAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeExecOrderActionField(CThostFtdcExchangeExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcExchangeExecOrderActionField* result = new CThostFtdcExchangeExecOrderActionField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			ExecOrderLocalID ? strcpy_s(result->ExecOrderLocalID, netString2ConstChar(ExecOrderLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->ActionType = ActionType;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->Volume = Volume;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所执行宣告操作查询
	/// </summary>
	public ref struct QryExchangeExecOrderActionField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeExecOrderActionField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeExecOrderActionField(CThostFtdcQryExchangeExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeExecOrderActionField* result = new CThostFtdcQryExchangeExecOrderActionField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			return result;
		}
	};

	/// <summary>
	///错误执行宣告
	/// </summary>
	public ref struct ErrExecOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///执行宣告引用
		/// </summary>
		System::String^ ExecOrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///执行类型
		/// </summary>
		char ActionType;
		/// <summary>
		///保留头寸申请的持仓方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///期权行权后是否保留期货头寸的标记,该字段已废弃
		/// </summary>
		char ReservePositionFlag;
		/// <summary>
		///期权行权后生成的头寸是否自动平仓
		/// </summary>
		char CloseFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ErrExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcErrExecOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExecOrderRef = char2NetString(source->ExecOrderRef);
			UserID = char2NetString(source->UserID);
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			ActionType = source->ActionType;
			PosiDirection = source->PosiDirection;
			ReservePositionFlag = source->ReservePositionFlag;
			CloseFlag = source->CloseFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ErrExecOrderField(CThostFtdcErrExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcErrExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcErrExecOrderField* result = new CThostFtdcErrExecOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExecOrderRef ? strcpy_s(result->ExecOrderRef, netString2ConstChar(ExecOrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->ActionType = ActionType;
			result->PosiDirection = PosiDirection;
			result->ReservePositionFlag = ReservePositionFlag;
			result->CloseFlag = CloseFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询错误执行宣告
	/// </summary>
	public ref struct QryErrExecOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryErrExecOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryErrExecOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryErrExecOrderField(CThostFtdcQryErrExecOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryErrExecOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryErrExecOrderField* result = new CThostFtdcQryErrExecOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///错误执行宣告操作
	/// </summary>
	public ref struct ErrExecOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///执行宣告操作引用
		/// </summary>
		int ExecOrderActionRef;
		/// <summary>
		///执行宣告引用
		/// </summary>
		System::String^ ExecOrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行宣告操作编号
		/// </summary>
		System::String^ ExecOrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ErrExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcErrExecOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExecOrderActionRef = source->ExecOrderActionRef;
			ExecOrderRef = char2NetString(source->ExecOrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			ExecOrderSysID = char2NetString(source->ExecOrderSysID);
			ActionFlag = source->ActionFlag;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ErrExecOrderActionField(CThostFtdcErrExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcErrExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcErrExecOrderActionField* result = new CThostFtdcErrExecOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->ExecOrderActionRef = ExecOrderActionRef;
			ExecOrderRef ? strcpy_s(result->ExecOrderRef, netString2ConstChar(ExecOrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExecOrderSysID ? strcpy_s(result->ExecOrderSysID, netString2ConstChar(ExecOrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询错误执行宣告操作
	/// </summary>
	public ref struct QryErrExecOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryErrExecOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryErrExecOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryErrExecOrderActionField(CThostFtdcQryErrExecOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryErrExecOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryErrExecOrderActionField* result = new CThostFtdcQryErrExecOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者期权合约交易权限
	/// </summary>
	public ref struct OptionInstrTradingRightField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///交易权限
		/// </summary>
		char TradingRight;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionInstrTradingRightField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionInstrTradingRightField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			Direction = source->Direction;
			TradingRight = source->TradingRight;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionInstrTradingRightField(CThostFtdcOptionInstrTradingRightField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionInstrTradingRightField* getUnmanagedStructP()
		{
			CThostFtdcOptionInstrTradingRightField* result = new CThostFtdcOptionInstrTradingRightField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->Direction = Direction;
			result->TradingRight = TradingRight;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询期权合约交易权限
	/// </summary>
	public ref struct QryOptionInstrTradingRightField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOptionInstrTradingRightField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOptionInstrTradingRightField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			Direction = source->Direction;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOptionInstrTradingRightField(CThostFtdcQryOptionInstrTradingRightField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOptionInstrTradingRightField* getUnmanagedStructP()
		{
			CThostFtdcQryOptionInstrTradingRightField* result = new CThostFtdcQryOptionInstrTradingRightField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->Direction = Direction;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///输入的询价
	/// </summary>
	public ref struct InputForQuoteField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///询价引用
		/// </summary>
		System::String^ ForQuoteRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputForQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputForQuoteField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ForQuoteRef = char2NetString(source->ForQuoteRef);
			UserID = char2NetString(source->UserID);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputForQuoteField(CThostFtdcInputForQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputForQuoteField* getUnmanagedStructP()
		{
			CThostFtdcInputForQuoteField* result = new CThostFtdcInputForQuoteField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ForQuoteRef ? strcpy_s(result->ForQuoteRef, netString2ConstChar(ForQuoteRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///询价
	/// </summary>
	public ref struct ForQuoteField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///询价引用
		/// </summary>
		System::String^ ForQuoteRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///本地询价编号
		/// </summary>
		System::String^ ForQuoteLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///询价状态
		/// </summary>
		char ForQuoteStatus;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///操作用户代码
		/// </summary>
		System::String^ ActiveUserID;
		/// <summary>
		///经纪公司询价编号
		/// </summary>
		int BrokerForQutoSeq;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ForQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcForQuoteField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ForQuoteRef = char2NetString(source->ForQuoteRef);
			UserID = char2NetString(source->UserID);
			ForQuoteLocalID = char2NetString(source->ForQuoteLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			ForQuoteStatus = source->ForQuoteStatus;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			StatusMsg = char2NetString(source->StatusMsg);
			ActiveUserID = char2NetString(source->ActiveUserID);
			BrokerForQutoSeq = source->BrokerForQutoSeq;
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ForQuoteField(CThostFtdcForQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcForQuoteField* getUnmanagedStructP()
		{
			CThostFtdcForQuoteField* result = new CThostFtdcForQuoteField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ForQuoteRef ? strcpy_s(result->ForQuoteRef, netString2ConstChar(ForQuoteRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			ForQuoteLocalID ? strcpy_s(result->ForQuoteLocalID, netString2ConstChar(ForQuoteLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			result->ForQuoteStatus = ForQuoteStatus;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			ActiveUserID ? strcpy_s(result->ActiveUserID, netString2ConstChar(ActiveUserID)) : false;
			result->BrokerForQutoSeq = BrokerForQutoSeq;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///询价查询
	/// </summary>
	public ref struct QryForQuoteField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ InsertTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ InsertTimeEnd;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryForQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryForQuoteField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InsertTimeStart = char2NetString(source->InsertTimeStart);
			InsertTimeEnd = char2NetString(source->InsertTimeEnd);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryForQuoteField(CThostFtdcQryForQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryForQuoteField* getUnmanagedStructP()
		{
			CThostFtdcQryForQuoteField* result = new CThostFtdcQryForQuoteField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InsertTimeStart ? strcpy_s(result->InsertTimeStart, netString2ConstChar(InsertTimeStart)) : false;
			InsertTimeEnd ? strcpy_s(result->InsertTimeEnd, netString2ConstChar(InsertTimeEnd)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所询价信息
	/// </summary>
	public ref struct ExchangeForQuoteField
	{
		/// <summary>
		///本地询价编号
		/// </summary>
		System::String^ ForQuoteLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///询价状态
		/// </summary>
		char ForQuoteStatus;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeForQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeForQuoteField* source)
		{
			ForQuoteLocalID = char2NetString(source->ForQuoteLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			ForQuoteStatus = source->ForQuoteStatus;
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeForQuoteField(CThostFtdcExchangeForQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeForQuoteField* getUnmanagedStructP()
		{
			CThostFtdcExchangeForQuoteField* result = new CThostFtdcExchangeForQuoteField();
			ForQuoteLocalID ? strcpy_s(result->ForQuoteLocalID, netString2ConstChar(ForQuoteLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			result->ForQuoteStatus = ForQuoteStatus;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所询价查询
	/// </summary>
	public ref struct QryExchangeForQuoteField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeForQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeForQuoteField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeForQuoteField(CThostFtdcQryExchangeForQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeForQuoteField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeForQuoteField* result = new CThostFtdcQryExchangeForQuoteField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///输入的报价
	/// </summary>
	public ref struct InputQuoteField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报价引用
		/// </summary>
		System::String^ QuoteRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///卖价格
		/// </summary>
		double AskPrice;
		/// <summary>
		///买价格
		/// </summary>
		double BidPrice;
		/// <summary>
		///卖数量
		/// </summary>
		int AskVolume;
		/// <summary>
		///买数量
		/// </summary>
		int BidVolume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///卖开平标志
		/// </summary>
		char AskOffsetFlag;
		/// <summary>
		///买开平标志
		/// </summary>
		char BidOffsetFlag;
		/// <summary>
		///卖投机套保标志
		/// </summary>
		char AskHedgeFlag;
		/// <summary>
		///买投机套保标志
		/// </summary>
		char BidHedgeFlag;
		/// <summary>
		///衍生卖报单引用
		/// </summary>
		System::String^ AskOrderRef;
		/// <summary>
		///衍生买报单引用
		/// </summary>
		System::String^ BidOrderRef;
		/// <summary>
		///应价编号
		/// </summary>
		System::String^ ForQuoteSysID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;
		/// <summary>
		///被顶单编号
		/// </summary>
		System::String^ ReplaceSysID;

		/// <summary>
		/// 默认构造函数	</summary>
		InputQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputQuoteField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			QuoteRef = char2NetString(source->QuoteRef);
			UserID = char2NetString(source->UserID);
			AskPrice = source->AskPrice;
			BidPrice = source->BidPrice;
			AskVolume = source->AskVolume;
			BidVolume = source->BidVolume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			AskOffsetFlag = source->AskOffsetFlag;
			BidOffsetFlag = source->BidOffsetFlag;
			AskHedgeFlag = source->AskHedgeFlag;
			BidHedgeFlag = source->BidHedgeFlag;
			AskOrderRef = char2NetString(source->AskOrderRef);
			BidOrderRef = char2NetString(source->BidOrderRef);
			ForQuoteSysID = char2NetString(source->ForQuoteSysID);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
			ReplaceSysID = char2NetString(source->ReplaceSysID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputQuoteField(CThostFtdcInputQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputQuoteField* getUnmanagedStructP()
		{
			CThostFtdcInputQuoteField* result = new CThostFtdcInputQuoteField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			QuoteRef ? strcpy_s(result->QuoteRef, netString2ConstChar(QuoteRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->AskPrice = AskPrice;
			result->BidPrice = BidPrice;
			result->AskVolume = AskVolume;
			result->BidVolume = BidVolume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->AskOffsetFlag = AskOffsetFlag;
			result->BidOffsetFlag = BidOffsetFlag;
			result->AskHedgeFlag = AskHedgeFlag;
			result->BidHedgeFlag = BidHedgeFlag;
			AskOrderRef ? strcpy_s(result->AskOrderRef, netString2ConstChar(AskOrderRef)) : false;
			BidOrderRef ? strcpy_s(result->BidOrderRef, netString2ConstChar(BidOrderRef)) : false;
			ForQuoteSysID ? strcpy_s(result->ForQuoteSysID, netString2ConstChar(ForQuoteSysID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			ReplaceSysID ? strcpy_s(result->ReplaceSysID, netString2ConstChar(ReplaceSysID)) : false;
			return result;
		}
	};

	/// <summary>
	///输入报价操作
	/// </summary>
	public ref struct InputQuoteActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报价操作引用
		/// </summary>
		int QuoteActionRef;
		/// <summary>
		///报价引用
		/// </summary>
		System::String^ QuoteRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报价操作编号
		/// </summary>
		System::String^ QuoteSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputQuoteActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputQuoteActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			QuoteActionRef = source->QuoteActionRef;
			QuoteRef = char2NetString(source->QuoteRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			QuoteSysID = char2NetString(source->QuoteSysID);
			ActionFlag = source->ActionFlag;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			InvestUnitID = char2NetString(source->InvestUnitID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputQuoteActionField(CThostFtdcInputQuoteActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputQuoteActionField* getUnmanagedStructP()
		{
			CThostFtdcInputQuoteActionField* result = new CThostFtdcInputQuoteActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->QuoteActionRef = QuoteActionRef;
			QuoteRef ? strcpy_s(result->QuoteRef, netString2ConstChar(QuoteRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			QuoteSysID ? strcpy_s(result->QuoteSysID, netString2ConstChar(QuoteSysID)) : false;
			result->ActionFlag = ActionFlag;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///报价
	/// </summary>
	public ref struct QuoteField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报价引用
		/// </summary>
		System::String^ QuoteRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///卖价格
		/// </summary>
		double AskPrice;
		/// <summary>
		///买价格
		/// </summary>
		double BidPrice;
		/// <summary>
		///卖数量
		/// </summary>
		int AskVolume;
		/// <summary>
		///买数量
		/// </summary>
		int BidVolume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///卖开平标志
		/// </summary>
		char AskOffsetFlag;
		/// <summary>
		///买开平标志
		/// </summary>
		char BidOffsetFlag;
		/// <summary>
		///卖投机套保标志
		/// </summary>
		char AskHedgeFlag;
		/// <summary>
		///买投机套保标志
		/// </summary>
		char BidHedgeFlag;
		/// <summary>
		///本地报价编号
		/// </summary>
		System::String^ QuoteLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报价提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///报价提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///报价编号
		/// </summary>
		System::String^ QuoteSysID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///报价状态
		/// </summary>
		char QuoteStatus;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///卖方报单编号
		/// </summary>
		System::String^ AskOrderSysID;
		/// <summary>
		///买方报单编号
		/// </summary>
		System::String^ BidOrderSysID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///操作用户代码
		/// </summary>
		System::String^ ActiveUserID;
		/// <summary>
		///经纪公司报价编号
		/// </summary>
		int BrokerQuoteSeq;
		/// <summary>
		///衍生卖报单引用
		/// </summary>
		System::String^ AskOrderRef;
		/// <summary>
		///衍生买报单引用
		/// </summary>
		System::String^ BidOrderRef;
		/// <summary>
		///应价编号
		/// </summary>
		System::String^ ForQuoteSysID;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;
		/// <summary>
		///被顶单编号
		/// </summary>
		System::String^ ReplaceSysID;

		/// <summary>
		/// 默认构造函数	</summary>
		QuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQuoteField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			QuoteRef = char2NetString(source->QuoteRef);
			UserID = char2NetString(source->UserID);
			AskPrice = source->AskPrice;
			BidPrice = source->BidPrice;
			AskVolume = source->AskVolume;
			BidVolume = source->BidVolume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			AskOffsetFlag = source->AskOffsetFlag;
			BidOffsetFlag = source->BidOffsetFlag;
			AskHedgeFlag = source->AskHedgeFlag;
			BidHedgeFlag = source->BidHedgeFlag;
			QuoteLocalID = char2NetString(source->QuoteLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			NotifySequence = source->NotifySequence;
			OrderSubmitStatus = source->OrderSubmitStatus;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			QuoteSysID = char2NetString(source->QuoteSysID);
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			CancelTime = char2NetString(source->CancelTime);
			QuoteStatus = source->QuoteStatus;
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			AskOrderSysID = char2NetString(source->AskOrderSysID);
			BidOrderSysID = char2NetString(source->BidOrderSysID);
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			UserProductInfo = char2NetString(source->UserProductInfo);
			StatusMsg = char2NetString(source->StatusMsg);
			ActiveUserID = char2NetString(source->ActiveUserID);
			BrokerQuoteSeq = source->BrokerQuoteSeq;
			AskOrderRef = char2NetString(source->AskOrderRef);
			BidOrderRef = char2NetString(source->BidOrderRef);
			ForQuoteSysID = char2NetString(source->ForQuoteSysID);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
			ReplaceSysID = char2NetString(source->ReplaceSysID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QuoteField(CThostFtdcQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQuoteField* getUnmanagedStructP()
		{
			CThostFtdcQuoteField* result = new CThostFtdcQuoteField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			QuoteRef ? strcpy_s(result->QuoteRef, netString2ConstChar(QuoteRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->AskPrice = AskPrice;
			result->BidPrice = BidPrice;
			result->AskVolume = AskVolume;
			result->BidVolume = BidVolume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->AskOffsetFlag = AskOffsetFlag;
			result->BidOffsetFlag = BidOffsetFlag;
			result->AskHedgeFlag = AskHedgeFlag;
			result->BidHedgeFlag = BidHedgeFlag;
			QuoteLocalID ? strcpy_s(result->QuoteLocalID, netString2ConstChar(QuoteLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->NotifySequence = NotifySequence;
			result->OrderSubmitStatus = OrderSubmitStatus;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			QuoteSysID ? strcpy_s(result->QuoteSysID, netString2ConstChar(QuoteSysID)) : false;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			result->QuoteStatus = QuoteStatus;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			AskOrderSysID ? strcpy_s(result->AskOrderSysID, netString2ConstChar(AskOrderSysID)) : false;
			BidOrderSysID ? strcpy_s(result->BidOrderSysID, netString2ConstChar(BidOrderSysID)) : false;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			ActiveUserID ? strcpy_s(result->ActiveUserID, netString2ConstChar(ActiveUserID)) : false;
			result->BrokerQuoteSeq = BrokerQuoteSeq;
			AskOrderRef ? strcpy_s(result->AskOrderRef, netString2ConstChar(AskOrderRef)) : false;
			BidOrderRef ? strcpy_s(result->BidOrderRef, netString2ConstChar(BidOrderRef)) : false;
			ForQuoteSysID ? strcpy_s(result->ForQuoteSysID, netString2ConstChar(ForQuoteSysID)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			ReplaceSysID ? strcpy_s(result->ReplaceSysID, netString2ConstChar(ReplaceSysID)) : false;
			return result;
		}
	};

	/// <summary>
	///报价操作
	/// </summary>
	public ref struct QuoteActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报价操作引用
		/// </summary>
		int QuoteActionRef;
		/// <summary>
		///报价引用
		/// </summary>
		System::String^ QuoteRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报价操作编号
		/// </summary>
		System::String^ QuoteSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报价编号
		/// </summary>
		System::String^ QuoteLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		QuoteActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQuoteActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			QuoteActionRef = source->QuoteActionRef;
			QuoteRef = char2NetString(source->QuoteRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			QuoteSysID = char2NetString(source->QuoteSysID);
			ActionFlag = source->ActionFlag;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			QuoteLocalID = char2NetString(source->QuoteLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			StatusMsg = char2NetString(source->StatusMsg);
			reserve1 = char2NetString(source->reserve1);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QuoteActionField(CThostFtdcQuoteActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQuoteActionField* getUnmanagedStructP()
		{
			CThostFtdcQuoteActionField* result = new CThostFtdcQuoteActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->QuoteActionRef = QuoteActionRef;
			QuoteRef ? strcpy_s(result->QuoteRef, netString2ConstChar(QuoteRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			QuoteSysID ? strcpy_s(result->QuoteSysID, netString2ConstChar(QuoteSysID)) : false;
			result->ActionFlag = ActionFlag;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			QuoteLocalID ? strcpy_s(result->QuoteLocalID, netString2ConstChar(QuoteLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///报价查询
	/// </summary>
	public ref struct QryQuoteField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报价编号
		/// </summary>
		System::String^ QuoteSysID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ InsertTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ InsertTimeEnd;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryQuoteField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			QuoteSysID = char2NetString(source->QuoteSysID);
			InsertTimeStart = char2NetString(source->InsertTimeStart);
			InsertTimeEnd = char2NetString(source->InsertTimeEnd);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryQuoteField(CThostFtdcQryQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryQuoteField* getUnmanagedStructP()
		{
			CThostFtdcQryQuoteField* result = new CThostFtdcQryQuoteField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			QuoteSysID ? strcpy_s(result->QuoteSysID, netString2ConstChar(QuoteSysID)) : false;
			InsertTimeStart ? strcpy_s(result->InsertTimeStart, netString2ConstChar(InsertTimeStart)) : false;
			InsertTimeEnd ? strcpy_s(result->InsertTimeEnd, netString2ConstChar(InsertTimeEnd)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报价信息
	/// </summary>
	public ref struct ExchangeQuoteField
	{
		/// <summary>
		///卖价格
		/// </summary>
		double AskPrice;
		/// <summary>
		///买价格
		/// </summary>
		double BidPrice;
		/// <summary>
		///卖数量
		/// </summary>
		int AskVolume;
		/// <summary>
		///买数量
		/// </summary>
		int BidVolume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///卖开平标志
		/// </summary>
		char AskOffsetFlag;
		/// <summary>
		///买开平标志
		/// </summary>
		char BidOffsetFlag;
		/// <summary>
		///卖投机套保标志
		/// </summary>
		char AskHedgeFlag;
		/// <summary>
		///买投机套保标志
		/// </summary>
		char BidHedgeFlag;
		/// <summary>
		///本地报价编号
		/// </summary>
		System::String^ QuoteLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报价提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///报价提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///报价编号
		/// </summary>
		System::String^ QuoteSysID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///报价状态
		/// </summary>
		char QuoteStatus;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///卖方报单编号
		/// </summary>
		System::String^ AskOrderSysID;
		/// <summary>
		///买方报单编号
		/// </summary>
		System::String^ BidOrderSysID;
		/// <summary>
		///应价编号
		/// </summary>
		System::String^ ForQuoteSysID;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeQuoteField* source)
		{
			AskPrice = source->AskPrice;
			BidPrice = source->BidPrice;
			AskVolume = source->AskVolume;
			BidVolume = source->BidVolume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			AskOffsetFlag = source->AskOffsetFlag;
			BidOffsetFlag = source->BidOffsetFlag;
			AskHedgeFlag = source->AskHedgeFlag;
			BidHedgeFlag = source->BidHedgeFlag;
			QuoteLocalID = char2NetString(source->QuoteLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			NotifySequence = source->NotifySequence;
			OrderSubmitStatus = source->OrderSubmitStatus;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			QuoteSysID = char2NetString(source->QuoteSysID);
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			CancelTime = char2NetString(source->CancelTime);
			QuoteStatus = source->QuoteStatus;
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			AskOrderSysID = char2NetString(source->AskOrderSysID);
			BidOrderSysID = char2NetString(source->BidOrderSysID);
			ForQuoteSysID = char2NetString(source->ForQuoteSysID);
			BranchID = char2NetString(source->BranchID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeQuoteField(CThostFtdcExchangeQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeQuoteField* getUnmanagedStructP()
		{
			CThostFtdcExchangeQuoteField* result = new CThostFtdcExchangeQuoteField();
			result->AskPrice = AskPrice;
			result->BidPrice = BidPrice;
			result->AskVolume = AskVolume;
			result->BidVolume = BidVolume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->AskOffsetFlag = AskOffsetFlag;
			result->BidOffsetFlag = BidOffsetFlag;
			result->AskHedgeFlag = AskHedgeFlag;
			result->BidHedgeFlag = BidHedgeFlag;
			QuoteLocalID ? strcpy_s(result->QuoteLocalID, netString2ConstChar(QuoteLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->NotifySequence = NotifySequence;
			result->OrderSubmitStatus = OrderSubmitStatus;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			QuoteSysID ? strcpy_s(result->QuoteSysID, netString2ConstChar(QuoteSysID)) : false;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			result->QuoteStatus = QuoteStatus;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			AskOrderSysID ? strcpy_s(result->AskOrderSysID, netString2ConstChar(AskOrderSysID)) : false;
			BidOrderSysID ? strcpy_s(result->BidOrderSysID, netString2ConstChar(BidOrderSysID)) : false;
			ForQuoteSysID ? strcpy_s(result->ForQuoteSysID, netString2ConstChar(ForQuoteSysID)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报价查询
	/// </summary>
	public ref struct QryExchangeQuoteField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeQuoteField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeQuoteField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeQuoteField(CThostFtdcQryExchangeQuoteField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeQuoteField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeQuoteField* result = new CThostFtdcQryExchangeQuoteField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///报价操作查询
	/// </summary>
	public ref struct QryQuoteActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryQuoteActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryQuoteActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryQuoteActionField(CThostFtdcQryQuoteActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryQuoteActionField* getUnmanagedStructP()
		{
			CThostFtdcQryQuoteActionField* result = new CThostFtdcQryQuoteActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报价操作
	/// </summary>
	public ref struct ExchangeQuoteActionField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报价操作编号
		/// </summary>
		System::String^ QuoteSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报价编号
		/// </summary>
		System::String^ QuoteLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeQuoteActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeQuoteActionField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			QuoteSysID = char2NetString(source->QuoteSysID);
			ActionFlag = source->ActionFlag;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			QuoteLocalID = char2NetString(source->QuoteLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeQuoteActionField(CThostFtdcExchangeQuoteActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeQuoteActionField* getUnmanagedStructP()
		{
			CThostFtdcExchangeQuoteActionField* result = new CThostFtdcExchangeQuoteActionField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			QuoteSysID ? strcpy_s(result->QuoteSysID, netString2ConstChar(QuoteSysID)) : false;
			result->ActionFlag = ActionFlag;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			QuoteLocalID ? strcpy_s(result->QuoteLocalID, netString2ConstChar(QuoteLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所报价操作查询
	/// </summary>
	public ref struct QryExchangeQuoteActionField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeQuoteActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeQuoteActionField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeQuoteActionField(CThostFtdcQryExchangeQuoteActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeQuoteActionField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeQuoteActionField* result = new CThostFtdcQryExchangeQuoteActionField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			return result;
		}
	};

	/// <summary>
	///期权合约delta值
	/// </summary>
	public ref struct OptionInstrDeltaField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///Delta值
		/// </summary>
		double Delta;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionInstrDeltaField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionInstrDeltaField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			Delta = source->Delta;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionInstrDeltaField(CThostFtdcOptionInstrDeltaField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionInstrDeltaField* getUnmanagedStructP()
		{
			CThostFtdcOptionInstrDeltaField* result = new CThostFtdcOptionInstrDeltaField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->Delta = Delta;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///发给做市商的询价请求
	/// </summary>
	public ref struct ForQuoteRspField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///询价编号
		/// </summary>
		System::String^ ForQuoteSysID;
		/// <summary>
		///询价时间
		/// </summary>
		System::String^ ForQuoteTime;
		/// <summary>
		///业务日期
		/// </summary>
		System::String^ ActionDay;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		ForQuoteRspField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcForQuoteRspField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			reserve1 = char2NetString(source->reserve1);
			ForQuoteSysID = char2NetString(source->ForQuoteSysID);
			ForQuoteTime = char2NetString(source->ForQuoteTime);
			ActionDay = char2NetString(source->ActionDay);
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ForQuoteRspField(CThostFtdcForQuoteRspField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcForQuoteRspField* getUnmanagedStructP()
		{
			CThostFtdcForQuoteRspField* result = new CThostFtdcForQuoteRspField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ForQuoteSysID ? strcpy_s(result->ForQuoteSysID, netString2ConstChar(ForQuoteSysID)) : false;
			ForQuoteTime ? strcpy_s(result->ForQuoteTime, netString2ConstChar(ForQuoteTime)) : false;
			ActionDay ? strcpy_s(result->ActionDay, netString2ConstChar(ActionDay)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///当前期权合约执行偏移值的详细内容
	/// </summary>
	public ref struct StrikeOffsetField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///执行偏移值
		/// </summary>
		double Offset;
		/// <summary>
		///执行偏移类型
		/// </summary>
		char OffsetType;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		StrikeOffsetField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcStrikeOffsetField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			Offset = source->Offset;
			OffsetType = source->OffsetType;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		StrikeOffsetField(CThostFtdcStrikeOffsetField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcStrikeOffsetField* getUnmanagedStructP()
		{
			CThostFtdcStrikeOffsetField* result = new CThostFtdcStrikeOffsetField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->Offset = Offset;
			result->OffsetType = OffsetType;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///期权执行偏移值查询
	/// </summary>
	public ref struct QryStrikeOffsetField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryStrikeOffsetField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryStrikeOffsetField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryStrikeOffsetField(CThostFtdcQryStrikeOffsetField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryStrikeOffsetField* getUnmanagedStructP()
		{
			CThostFtdcQryStrikeOffsetField* result = new CThostFtdcQryStrikeOffsetField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///输入批量报单操作
	/// </summary>
	public ref struct InputBatchOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报单操作引用
		/// </summary>
		int OrderActionRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputBatchOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputBatchOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OrderActionRef = source->OrderActionRef;
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			UserID = char2NetString(source->UserID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputBatchOrderActionField(CThostFtdcInputBatchOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputBatchOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcInputBatchOrderActionField* result = new CThostFtdcInputBatchOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OrderActionRef = OrderActionRef;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///批量报单操作
	/// </summary>
	public ref struct BatchOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报单操作引用
		/// </summary>
		int OrderActionRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		BatchOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBatchOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OrderActionRef = source->OrderActionRef;
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			StatusMsg = char2NetString(source->StatusMsg);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BatchOrderActionField(CThostFtdcBatchOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBatchOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcBatchOrderActionField* result = new CThostFtdcBatchOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OrderActionRef = OrderActionRef;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所批量报单操作
	/// </summary>
	public ref struct ExchangeBatchOrderActionField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeBatchOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeBatchOrderActionField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeBatchOrderActionField(CThostFtdcExchangeBatchOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeBatchOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcExchangeBatchOrderActionField* result = new CThostFtdcExchangeBatchOrderActionField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询批量报单操作
	/// </summary>
	public ref struct QryBatchOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBatchOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBatchOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBatchOrderActionField(CThostFtdcQryBatchOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBatchOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryBatchOrderActionField* result = new CThostFtdcQryBatchOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///组合合约安全系数
	/// </summary>
	public ref struct CombInstrumentGuardField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///
		/// </summary>
		double GuarantRatio;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		CombInstrumentGuardField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCombInstrumentGuardField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			GuarantRatio = source->GuarantRatio;
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CombInstrumentGuardField(CThostFtdcCombInstrumentGuardField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCombInstrumentGuardField* getUnmanagedStructP()
		{
			CThostFtdcCombInstrumentGuardField* result = new CThostFtdcCombInstrumentGuardField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->GuarantRatio = GuarantRatio;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///组合合约安全系数查询
	/// </summary>
	public ref struct QryCombInstrumentGuardField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCombInstrumentGuardField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCombInstrumentGuardField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCombInstrumentGuardField(CThostFtdcQryCombInstrumentGuardField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCombInstrumentGuardField* getUnmanagedStructP()
		{
			CThostFtdcQryCombInstrumentGuardField* result = new CThostFtdcQryCombInstrumentGuardField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///输入的申请组合
	/// </summary>
	public ref struct InputCombActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///组合引用
		/// </summary>
		System::String^ CombActionRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///组合指令方向
		/// </summary>
		char CombDirection;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputCombActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputCombActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			CombActionRef = char2NetString(source->CombActionRef);
			UserID = char2NetString(source->UserID);
			Direction = source->Direction;
			Volume = source->Volume;
			CombDirection = source->CombDirection;
			HedgeFlag = source->HedgeFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InvestUnitID = char2NetString(source->InvestUnitID);
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputCombActionField(CThostFtdcInputCombActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputCombActionField* getUnmanagedStructP()
		{
			CThostFtdcInputCombActionField* result = new CThostFtdcInputCombActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			CombActionRef ? strcpy_s(result->CombActionRef, netString2ConstChar(CombActionRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Direction = Direction;
			result->Volume = Volume;
			result->CombDirection = CombDirection;
			result->HedgeFlag = HedgeFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///申请组合
	/// </summary>
	public ref struct CombActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///组合引用
		/// </summary>
		System::String^ CombActionRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///组合指令方向
		/// </summary>
		char CombDirection;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///本地申请组合编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///组合状态
		/// </summary>
		char ActionStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///组合编号
		/// </summary>
		System::String^ ComTradeID;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		CombActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCombActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			CombActionRef = char2NetString(source->CombActionRef);
			UserID = char2NetString(source->UserID);
			Direction = source->Direction;
			Volume = source->Volume;
			CombDirection = source->CombDirection;
			HedgeFlag = source->HedgeFlag;
			ActionLocalID = char2NetString(source->ActionLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			ActionStatus = source->ActionStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			SequenceNo = source->SequenceNo;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			UserProductInfo = char2NetString(source->UserProductInfo);
			StatusMsg = char2NetString(source->StatusMsg);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			ComTradeID = char2NetString(source->ComTradeID);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CombActionField(CThostFtdcCombActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCombActionField* getUnmanagedStructP()
		{
			CThostFtdcCombActionField* result = new CThostFtdcCombActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			CombActionRef ? strcpy_s(result->CombActionRef, netString2ConstChar(CombActionRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Direction = Direction;
			result->Volume = Volume;
			result->CombDirection = CombDirection;
			result->HedgeFlag = HedgeFlag;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->ActionStatus = ActionStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->SequenceNo = SequenceNo;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ComTradeID ? strcpy_s(result->ComTradeID, netString2ConstChar(ComTradeID)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///申请组合查询
	/// </summary>
	public ref struct QryCombActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCombActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCombActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCombActionField(CThostFtdcQryCombActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCombActionField* getUnmanagedStructP()
		{
			CThostFtdcQryCombActionField* result = new CThostFtdcQryCombActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所申请组合信息
	/// </summary>
	public ref struct ExchangeCombActionField
	{
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///组合指令方向
		/// </summary>
		char CombDirection;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///本地申请组合编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///组合状态
		/// </summary>
		char ActionStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///组合编号
		/// </summary>
		System::String^ ComTradeID;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeCombActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeCombActionField* source)
		{
			Direction = source->Direction;
			Volume = source->Volume;
			CombDirection = source->CombDirection;
			HedgeFlag = source->HedgeFlag;
			ActionLocalID = char2NetString(source->ActionLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			ActionStatus = source->ActionStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			SequenceNo = source->SequenceNo;
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ComTradeID = char2NetString(source->ComTradeID);
			BranchID = char2NetString(source->BranchID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeCombActionField(CThostFtdcExchangeCombActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeCombActionField* getUnmanagedStructP()
		{
			CThostFtdcExchangeCombActionField* result = new CThostFtdcExchangeCombActionField();
			result->Direction = Direction;
			result->Volume = Volume;
			result->CombDirection = CombDirection;
			result->HedgeFlag = HedgeFlag;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->ActionStatus = ActionStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->SequenceNo = SequenceNo;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ComTradeID ? strcpy_s(result->ComTradeID, netString2ConstChar(ComTradeID)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所申请组合查询
	/// </summary>
	public ref struct QryExchangeCombActionField
	{
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeCombActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeCombActionField* source)
		{
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeCombActionField(CThostFtdcQryExchangeCombActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeCombActionField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeCombActionField* result = new CThostFtdcQryExchangeCombActionField();
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///产品报价汇率
	/// </summary>
	public ref struct ProductExchRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报价币种类型
		/// </summary>
		System::String^ QuoteCurrencyID;
		/// <summary>
		///汇率
		/// </summary>
		double ExchangeRate;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		ProductExchRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcProductExchRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			QuoteCurrencyID = char2NetString(source->QuoteCurrencyID);
			ExchangeRate = source->ExchangeRate;
			ExchangeID = char2NetString(source->ExchangeID);
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ProductExchRateField(CThostFtdcProductExchRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcProductExchRateField* getUnmanagedStructP()
		{
			CThostFtdcProductExchRateField* result = new CThostFtdcProductExchRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			QuoteCurrencyID ? strcpy_s(result->QuoteCurrencyID, netString2ConstChar(QuoteCurrencyID)) : false;
			result->ExchangeRate = ExchangeRate;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///产品报价汇率查询
	/// </summary>
	public ref struct QryProductExchRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryProductExchRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryProductExchRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryProductExchRateField(CThostFtdcQryProductExchRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryProductExchRateField* getUnmanagedStructP()
		{
			CThostFtdcQryProductExchRateField* result = new CThostFtdcQryProductExchRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询询价价差参数
	/// </summary>
	public ref struct QryForQuoteParamField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryForQuoteParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryForQuoteParamField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryForQuoteParamField(CThostFtdcQryForQuoteParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryForQuoteParamField* getUnmanagedStructP()
		{
			CThostFtdcQryForQuoteParamField* result = new CThostFtdcQryForQuoteParamField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///询价价差参数
	/// </summary>
	public ref struct ForQuoteParamField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///最新价
		/// </summary>
		double LastPrice;
		/// <summary>
		///价差
		/// </summary>
		double PriceInterval;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		ForQuoteParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcForQuoteParamField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			LastPrice = source->LastPrice;
			PriceInterval = source->PriceInterval;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ForQuoteParamField(CThostFtdcForQuoteParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcForQuoteParamField* getUnmanagedStructP()
		{
			CThostFtdcForQuoteParamField* result = new CThostFtdcForQuoteParamField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->LastPrice = LastPrice;
			result->PriceInterval = PriceInterval;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///当前做市商期权合约手续费的详细内容
	/// </summary>
	public ref struct MMOptionInstrCommRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///执行手续费率
		/// </summary>
		double StrikeRatioByMoney;
		/// <summary>
		///执行手续费
		/// </summary>
		double StrikeRatioByVolume;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		MMOptionInstrCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMMOptionInstrCommRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			StrikeRatioByMoney = source->StrikeRatioByMoney;
			StrikeRatioByVolume = source->StrikeRatioByVolume;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MMOptionInstrCommRateField(CThostFtdcMMOptionInstrCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMMOptionInstrCommRateField* getUnmanagedStructP()
		{
			CThostFtdcMMOptionInstrCommRateField* result = new CThostFtdcMMOptionInstrCommRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			result->StrikeRatioByMoney = StrikeRatioByMoney;
			result->StrikeRatioByVolume = StrikeRatioByVolume;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///做市商期权手续费率查询
	/// </summary>
	public ref struct QryMMOptionInstrCommRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMMOptionInstrCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMMOptionInstrCommRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMMOptionInstrCommRateField(CThostFtdcQryMMOptionInstrCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMMOptionInstrCommRateField* getUnmanagedStructP()
		{
			CThostFtdcQryMMOptionInstrCommRateField* result = new CThostFtdcQryMMOptionInstrCommRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///做市商合约手续费率
	/// </summary>
	public ref struct MMInstrumentCommissionRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		MMInstrumentCommissionRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMMInstrumentCommissionRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MMInstrumentCommissionRateField(CThostFtdcMMInstrumentCommissionRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMMInstrumentCommissionRateField* getUnmanagedStructP()
		{
			CThostFtdcMMInstrumentCommissionRateField* result = new CThostFtdcMMInstrumentCommissionRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询做市商合约手续费率
	/// </summary>
	public ref struct QryMMInstrumentCommissionRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMMInstrumentCommissionRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMMInstrumentCommissionRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMMInstrumentCommissionRateField(CThostFtdcQryMMInstrumentCommissionRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMMInstrumentCommissionRateField* getUnmanagedStructP()
		{
			CThostFtdcQryMMInstrumentCommissionRateField* result = new CThostFtdcQryMMInstrumentCommissionRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///当前报单手续费的详细内容
	/// </summary>
	public ref struct InstrumentOrderCommRateField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///报单手续费
		/// </summary>
		double OrderCommByVolume;
		/// <summary>
		///撤单手续费
		/// </summary>
		double OrderActionCommByVolume;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///报单手续费
		/// </summary>
		double OrderCommByTrade;
		/// <summary>
		///撤单手续费
		/// </summary>
		double OrderActionCommByTrade;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentOrderCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentOrderCommRateField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			OrderCommByVolume = source->OrderCommByVolume;
			OrderActionCommByVolume = source->OrderActionCommByVolume;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
			OrderCommByTrade = source->OrderCommByTrade;
			OrderActionCommByTrade = source->OrderActionCommByTrade;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentOrderCommRateField(CThostFtdcInstrumentOrderCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentOrderCommRateField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentOrderCommRateField* result = new CThostFtdcInstrumentOrderCommRateField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->OrderCommByVolume = OrderCommByVolume;
			result->OrderActionCommByVolume = OrderActionCommByVolume;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->OrderCommByTrade = OrderCommByTrade;
			result->OrderActionCommByTrade = OrderActionCommByTrade;
			return result;
		}
	};

	/// <summary>
	///报单手续费率查询
	/// </summary>
	public ref struct QryInstrumentOrderCommRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInstrumentOrderCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInstrumentOrderCommRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInstrumentOrderCommRateField(CThostFtdcQryInstrumentOrderCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInstrumentOrderCommRateField* getUnmanagedStructP()
		{
			CThostFtdcQryInstrumentOrderCommRateField* result = new CThostFtdcQryInstrumentOrderCommRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易参数
	/// </summary>
	public ref struct TradeParamField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///参数代码
		/// </summary>
		char TradeParamID;
		/// <summary>
		///参数代码值
		/// </summary>
		System::String^ TradeParamValue;
		/// <summary>
		///备注
		/// </summary>
		System::String^ Memo;

		/// <summary>
		/// 默认构造函数	</summary>
		TradeParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradeParamField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			TradeParamID = source->TradeParamID;
			TradeParamValue = char2NetString(source->TradeParamValue);
			Memo = char2NetString(source->Memo);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradeParamField(CThostFtdcTradeParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradeParamField* getUnmanagedStructP()
		{
			CThostFtdcTradeParamField* result = new CThostFtdcTradeParamField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			result->TradeParamID = TradeParamID;
			TradeParamValue ? strcpy_s(result->TradeParamValue, netString2ConstChar(TradeParamValue)) : false;
			Memo ? strcpy_s(result->Memo, netString2ConstChar(Memo)) : false;
			return result;
		}
	};

	/// <summary>
	///合约保证金率调整
	/// </summary>
	public ref struct InstrumentMarginRateULField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentMarginRateULField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentMarginRateULField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentMarginRateULField(CThostFtdcInstrumentMarginRateULField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentMarginRateULField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentMarginRateULField* result = new CThostFtdcInstrumentMarginRateULField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///期货持仓限制参数
	/// </summary>
	public ref struct FutureLimitPosiParamField
	{
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///当日投机开仓数量限制
		/// </summary>
		int SpecOpenVolume;
		/// <summary>
		///当日套利开仓数量限制
		/// </summary>
		int ArbiOpenVolume;
		/// <summary>
		///当日投机+套利开仓数量限制
		/// </summary>
		int OpenVolume;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		FutureLimitPosiParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcFutureLimitPosiParamField* source)
		{
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			SpecOpenVolume = source->SpecOpenVolume;
			ArbiOpenVolume = source->ArbiOpenVolume;
			OpenVolume = source->OpenVolume;
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		FutureLimitPosiParamField(CThostFtdcFutureLimitPosiParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcFutureLimitPosiParamField* getUnmanagedStructP()
		{
			CThostFtdcFutureLimitPosiParamField* result = new CThostFtdcFutureLimitPosiParamField();
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->SpecOpenVolume = SpecOpenVolume;
			result->ArbiOpenVolume = ArbiOpenVolume;
			result->OpenVolume = OpenVolume;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///禁止登录IP
	/// </summary>
	public ref struct LoginForbiddenIPField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		LoginForbiddenIPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcLoginForbiddenIPField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		LoginForbiddenIPField(CThostFtdcLoginForbiddenIPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcLoginForbiddenIPField* getUnmanagedStructP()
		{
			CThostFtdcLoginForbiddenIPField* result = new CThostFtdcLoginForbiddenIPField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///IP列表
	/// </summary>
	public ref struct IPListField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///是否白名单
		/// </summary>
		int IsWhite;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		IPListField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcIPListField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			IsWhite = source->IsWhite;
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		IPListField(CThostFtdcIPListField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcIPListField* getUnmanagedStructP()
		{
			CThostFtdcIPListField* result = new CThostFtdcIPListField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->IsWhite = IsWhite;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///输入的期权自对冲
	/// </summary>
	public ref struct InputOptionSelfCloseField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///期权自对冲引用
		/// </summary>
		System::String^ OptionSelfCloseRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///期权行权的头寸是否自对冲
		/// </summary>
		char OptSelfCloseFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputOptionSelfCloseField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputOptionSelfCloseField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OptionSelfCloseRef = char2NetString(source->OptionSelfCloseRef);
			UserID = char2NetString(source->UserID);
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			HedgeFlag = source->HedgeFlag;
			OptSelfCloseFlag = source->OptSelfCloseFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputOptionSelfCloseField(CThostFtdcInputOptionSelfCloseField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputOptionSelfCloseField* getUnmanagedStructP()
		{
			CThostFtdcInputOptionSelfCloseField* result = new CThostFtdcInputOptionSelfCloseField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OptionSelfCloseRef ? strcpy_s(result->OptionSelfCloseRef, netString2ConstChar(OptionSelfCloseRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->HedgeFlag = HedgeFlag;
			result->OptSelfCloseFlag = OptSelfCloseFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///输入期权自对冲操作
	/// </summary>
	public ref struct InputOptionSelfCloseActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///期权自对冲操作引用
		/// </summary>
		int OptionSelfCloseActionRef;
		/// <summary>
		///期权自对冲引用
		/// </summary>
		System::String^ OptionSelfCloseRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///期权自对冲操作编号
		/// </summary>
		System::String^ OptionSelfCloseSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		InputOptionSelfCloseActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInputOptionSelfCloseActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OptionSelfCloseActionRef = source->OptionSelfCloseActionRef;
			OptionSelfCloseRef = char2NetString(source->OptionSelfCloseRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			OptionSelfCloseSysID = char2NetString(source->OptionSelfCloseSysID);
			ActionFlag = source->ActionFlag;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InputOptionSelfCloseActionField(CThostFtdcInputOptionSelfCloseActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInputOptionSelfCloseActionField* getUnmanagedStructP()
		{
			CThostFtdcInputOptionSelfCloseActionField* result = new CThostFtdcInputOptionSelfCloseActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OptionSelfCloseActionRef = OptionSelfCloseActionRef;
			OptionSelfCloseRef ? strcpy_s(result->OptionSelfCloseRef, netString2ConstChar(OptionSelfCloseRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OptionSelfCloseSysID ? strcpy_s(result->OptionSelfCloseSysID, netString2ConstChar(OptionSelfCloseSysID)) : false;
			result->ActionFlag = ActionFlag;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///期权自对冲
	/// </summary>
	public ref struct OptionSelfCloseField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///期权自对冲引用
		/// </summary>
		System::String^ OptionSelfCloseRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///期权行权的头寸是否自对冲
		/// </summary>
		char OptSelfCloseFlag;
		/// <summary>
		///本地期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///期权自对冲提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseSysID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///自对冲结果
		/// </summary>
		char ExecResult;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///操作用户代码
		/// </summary>
		System::String^ ActiveUserID;
		/// <summary>
		///经纪公司报单编号
		/// </summary>
		int BrokerOptionSelfCloseSeq;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionSelfCloseField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionSelfCloseField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OptionSelfCloseRef = char2NetString(source->OptionSelfCloseRef);
			UserID = char2NetString(source->UserID);
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			HedgeFlag = source->HedgeFlag;
			OptSelfCloseFlag = source->OptSelfCloseFlag;
			OptionSelfCloseLocalID = char2NetString(source->OptionSelfCloseLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OptionSelfCloseSysID = char2NetString(source->OptionSelfCloseSysID);
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			CancelTime = char2NetString(source->CancelTime);
			ExecResult = source->ExecResult;
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			UserProductInfo = char2NetString(source->UserProductInfo);
			StatusMsg = char2NetString(source->StatusMsg);
			ActiveUserID = char2NetString(source->ActiveUserID);
			BrokerOptionSelfCloseSeq = source->BrokerOptionSelfCloseSeq;
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionSelfCloseField(CThostFtdcOptionSelfCloseField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionSelfCloseField* getUnmanagedStructP()
		{
			CThostFtdcOptionSelfCloseField* result = new CThostFtdcOptionSelfCloseField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OptionSelfCloseRef ? strcpy_s(result->OptionSelfCloseRef, netString2ConstChar(OptionSelfCloseRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->HedgeFlag = HedgeFlag;
			result->OptSelfCloseFlag = OptSelfCloseFlag;
			OptionSelfCloseLocalID ? strcpy_s(result->OptionSelfCloseLocalID, netString2ConstChar(OptionSelfCloseLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			OptionSelfCloseSysID ? strcpy_s(result->OptionSelfCloseSysID, netString2ConstChar(OptionSelfCloseSysID)) : false;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			result->ExecResult = ExecResult;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			ActiveUserID ? strcpy_s(result->ActiveUserID, netString2ConstChar(ActiveUserID)) : false;
			result->BrokerOptionSelfCloseSeq = BrokerOptionSelfCloseSeq;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///期权自对冲操作
	/// </summary>
	public ref struct OptionSelfCloseActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///期权自对冲操作引用
		/// </summary>
		int OptionSelfCloseActionRef;
		/// <summary>
		///期权自对冲引用
		/// </summary>
		System::String^ OptionSelfCloseRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///期权自对冲操作编号
		/// </summary>
		System::String^ OptionSelfCloseSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		OptionSelfCloseActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOptionSelfCloseActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OptionSelfCloseActionRef = source->OptionSelfCloseActionRef;
			OptionSelfCloseRef = char2NetString(source->OptionSelfCloseRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			OptionSelfCloseSysID = char2NetString(source->OptionSelfCloseSysID);
			ActionFlag = source->ActionFlag;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OptionSelfCloseLocalID = char2NetString(source->OptionSelfCloseLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			StatusMsg = char2NetString(source->StatusMsg);
			reserve1 = char2NetString(source->reserve1);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OptionSelfCloseActionField(CThostFtdcOptionSelfCloseActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOptionSelfCloseActionField* getUnmanagedStructP()
		{
			CThostFtdcOptionSelfCloseActionField* result = new CThostFtdcOptionSelfCloseActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OptionSelfCloseActionRef = OptionSelfCloseActionRef;
			OptionSelfCloseRef ? strcpy_s(result->OptionSelfCloseRef, netString2ConstChar(OptionSelfCloseRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OptionSelfCloseSysID ? strcpy_s(result->OptionSelfCloseSysID, netString2ConstChar(OptionSelfCloseSysID)) : false;
			result->ActionFlag = ActionFlag;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OptionSelfCloseLocalID ? strcpy_s(result->OptionSelfCloseLocalID, netString2ConstChar(OptionSelfCloseLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///期权自对冲查询
	/// </summary>
	public ref struct QryOptionSelfCloseField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseSysID;
		/// <summary>
		///开始时间
		/// </summary>
		System::String^ InsertTimeStart;
		/// <summary>
		///结束时间
		/// </summary>
		System::String^ InsertTimeEnd;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOptionSelfCloseField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOptionSelfCloseField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			OptionSelfCloseSysID = char2NetString(source->OptionSelfCloseSysID);
			InsertTimeStart = char2NetString(source->InsertTimeStart);
			InsertTimeEnd = char2NetString(source->InsertTimeEnd);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOptionSelfCloseField(CThostFtdcQryOptionSelfCloseField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOptionSelfCloseField* getUnmanagedStructP()
		{
			CThostFtdcQryOptionSelfCloseField* result = new CThostFtdcQryOptionSelfCloseField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OptionSelfCloseSysID ? strcpy_s(result->OptionSelfCloseSysID, netString2ConstChar(OptionSelfCloseSysID)) : false;
			InsertTimeStart ? strcpy_s(result->InsertTimeStart, netString2ConstChar(InsertTimeStart)) : false;
			InsertTimeEnd ? strcpy_s(result->InsertTimeEnd, netString2ConstChar(InsertTimeEnd)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所期权自对冲信息
	/// </summary>
	public ref struct ExchangeOptionSelfCloseField
	{
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///期权行权的头寸是否自对冲
		/// </summary>
		char OptSelfCloseFlag;
		/// <summary>
		///本地期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///期权自对冲提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseSysID;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///插入时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///自对冲结果
		/// </summary>
		char ExecResult;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeOptionSelfCloseField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeOptionSelfCloseField* source)
		{
			Volume = source->Volume;
			RequestID = source->RequestID;
			BusinessUnit = char2NetString(source->BusinessUnit);
			HedgeFlag = source->HedgeFlag;
			OptSelfCloseFlag = source->OptSelfCloseFlag;
			OptionSelfCloseLocalID = char2NetString(source->OptionSelfCloseLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve1 = char2NetString(source->reserve1);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OptionSelfCloseSysID = char2NetString(source->OptionSelfCloseSysID);
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			CancelTime = char2NetString(source->CancelTime);
			ExecResult = source->ExecResult;
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			BranchID = char2NetString(source->BranchID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeOptionSelfCloseField(CThostFtdcExchangeOptionSelfCloseField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeOptionSelfCloseField* getUnmanagedStructP()
		{
			CThostFtdcExchangeOptionSelfCloseField* result = new CThostFtdcExchangeOptionSelfCloseField();
			result->Volume = Volume;
			result->RequestID = RequestID;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->HedgeFlag = HedgeFlag;
			result->OptSelfCloseFlag = OptSelfCloseFlag;
			OptionSelfCloseLocalID ? strcpy_s(result->OptionSelfCloseLocalID, netString2ConstChar(OptionSelfCloseLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			OptionSelfCloseSysID ? strcpy_s(result->OptionSelfCloseSysID, netString2ConstChar(OptionSelfCloseSysID)) : false;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			result->ExecResult = ExecResult;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///期权自对冲操作查询
	/// </summary>
	public ref struct QryOptionSelfCloseActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryOptionSelfCloseActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryOptionSelfCloseActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryOptionSelfCloseActionField(CThostFtdcQryOptionSelfCloseActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryOptionSelfCloseActionField* getUnmanagedStructP()
		{
			CThostFtdcQryOptionSelfCloseActionField* result = new CThostFtdcQryOptionSelfCloseActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所期权自对冲操作
	/// </summary>
	public ref struct ExchangeOptionSelfCloseActionField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///期权自对冲操作编号
		/// </summary>
		System::String^ OptionSelfCloseSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地期权自对冲编号
		/// </summary>
		System::String^ OptionSelfCloseLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///期权行权的头寸是否自对冲
		/// </summary>
		char OptSelfCloseFlag;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeOptionSelfCloseActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeOptionSelfCloseActionField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			OptionSelfCloseSysID = char2NetString(source->OptionSelfCloseSysID);
			ActionFlag = source->ActionFlag;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OptionSelfCloseLocalID = char2NetString(source->OptionSelfCloseLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			BranchID = char2NetString(source->BranchID);
			reserve1 = char2NetString(source->reserve1);
			MacAddress = char2NetString(source->MacAddress);
			reserve2 = char2NetString(source->reserve2);
			OptSelfCloseFlag = source->OptSelfCloseFlag;
			IPAddress = char2NetString(source->IPAddress);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeOptionSelfCloseActionField(CThostFtdcExchangeOptionSelfCloseActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeOptionSelfCloseActionField* getUnmanagedStructP()
		{
			CThostFtdcExchangeOptionSelfCloseActionField* result = new CThostFtdcExchangeOptionSelfCloseActionField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OptionSelfCloseSysID ? strcpy_s(result->OptionSelfCloseSysID, netString2ConstChar(OptionSelfCloseSysID)) : false;
			result->ActionFlag = ActionFlag;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OptionSelfCloseLocalID ? strcpy_s(result->OptionSelfCloseLocalID, netString2ConstChar(OptionSelfCloseLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->OptSelfCloseFlag = OptSelfCloseFlag;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///延时换汇同步
	/// </summary>
	public ref struct SyncDelaySwapField
	{
		/// <summary>
		///换汇流水号
		/// </summary>
		System::String^ DelaySwapSeqNo;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///源币种
		/// </summary>
		System::String^ FromCurrencyID;
		/// <summary>
		///源金额
		/// </summary>
		double FromAmount;
		/// <summary>
		///源换汇冻结金额(可用冻结)
		/// </summary>
		double FromFrozenSwap;
		/// <summary>
		///源剩余换汇额度(可提冻结)
		/// </summary>
		double FromRemainSwap;
		/// <summary>
		///目标币种
		/// </summary>
		System::String^ ToCurrencyID;
		/// <summary>
		///目标金额
		/// </summary>
		double ToAmount;
		/// <summary>
		///是否手工换汇
		/// </summary>
		int IsManualSwap;
		/// <summary>
		///是否将所有外币的剩余换汇额度设置为0
		/// </summary>
		int IsAllRemainSetZero;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDelaySwapField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDelaySwapField* source)
		{
			DelaySwapSeqNo = char2NetString(source->DelaySwapSeqNo);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			FromCurrencyID = char2NetString(source->FromCurrencyID);
			FromAmount = source->FromAmount;
			FromFrozenSwap = source->FromFrozenSwap;
			FromRemainSwap = source->FromRemainSwap;
			ToCurrencyID = char2NetString(source->ToCurrencyID);
			ToAmount = source->ToAmount;
			IsManualSwap = source->IsManualSwap;
			IsAllRemainSetZero = source->IsAllRemainSetZero;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDelaySwapField(CThostFtdcSyncDelaySwapField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDelaySwapField* getUnmanagedStructP()
		{
			CThostFtdcSyncDelaySwapField* result = new CThostFtdcSyncDelaySwapField();
			DelaySwapSeqNo ? strcpy_s(result->DelaySwapSeqNo, netString2ConstChar(DelaySwapSeqNo)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			FromCurrencyID ? strcpy_s(result->FromCurrencyID, netString2ConstChar(FromCurrencyID)) : false;
			result->FromAmount = FromAmount;
			result->FromFrozenSwap = FromFrozenSwap;
			result->FromRemainSwap = FromRemainSwap;
			ToCurrencyID ? strcpy_s(result->ToCurrencyID, netString2ConstChar(ToCurrencyID)) : false;
			result->ToAmount = ToAmount;
			result->IsManualSwap = IsManualSwap;
			result->IsAllRemainSetZero = IsAllRemainSetZero;
			return result;
		}
	};

	/// <summary>
	///查询延时换汇同步
	/// </summary>
	public ref struct QrySyncDelaySwapField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///延时换汇流水号
		/// </summary>
		System::String^ DelaySwapSeqNo;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySyncDelaySwapField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySyncDelaySwapField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			DelaySwapSeqNo = char2NetString(source->DelaySwapSeqNo);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySyncDelaySwapField(CThostFtdcQrySyncDelaySwapField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySyncDelaySwapField* getUnmanagedStructP()
		{
			CThostFtdcQrySyncDelaySwapField* result = new CThostFtdcQrySyncDelaySwapField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			DelaySwapSeqNo ? strcpy_s(result->DelaySwapSeqNo, netString2ConstChar(DelaySwapSeqNo)) : false;
			return result;
		}
	};

	/// <summary>
	///投资单元
	/// </summary>
	public ref struct InvestUnitField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///投资者单元名称
		/// </summary>
		System::String^ InvestorUnitName;
		/// <summary>
		///投资者分组代码
		/// </summary>
		System::String^ InvestorGroupID;
		/// <summary>
		///手续费率模板代码
		/// </summary>
		System::String^ CommModelID;
		/// <summary>
		///保证金率模板代码
		/// </summary>
		System::String^ MarginModelID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestUnitField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestUnitField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InvestorUnitName = char2NetString(source->InvestorUnitName);
			InvestorGroupID = char2NetString(source->InvestorGroupID);
			CommModelID = char2NetString(source->CommModelID);
			MarginModelID = char2NetString(source->MarginModelID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestUnitField(CThostFtdcInvestUnitField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestUnitField* getUnmanagedStructP()
		{
			CThostFtdcInvestUnitField* result = new CThostFtdcInvestUnitField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InvestorUnitName ? strcpy_s(result->InvestorUnitName, netString2ConstChar(InvestorUnitName)) : false;
			InvestorGroupID ? strcpy_s(result->InvestorGroupID, netString2ConstChar(InvestorGroupID)) : false;
			CommModelID ? strcpy_s(result->CommModelID, netString2ConstChar(CommModelID)) : false;
			MarginModelID ? strcpy_s(result->MarginModelID, netString2ConstChar(MarginModelID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询投资单元
	/// </summary>
	public ref struct QryInvestUnitField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestUnitField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestUnitField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestUnitField(CThostFtdcQryInvestUnitField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestUnitField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestUnitField* result = new CThostFtdcQryInvestUnitField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///二级代理商资金校验模式
	/// </summary>
	public ref struct SecAgentCheckModeField
	{
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///币种
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///境外中介机构资金帐号
		/// </summary>
		System::String^ BrokerSecAgentID;
		/// <summary>
		///是否需要校验自己的资金账户
		/// </summary>
		int CheckSelfAccount;

		/// <summary>
		/// 默认构造函数	</summary>
		SecAgentCheckModeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSecAgentCheckModeField* source)
		{
			InvestorID = char2NetString(source->InvestorID);
			BrokerID = char2NetString(source->BrokerID);
			CurrencyID = char2NetString(source->CurrencyID);
			BrokerSecAgentID = char2NetString(source->BrokerSecAgentID);
			CheckSelfAccount = source->CheckSelfAccount;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SecAgentCheckModeField(CThostFtdcSecAgentCheckModeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSecAgentCheckModeField* getUnmanagedStructP()
		{
			CThostFtdcSecAgentCheckModeField* result = new CThostFtdcSecAgentCheckModeField();
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			BrokerSecAgentID ? strcpy_s(result->BrokerSecAgentID, netString2ConstChar(BrokerSecAgentID)) : false;
			result->CheckSelfAccount = CheckSelfAccount;
			return result;
		}
	};

	/// <summary>
	///二级代理商信息
	/// </summary>
	public ref struct SecAgentTradeInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///境外中介机构资金帐号
		/// </summary>
		System::String^ BrokerSecAgentID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///二级代理商姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		SecAgentTradeInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSecAgentTradeInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			BrokerSecAgentID = char2NetString(source->BrokerSecAgentID);
			InvestorID = char2NetString(source->InvestorID);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SecAgentTradeInfoField(CThostFtdcSecAgentTradeInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSecAgentTradeInfoField* getUnmanagedStructP()
		{
			CThostFtdcSecAgentTradeInfoField* result = new CThostFtdcSecAgentTradeInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerSecAgentID ? strcpy_s(result->BrokerSecAgentID, netString2ConstChar(BrokerSecAgentID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///市场行情
	/// </summary>
	public ref struct MarketDataField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///最新价
		/// </summary>
		double LastPrice;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///昨收盘
		/// </summary>
		double PreClosePrice;
		/// <summary>
		///昨持仓量
		/// </summary>
		double PreOpenInterest;
		/// <summary>
		///今开盘
		/// </summary>
		double OpenPrice;
		/// <summary>
		///最高价
		/// </summary>
		double HighestPrice;
		/// <summary>
		///最低价
		/// </summary>
		double LowestPrice;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///成交金额
		/// </summary>
		double Turnover;
		/// <summary>
		///持仓量
		/// </summary>
		double OpenInterest;
		/// <summary>
		///今收盘
		/// </summary>
		double ClosePrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///涨停板价
		/// </summary>
		double UpperLimitPrice;
		/// <summary>
		///跌停板价
		/// </summary>
		double LowerLimitPrice;
		/// <summary>
		///昨虚实度
		/// </summary>
		double PreDelta;
		/// <summary>
		///今虚实度
		/// </summary>
		double CurrDelta;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///最后修改毫秒
		/// </summary>
		int UpdateMillisec;
		/// <summary>
		///业务日期
		/// </summary>
		System::String^ ActionDay;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve2 = char2NetString(source->reserve2);
			LastPrice = source->LastPrice;
			PreSettlementPrice = source->PreSettlementPrice;
			PreClosePrice = source->PreClosePrice;
			PreOpenInterest = source->PreOpenInterest;
			OpenPrice = source->OpenPrice;
			HighestPrice = source->HighestPrice;
			LowestPrice = source->LowestPrice;
			Volume = source->Volume;
			Turnover = source->Turnover;
			OpenInterest = source->OpenInterest;
			ClosePrice = source->ClosePrice;
			SettlementPrice = source->SettlementPrice;
			UpperLimitPrice = source->UpperLimitPrice;
			LowerLimitPrice = source->LowerLimitPrice;
			PreDelta = source->PreDelta;
			CurrDelta = source->CurrDelta;
			UpdateTime = char2NetString(source->UpdateTime);
			UpdateMillisec = source->UpdateMillisec;
			ActionDay = char2NetString(source->ActionDay);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataField(CThostFtdcMarketDataField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataField* result = new CThostFtdcMarketDataField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->LastPrice = LastPrice;
			result->PreSettlementPrice = PreSettlementPrice;
			result->PreClosePrice = PreClosePrice;
			result->PreOpenInterest = PreOpenInterest;
			result->OpenPrice = OpenPrice;
			result->HighestPrice = HighestPrice;
			result->LowestPrice = LowestPrice;
			result->Volume = Volume;
			result->Turnover = Turnover;
			result->OpenInterest = OpenInterest;
			result->ClosePrice = ClosePrice;
			result->SettlementPrice = SettlementPrice;
			result->UpperLimitPrice = UpperLimitPrice;
			result->LowerLimitPrice = LowerLimitPrice;
			result->PreDelta = PreDelta;
			result->CurrDelta = CurrDelta;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			result->UpdateMillisec = UpdateMillisec;
			ActionDay ? strcpy_s(result->ActionDay, netString2ConstChar(ActionDay)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///行情基础属性
	/// </summary>
	public ref struct MarketDataBaseField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///昨收盘
		/// </summary>
		double PreClosePrice;
		/// <summary>
		///昨持仓量
		/// </summary>
		double PreOpenInterest;
		/// <summary>
		///昨虚实度
		/// </summary>
		double PreDelta;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataBaseField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataBaseField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			PreSettlementPrice = source->PreSettlementPrice;
			PreClosePrice = source->PreClosePrice;
			PreOpenInterest = source->PreOpenInterest;
			PreDelta = source->PreDelta;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataBaseField(CThostFtdcMarketDataBaseField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataBaseField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataBaseField* result = new CThostFtdcMarketDataBaseField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PreSettlementPrice = PreSettlementPrice;
			result->PreClosePrice = PreClosePrice;
			result->PreOpenInterest = PreOpenInterest;
			result->PreDelta = PreDelta;
			return result;
		}
	};

	/// <summary>
	///行情静态属性
	/// </summary>
	public ref struct MarketDataStaticField
	{
		/// <summary>
		///今开盘
		/// </summary>
		double OpenPrice;
		/// <summary>
		///最高价
		/// </summary>
		double HighestPrice;
		/// <summary>
		///最低价
		/// </summary>
		double LowestPrice;
		/// <summary>
		///今收盘
		/// </summary>
		double ClosePrice;
		/// <summary>
		///涨停板价
		/// </summary>
		double UpperLimitPrice;
		/// <summary>
		///跌停板价
		/// </summary>
		double LowerLimitPrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///今虚实度
		/// </summary>
		double CurrDelta;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataStaticField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataStaticField* source)
		{
			OpenPrice = source->OpenPrice;
			HighestPrice = source->HighestPrice;
			LowestPrice = source->LowestPrice;
			ClosePrice = source->ClosePrice;
			UpperLimitPrice = source->UpperLimitPrice;
			LowerLimitPrice = source->LowerLimitPrice;
			SettlementPrice = source->SettlementPrice;
			CurrDelta = source->CurrDelta;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataStaticField(CThostFtdcMarketDataStaticField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataStaticField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataStaticField* result = new CThostFtdcMarketDataStaticField();
			result->OpenPrice = OpenPrice;
			result->HighestPrice = HighestPrice;
			result->LowestPrice = LowestPrice;
			result->ClosePrice = ClosePrice;
			result->UpperLimitPrice = UpperLimitPrice;
			result->LowerLimitPrice = LowerLimitPrice;
			result->SettlementPrice = SettlementPrice;
			result->CurrDelta = CurrDelta;
			return result;
		}
	};

	/// <summary>
	///行情最新成交属性
	/// </summary>
	public ref struct MarketDataLastMatchField
	{
		/// <summary>
		///最新价
		/// </summary>
		double LastPrice;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///成交金额
		/// </summary>
		double Turnover;
		/// <summary>
		///持仓量
		/// </summary>
		double OpenInterest;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataLastMatchField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataLastMatchField* source)
		{
			LastPrice = source->LastPrice;
			Volume = source->Volume;
			Turnover = source->Turnover;
			OpenInterest = source->OpenInterest;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataLastMatchField(CThostFtdcMarketDataLastMatchField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataLastMatchField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataLastMatchField* result = new CThostFtdcMarketDataLastMatchField();
			result->LastPrice = LastPrice;
			result->Volume = Volume;
			result->Turnover = Turnover;
			result->OpenInterest = OpenInterest;
			return result;
		}
	};

	/// <summary>
	///行情最优价属性
	/// </summary>
	public ref struct MarketDataBestPriceField
	{
		/// <summary>
		///申买价一
		/// </summary>
		double BidPrice1;
		/// <summary>
		///申买量一
		/// </summary>
		int BidVolume1;
		/// <summary>
		///申卖价一
		/// </summary>
		double AskPrice1;
		/// <summary>
		///申卖量一
		/// </summary>
		int AskVolume1;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataBestPriceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataBestPriceField* source)
		{
			BidPrice1 = source->BidPrice1;
			BidVolume1 = source->BidVolume1;
			AskPrice1 = source->AskPrice1;
			AskVolume1 = source->AskVolume1;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataBestPriceField(CThostFtdcMarketDataBestPriceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataBestPriceField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataBestPriceField* result = new CThostFtdcMarketDataBestPriceField();
			result->BidPrice1 = BidPrice1;
			result->BidVolume1 = BidVolume1;
			result->AskPrice1 = AskPrice1;
			result->AskVolume1 = AskVolume1;
			return result;
		}
	};

	/// <summary>
	///行情申买二、三属性
	/// </summary>
	public ref struct MarketDataBid23Field
	{
		/// <summary>
		///申买价二
		/// </summary>
		double BidPrice2;
		/// <summary>
		///申买量二
		/// </summary>
		int BidVolume2;
		/// <summary>
		///申买价三
		/// </summary>
		double BidPrice3;
		/// <summary>
		///申买量三
		/// </summary>
		int BidVolume3;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataBid23Field()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataBid23Field* source)
		{
			BidPrice2 = source->BidPrice2;
			BidVolume2 = source->BidVolume2;
			BidPrice3 = source->BidPrice3;
			BidVolume3 = source->BidVolume3;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataBid23Field(CThostFtdcMarketDataBid23Field* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataBid23Field* getUnmanagedStructP()
		{
			CThostFtdcMarketDataBid23Field* result = new CThostFtdcMarketDataBid23Field();
			result->BidPrice2 = BidPrice2;
			result->BidVolume2 = BidVolume2;
			result->BidPrice3 = BidPrice3;
			result->BidVolume3 = BidVolume3;
			return result;
		}
	};

	/// <summary>
	///行情申卖二、三属性
	/// </summary>
	public ref struct MarketDataAsk23Field
	{
		/// <summary>
		///申卖价二
		/// </summary>
		double AskPrice2;
		/// <summary>
		///申卖量二
		/// </summary>
		int AskVolume2;
		/// <summary>
		///申卖价三
		/// </summary>
		double AskPrice3;
		/// <summary>
		///申卖量三
		/// </summary>
		int AskVolume3;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataAsk23Field()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataAsk23Field* source)
		{
			AskPrice2 = source->AskPrice2;
			AskVolume2 = source->AskVolume2;
			AskPrice3 = source->AskPrice3;
			AskVolume3 = source->AskVolume3;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataAsk23Field(CThostFtdcMarketDataAsk23Field* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataAsk23Field* getUnmanagedStructP()
		{
			CThostFtdcMarketDataAsk23Field* result = new CThostFtdcMarketDataAsk23Field();
			result->AskPrice2 = AskPrice2;
			result->AskVolume2 = AskVolume2;
			result->AskPrice3 = AskPrice3;
			result->AskVolume3 = AskVolume3;
			return result;
		}
	};

	/// <summary>
	///行情申买四、五属性
	/// </summary>
	public ref struct MarketDataBid45Field
	{
		/// <summary>
		///申买价四
		/// </summary>
		double BidPrice4;
		/// <summary>
		///申买量四
		/// </summary>
		int BidVolume4;
		/// <summary>
		///申买价五
		/// </summary>
		double BidPrice5;
		/// <summary>
		///申买量五
		/// </summary>
		int BidVolume5;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataBid45Field()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataBid45Field* source)
		{
			BidPrice4 = source->BidPrice4;
			BidVolume4 = source->BidVolume4;
			BidPrice5 = source->BidPrice5;
			BidVolume5 = source->BidVolume5;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataBid45Field(CThostFtdcMarketDataBid45Field* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataBid45Field* getUnmanagedStructP()
		{
			CThostFtdcMarketDataBid45Field* result = new CThostFtdcMarketDataBid45Field();
			result->BidPrice4 = BidPrice4;
			result->BidVolume4 = BidVolume4;
			result->BidPrice5 = BidPrice5;
			result->BidVolume5 = BidVolume5;
			return result;
		}
	};

	/// <summary>
	///行情申卖四、五属性
	/// </summary>
	public ref struct MarketDataAsk45Field
	{
		/// <summary>
		///申卖价四
		/// </summary>
		double AskPrice4;
		/// <summary>
		///申卖量四
		/// </summary>
		int AskVolume4;
		/// <summary>
		///申卖价五
		/// </summary>
		double AskPrice5;
		/// <summary>
		///申卖量五
		/// </summary>
		int AskVolume5;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataAsk45Field()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataAsk45Field* source)
		{
			AskPrice4 = source->AskPrice4;
			AskVolume4 = source->AskVolume4;
			AskPrice5 = source->AskPrice5;
			AskVolume5 = source->AskVolume5;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataAsk45Field(CThostFtdcMarketDataAsk45Field* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataAsk45Field* getUnmanagedStructP()
		{
			CThostFtdcMarketDataAsk45Field* result = new CThostFtdcMarketDataAsk45Field();
			result->AskPrice4 = AskPrice4;
			result->AskVolume4 = AskVolume4;
			result->AskPrice5 = AskPrice5;
			result->AskVolume5 = AskVolume5;
			return result;
		}
	};

	/// <summary>
	///行情更新时间属性
	/// </summary>
	public ref struct MarketDataUpdateTimeField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///最后修改毫秒
		/// </summary>
		int UpdateMillisec;
		/// <summary>
		///业务日期
		/// </summary>
		System::String^ ActionDay;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataUpdateTimeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataUpdateTimeField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			UpdateTime = char2NetString(source->UpdateTime);
			UpdateMillisec = source->UpdateMillisec;
			ActionDay = char2NetString(source->ActionDay);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataUpdateTimeField(CThostFtdcMarketDataUpdateTimeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataUpdateTimeField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataUpdateTimeField* result = new CThostFtdcMarketDataUpdateTimeField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			result->UpdateMillisec = UpdateMillisec;
			ActionDay ? strcpy_s(result->ActionDay, netString2ConstChar(ActionDay)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///行情上下带价
	/// </summary>
	public ref struct MarketDataBandingPriceField
	{
		/// <summary>
		///上带价
		/// </summary>
		double BandingUpperPrice;
		/// <summary>
		///下带价
		/// </summary>
		double BandingLowerPrice;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataBandingPriceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataBandingPriceField* source)
		{
			BandingUpperPrice = source->BandingUpperPrice;
			BandingLowerPrice = source->BandingLowerPrice;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataBandingPriceField(CThostFtdcMarketDataBandingPriceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataBandingPriceField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataBandingPriceField* result = new CThostFtdcMarketDataBandingPriceField();
			result->BandingUpperPrice = BandingUpperPrice;
			result->BandingLowerPrice = BandingLowerPrice;
			return result;
		}
	};

	/// <summary>
	///行情交易所代码属性
	/// </summary>
	public ref struct MarketDataExchangeField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataExchangeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataExchangeField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataExchangeField(CThostFtdcMarketDataExchangeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataExchangeField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataExchangeField* result = new CThostFtdcMarketDataExchangeField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///指定的合约
	/// </summary>
	public ref struct SpecificInstrumentField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		SpecificInstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSpecificInstrumentField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SpecificInstrumentField(CThostFtdcSpecificInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSpecificInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcSpecificInstrumentField* result = new CThostFtdcSpecificInstrumentField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///合约状态
	/// </summary>
	public ref struct InstrumentStatusField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///结算组代码
		/// </summary>
		System::String^ SettlementGroupID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///合约交易状态
		/// </summary>
		char InstrumentStatus;
		/// <summary>
		///交易阶段编号
		/// </summary>
		int TradingSegmentSN;
		/// <summary>
		///进入本状态时间
		/// </summary>
		System::String^ EnterTime;
		/// <summary>
		///进入本状态原因
		/// </summary>
		char EnterReason;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InstrumentStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInstrumentStatusField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			reserve1 = char2NetString(source->reserve1);
			SettlementGroupID = char2NetString(source->SettlementGroupID);
			reserve2 = char2NetString(source->reserve2);
			InstrumentStatus = source->InstrumentStatus;
			TradingSegmentSN = source->TradingSegmentSN;
			EnterTime = char2NetString(source->EnterTime);
			EnterReason = source->EnterReason;
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InstrumentStatusField(CThostFtdcInstrumentStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInstrumentStatusField* getUnmanagedStructP()
		{
			CThostFtdcInstrumentStatusField* result = new CThostFtdcInstrumentStatusField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			SettlementGroupID ? strcpy_s(result->SettlementGroupID, netString2ConstChar(SettlementGroupID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->InstrumentStatus = InstrumentStatus;
			result->TradingSegmentSN = TradingSegmentSN;
			EnterTime ? strcpy_s(result->EnterTime, netString2ConstChar(EnterTime)) : false;
			result->EnterReason = EnterReason;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询合约状态
	/// </summary>
	public ref struct QryInstrumentStatusField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInstrumentStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInstrumentStatusField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInstrumentStatusField(CThostFtdcQryInstrumentStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInstrumentStatusField* getUnmanagedStructP()
		{
			CThostFtdcQryInstrumentStatusField* result = new CThostFtdcQryInstrumentStatusField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者账户
	/// </summary>
	public ref struct InvestorAccountField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorAccountField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorAccountField(CThostFtdcInvestorAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorAccountField* getUnmanagedStructP()
		{
			CThostFtdcInvestorAccountField* result = new CThostFtdcInvestorAccountField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///浮动盈亏算法
	/// </summary>
	public ref struct PositionProfitAlgorithmField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///盈亏算法
		/// </summary>
		char Algorithm;
		/// <summary>
		///备注
		/// </summary>
		System::String^ Memo;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		PositionProfitAlgorithmField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcPositionProfitAlgorithmField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			Algorithm = source->Algorithm;
			Memo = char2NetString(source->Memo);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		PositionProfitAlgorithmField(CThostFtdcPositionProfitAlgorithmField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcPositionProfitAlgorithmField* getUnmanagedStructP()
		{
			CThostFtdcPositionProfitAlgorithmField* result = new CThostFtdcPositionProfitAlgorithmField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->Algorithm = Algorithm;
			Memo ? strcpy_s(result->Memo, netString2ConstChar(Memo)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///会员资金折扣
	/// </summary>
	public ref struct DiscountField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///资金折扣比例
		/// </summary>
		double Discount;

		/// <summary>
		/// 默认构造函数	</summary>
		DiscountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcDiscountField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorRange = source->InvestorRange;
			InvestorID = char2NetString(source->InvestorID);
			Discount = source->Discount;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		DiscountField(CThostFtdcDiscountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcDiscountField* getUnmanagedStructP()
		{
			CThostFtdcDiscountField* result = new CThostFtdcDiscountField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			result->InvestorRange = InvestorRange;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->Discount = Discount;
			return result;
		}
	};

	/// <summary>
	///查询转帐银行
	/// </summary>
	public ref struct QryTransferBankField
	{
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分中心代码
		/// </summary>
		System::String^ BankBrchID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTransferBankField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTransferBankField* source)
		{
			BankID = char2NetString(source->BankID);
			BankBrchID = char2NetString(source->BankBrchID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTransferBankField(CThostFtdcQryTransferBankField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTransferBankField* getUnmanagedStructP()
		{
			CThostFtdcQryTransferBankField* result = new CThostFtdcQryTransferBankField();
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBrchID ? strcpy_s(result->BankBrchID, netString2ConstChar(BankBrchID)) : false;
			return result;
		}
	};

	/// <summary>
	///转帐银行
	/// </summary>
	public ref struct TransferBankField
	{
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分中心代码
		/// </summary>
		System::String^ BankBrchID;
		/// <summary>
		///银行名称
		/// </summary>
		System::String^ BankName;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferBankField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferBankField* source)
		{
			BankID = char2NetString(source->BankID);
			BankBrchID = char2NetString(source->BankBrchID);
			BankName = char2NetString(source->BankName);
			IsActive = source->IsActive;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferBankField(CThostFtdcTransferBankField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferBankField* getUnmanagedStructP()
		{
			CThostFtdcTransferBankField* result = new CThostFtdcTransferBankField();
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBrchID ? strcpy_s(result->BankBrchID, netString2ConstChar(BankBrchID)) : false;
			BankName ? strcpy_s(result->BankName, netString2ConstChar(BankName)) : false;
			result->IsActive = IsActive;
			return result;
		}
	};

	/// <summary>
	///查询投资者持仓明细
	/// </summary>
	public ref struct QryInvestorPositionDetailField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestorPositionDetailField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestorPositionDetailField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestorPositionDetailField(CThostFtdcQryInvestorPositionDetailField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestorPositionDetailField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestorPositionDetailField* result = new CThostFtdcQryInvestorPositionDetailField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者持仓明细
	/// </summary>
	public ref struct InvestorPositionDetailField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///买卖
		/// </summary>
		char Direction;
		/// <summary>
		///开仓日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///成交编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///开仓价
		/// </summary>
		double OpenPrice;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///成交类型
		/// </summary>
		char TradeType;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///逐日盯市平仓盈亏
		/// </summary>
		double CloseProfitByDate;
		/// <summary>
		///逐笔对冲平仓盈亏
		/// </summary>
		double CloseProfitByTrade;
		/// <summary>
		///逐日盯市持仓盈亏
		/// </summary>
		double PositionProfitByDate;
		/// <summary>
		///逐笔对冲持仓盈亏
		/// </summary>
		double PositionProfitByTrade;
		/// <summary>
		///投资者保证金
		/// </summary>
		double Margin;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchMargin;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///昨结算价
		/// </summary>
		double LastSettlementPrice;
		/// <summary>
		///结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///平仓量
		/// </summary>
		int CloseVolume;
		/// <summary>
		///平仓金额
		/// </summary>
		double CloseAmount;
		/// <summary>
		///先开先平剩余数量（DCE）
		/// </summary>
		int TimeFirstVolume;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///特殊持仓标志
		/// </summary>
		char SpecPosiType;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///组合合约代码
		/// </summary>
		System::String^ CombInstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorPositionDetailField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorPositionDetailField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			Direction = source->Direction;
			OpenDate = char2NetString(source->OpenDate);
			TradeID = char2NetString(source->TradeID);
			Volume = source->Volume;
			OpenPrice = source->OpenPrice;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			TradeType = source->TradeType;
			reserve2 = char2NetString(source->reserve2);
			ExchangeID = char2NetString(source->ExchangeID);
			CloseProfitByDate = source->CloseProfitByDate;
			CloseProfitByTrade = source->CloseProfitByTrade;
			PositionProfitByDate = source->PositionProfitByDate;
			PositionProfitByTrade = source->PositionProfitByTrade;
			Margin = source->Margin;
			ExchMargin = source->ExchMargin;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			LastSettlementPrice = source->LastSettlementPrice;
			SettlementPrice = source->SettlementPrice;
			CloseVolume = source->CloseVolume;
			CloseAmount = source->CloseAmount;
			TimeFirstVolume = source->TimeFirstVolume;
			InvestUnitID = char2NetString(source->InvestUnitID);
			SpecPosiType = source->SpecPosiType;
			InstrumentID = char2NetString(source->InstrumentID);
			CombInstrumentID = char2NetString(source->CombInstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorPositionDetailField(CThostFtdcInvestorPositionDetailField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorPositionDetailField* getUnmanagedStructP()
		{
			CThostFtdcInvestorPositionDetailField* result = new CThostFtdcInvestorPositionDetailField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->Direction = Direction;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			result->Volume = Volume;
			result->OpenPrice = OpenPrice;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->TradeType = TradeType;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->CloseProfitByDate = CloseProfitByDate;
			result->CloseProfitByTrade = CloseProfitByTrade;
			result->PositionProfitByDate = PositionProfitByDate;
			result->PositionProfitByTrade = PositionProfitByTrade;
			result->Margin = Margin;
			result->ExchMargin = ExchMargin;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->LastSettlementPrice = LastSettlementPrice;
			result->SettlementPrice = SettlementPrice;
			result->CloseVolume = CloseVolume;
			result->CloseAmount = CloseAmount;
			result->TimeFirstVolume = TimeFirstVolume;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			result->SpecPosiType = SpecPosiType;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///资金账户口令域
	/// </summary>
	public ref struct TradingAccountPasswordField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingAccountPasswordField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingAccountPasswordField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingAccountPasswordField(CThostFtdcTradingAccountPasswordField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingAccountPasswordField* getUnmanagedStructP()
		{
			CThostFtdcTradingAccountPasswordField* result = new CThostFtdcTradingAccountPasswordField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所行情报盘机
	/// </summary>
	public ref struct MDTraderOfferField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///交易所交易员连接状态
		/// </summary>
		char TraderConnectStatus;
		/// <summary>
		///发出连接请求的日期
		/// </summary>
		System::String^ ConnectRequestDate;
		/// <summary>
		///发出连接请求的时间
		/// </summary>
		System::String^ ConnectRequestTime;
		/// <summary>
		///上次报告日期
		/// </summary>
		System::String^ LastReportDate;
		/// <summary>
		///上次报告时间
		/// </summary>
		System::String^ LastReportTime;
		/// <summary>
		///完成连接日期
		/// </summary>
		System::String^ ConnectDate;
		/// <summary>
		///完成连接时间
		/// </summary>
		System::String^ ConnectTime;
		/// <summary>
		///启动日期
		/// </summary>
		System::String^ StartDate;
		/// <summary>
		///启动时间
		/// </summary>
		System::String^ StartTime;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///本席位最大成交编号
		/// </summary>
		System::String^ MaxTradeID;
		/// <summary>
		///本席位最大报单备拷
		/// </summary>
		System::String^ MaxOrderMessageReference;

		/// <summary>
		/// 默认构造函数	</summary>
		MDTraderOfferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMDTraderOfferField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			TraderID = char2NetString(source->TraderID);
			ParticipantID = char2NetString(source->ParticipantID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			TraderConnectStatus = source->TraderConnectStatus;
			ConnectRequestDate = char2NetString(source->ConnectRequestDate);
			ConnectRequestTime = char2NetString(source->ConnectRequestTime);
			LastReportDate = char2NetString(source->LastReportDate);
			LastReportTime = char2NetString(source->LastReportTime);
			ConnectDate = char2NetString(source->ConnectDate);
			ConnectTime = char2NetString(source->ConnectTime);
			StartDate = char2NetString(source->StartDate);
			StartTime = char2NetString(source->StartTime);
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			MaxTradeID = char2NetString(source->MaxTradeID);
			MaxOrderMessageReference = char2NetString(source->MaxOrderMessageReference);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MDTraderOfferField(CThostFtdcMDTraderOfferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMDTraderOfferField* getUnmanagedStructP()
		{
			CThostFtdcMDTraderOfferField* result = new CThostFtdcMDTraderOfferField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			result->TraderConnectStatus = TraderConnectStatus;
			ConnectRequestDate ? strcpy_s(result->ConnectRequestDate, netString2ConstChar(ConnectRequestDate)) : false;
			ConnectRequestTime ? strcpy_s(result->ConnectRequestTime, netString2ConstChar(ConnectRequestTime)) : false;
			LastReportDate ? strcpy_s(result->LastReportDate, netString2ConstChar(LastReportDate)) : false;
			LastReportTime ? strcpy_s(result->LastReportTime, netString2ConstChar(LastReportTime)) : false;
			ConnectDate ? strcpy_s(result->ConnectDate, netString2ConstChar(ConnectDate)) : false;
			ConnectTime ? strcpy_s(result->ConnectTime, netString2ConstChar(ConnectTime)) : false;
			StartDate ? strcpy_s(result->StartDate, netString2ConstChar(StartDate)) : false;
			StartTime ? strcpy_s(result->StartTime, netString2ConstChar(StartTime)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			MaxTradeID ? strcpy_s(result->MaxTradeID, netString2ConstChar(MaxTradeID)) : false;
			MaxOrderMessageReference ? strcpy_s(result->MaxOrderMessageReference, netString2ConstChar(MaxOrderMessageReference)) : false;
			return result;
		}
	};

	/// <summary>
	///查询行情报盘机
	/// </summary>
	public ref struct QryMDTraderOfferField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMDTraderOfferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMDTraderOfferField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			TraderID = char2NetString(source->TraderID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMDTraderOfferField(CThostFtdcQryMDTraderOfferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMDTraderOfferField* getUnmanagedStructP()
		{
			CThostFtdcQryMDTraderOfferField* result = new CThostFtdcQryMDTraderOfferField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询客户通知
	/// </summary>
	public ref struct QryNoticeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryNoticeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryNoticeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryNoticeField(CThostFtdcQryNoticeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryNoticeField* getUnmanagedStructP()
		{
			CThostFtdcQryNoticeField* result = new CThostFtdcQryNoticeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///客户通知
	/// </summary>
	public ref struct NoticeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///消息正文
		/// </summary>
		System::String^ Content;
		/// <summary>
		///经纪公司通知内容序列号
		/// </summary>
		System::String^ SequenceLabel;

		/// <summary>
		/// 默认构造函数	</summary>
		NoticeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcNoticeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			Content = char2NetString(source->Content);
			SequenceLabel = char2NetString(source->SequenceLabel);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		NoticeField(CThostFtdcNoticeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcNoticeField* getUnmanagedStructP()
		{
			CThostFtdcNoticeField* result = new CThostFtdcNoticeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			Content ? strcpy_s(result->Content, netString2ConstChar(Content)) : false;
			SequenceLabel ? strcpy_s(result->SequenceLabel, netString2ConstChar(SequenceLabel)) : false;
			return result;
		}
	};

	/// <summary>
	///用户权限
	/// </summary>
	public ref struct UserRightField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///客户权限类型
		/// </summary>
		char UserRightType;
		/// <summary>
		///是否禁止
		/// </summary>
		int IsForbidden;

		/// <summary>
		/// 默认构造函数	</summary>
		UserRightField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserRightField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserRightType = source->UserRightType;
			IsForbidden = source->IsForbidden;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserRightField(CThostFtdcUserRightField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserRightField* getUnmanagedStructP()
		{
			CThostFtdcUserRightField* result = new CThostFtdcUserRightField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->UserRightType = UserRightType;
			result->IsForbidden = IsForbidden;
			return result;
		}
	};

	/// <summary>
	///查询结算信息确认域
	/// </summary>
	public ref struct QrySettlementInfoConfirmField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySettlementInfoConfirmField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySettlementInfoConfirmField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySettlementInfoConfirmField(CThostFtdcQrySettlementInfoConfirmField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySettlementInfoConfirmField* getUnmanagedStructP()
		{
			CThostFtdcQrySettlementInfoConfirmField* result = new CThostFtdcQrySettlementInfoConfirmField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///装载结算信息
	/// </summary>
	public ref struct LoadSettlementInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		LoadSettlementInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcLoadSettlementInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		LoadSettlementInfoField(CThostFtdcLoadSettlementInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcLoadSettlementInfoField* getUnmanagedStructP()
		{
			CThostFtdcLoadSettlementInfoField* result = new CThostFtdcLoadSettlementInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司可提资金算法表
	/// </summary>
	public ref struct BrokerWithdrawAlgorithmField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///可提资金算法
		/// </summary>
		char WithdrawAlgorithm;
		/// <summary>
		///资金使用率
		/// </summary>
		double UsingRatio;
		/// <summary>
		///可提是否包含平仓盈利
		/// </summary>
		char IncludeCloseProfit;
		/// <summary>
		///本日无仓且无成交客户是否受可提比例限制
		/// </summary>
		char AllWithoutTrade;
		/// <summary>
		///可用是否包含平仓盈利
		/// </summary>
		char AvailIncludeCloseProfit;
		/// <summary>
		///是否启用用户事件
		/// </summary>
		int IsBrokerUserEvent;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///货币质押比率
		/// </summary>
		double FundMortgageRatio;
		/// <summary>
		///权益算法
		/// </summary>
		char BalanceAlgorithm;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerWithdrawAlgorithmField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerWithdrawAlgorithmField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			WithdrawAlgorithm = source->WithdrawAlgorithm;
			UsingRatio = source->UsingRatio;
			IncludeCloseProfit = source->IncludeCloseProfit;
			AllWithoutTrade = source->AllWithoutTrade;
			AvailIncludeCloseProfit = source->AvailIncludeCloseProfit;
			IsBrokerUserEvent = source->IsBrokerUserEvent;
			CurrencyID = char2NetString(source->CurrencyID);
			FundMortgageRatio = source->FundMortgageRatio;
			BalanceAlgorithm = source->BalanceAlgorithm;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerWithdrawAlgorithmField(CThostFtdcBrokerWithdrawAlgorithmField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerWithdrawAlgorithmField* getUnmanagedStructP()
		{
			CThostFtdcBrokerWithdrawAlgorithmField* result = new CThostFtdcBrokerWithdrawAlgorithmField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			result->WithdrawAlgorithm = WithdrawAlgorithm;
			result->UsingRatio = UsingRatio;
			result->IncludeCloseProfit = IncludeCloseProfit;
			result->AllWithoutTrade = AllWithoutTrade;
			result->AvailIncludeCloseProfit = AvailIncludeCloseProfit;
			result->IsBrokerUserEvent = IsBrokerUserEvent;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->FundMortgageRatio = FundMortgageRatio;
			result->BalanceAlgorithm = BalanceAlgorithm;
			return result;
		}
	};

	/// <summary>
	///资金账户口令变更域
	/// </summary>
	public ref struct TradingAccountPasswordUpdateV1Field
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///原来的口令
		/// </summary>
		System::String^ OldPassword;
		/// <summary>
		///新的口令
		/// </summary>
		System::String^ NewPassword;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingAccountPasswordUpdateV1Field()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingAccountPasswordUpdateV1Field* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OldPassword = char2NetString(source->OldPassword);
			NewPassword = char2NetString(source->NewPassword);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingAccountPasswordUpdateV1Field(CThostFtdcTradingAccountPasswordUpdateV1Field* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingAccountPasswordUpdateV1Field* getUnmanagedStructP()
		{
			CThostFtdcTradingAccountPasswordUpdateV1Field* result = new CThostFtdcTradingAccountPasswordUpdateV1Field();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			OldPassword ? strcpy_s(result->OldPassword, netString2ConstChar(OldPassword)) : false;
			NewPassword ? strcpy_s(result->NewPassword, netString2ConstChar(NewPassword)) : false;
			return result;
		}
	};

	/// <summary>
	///资金账户口令变更域
	/// </summary>
	public ref struct TradingAccountPasswordUpdateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///原来的口令
		/// </summary>
		System::String^ OldPassword;
		/// <summary>
		///新的口令
		/// </summary>
		System::String^ NewPassword;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingAccountPasswordUpdateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingAccountPasswordUpdateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			OldPassword = char2NetString(source->OldPassword);
			NewPassword = char2NetString(source->NewPassword);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingAccountPasswordUpdateField(CThostFtdcTradingAccountPasswordUpdateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingAccountPasswordUpdateField* getUnmanagedStructP()
		{
			CThostFtdcTradingAccountPasswordUpdateField* result = new CThostFtdcTradingAccountPasswordUpdateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			OldPassword ? strcpy_s(result->OldPassword, netString2ConstChar(OldPassword)) : false;
			NewPassword ? strcpy_s(result->NewPassword, netString2ConstChar(NewPassword)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询组合合约分腿
	/// </summary>
	public ref struct QryCombinationLegField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///单腿编号
		/// </summary>
		int LegID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///组合合约代码
		/// </summary>
		System::String^ CombInstrumentID;
		/// <summary>
		///单腿合约代码
		/// </summary>
		System::String^ LegInstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCombinationLegField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCombinationLegField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			LegID = source->LegID;
			reserve2 = char2NetString(source->reserve2);
			CombInstrumentID = char2NetString(source->CombInstrumentID);
			LegInstrumentID = char2NetString(source->LegInstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCombinationLegField(CThostFtdcQryCombinationLegField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCombinationLegField* getUnmanagedStructP()
		{
			CThostFtdcQryCombinationLegField* result = new CThostFtdcQryCombinationLegField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->LegID = LegID;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			LegInstrumentID ? strcpy_s(result->LegInstrumentID, netString2ConstChar(LegInstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询组合合约分腿
	/// </summary>
	public ref struct QrySyncStatusField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySyncStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySyncStatusField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySyncStatusField(CThostFtdcQrySyncStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySyncStatusField* getUnmanagedStructP()
		{
			CThostFtdcQrySyncStatusField* result = new CThostFtdcQrySyncStatusField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			return result;
		}
	};

	/// <summary>
	///组合交易合约的单腿
	/// </summary>
	public ref struct CombinationLegField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///单腿编号
		/// </summary>
		int LegID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///单腿乘数
		/// </summary>
		int LegMultiple;
		/// <summary>
		///派生层数
		/// </summary>
		int ImplyLevel;
		/// <summary>
		///组合合约代码
		/// </summary>
		System::String^ CombInstrumentID;
		/// <summary>
		///单腿合约代码
		/// </summary>
		System::String^ LegInstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		CombinationLegField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCombinationLegField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			LegID = source->LegID;
			reserve2 = char2NetString(source->reserve2);
			Direction = source->Direction;
			LegMultiple = source->LegMultiple;
			ImplyLevel = source->ImplyLevel;
			CombInstrumentID = char2NetString(source->CombInstrumentID);
			LegInstrumentID = char2NetString(source->LegInstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CombinationLegField(CThostFtdcCombinationLegField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCombinationLegField* getUnmanagedStructP()
		{
			CThostFtdcCombinationLegField* result = new CThostFtdcCombinationLegField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->LegID = LegID;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->Direction = Direction;
			result->LegMultiple = LegMultiple;
			result->ImplyLevel = ImplyLevel;
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			LegInstrumentID ? strcpy_s(result->LegInstrumentID, netString2ConstChar(LegInstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///数据同步状态
	/// </summary>
	public ref struct SyncStatusField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///数据同步状态
		/// </summary>
		char DataSyncStatus;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncStatusField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			DataSyncStatus = source->DataSyncStatus;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncStatusField(CThostFtdcSyncStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncStatusField* getUnmanagedStructP()
		{
			CThostFtdcSyncStatusField* result = new CThostFtdcSyncStatusField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->DataSyncStatus = DataSyncStatus;
			return result;
		}
	};

	/// <summary>
	///查询联系人
	/// </summary>
	public ref struct QryLinkManField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryLinkManField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryLinkManField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryLinkManField(CThostFtdcQryLinkManField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryLinkManField* getUnmanagedStructP()
		{
			CThostFtdcQryLinkManField* result = new CThostFtdcQryLinkManField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///联系人
	/// </summary>
	public ref struct LinkManField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///联系人类型
		/// </summary>
		char PersonType;
		/// <summary>
		///证件类型
		/// </summary>
		char IdentifiedCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///名称
		/// </summary>
		System::String^ PersonName;
		/// <summary>
		///联系电话
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///通讯地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮政编码
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///优先级
		/// </summary>
		int Priority;
		/// <summary>
		///开户邮政编码
		/// </summary>
		System::String^ UOAZipCode;
		/// <summary>
		///全称
		/// </summary>
		System::String^ PersonFullName;

		/// <summary>
		/// 默认构造函数	</summary>
		LinkManField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcLinkManField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			PersonType = source->PersonType;
			IdentifiedCardType = source->IdentifiedCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			PersonName = char2NetString(source->PersonName);
			Telephone = char2NetString(source->Telephone);
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Priority = source->Priority;
			UOAZipCode = char2NetString(source->UOAZipCode);
			PersonFullName = char2NetString(source->PersonFullName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		LinkManField(CThostFtdcLinkManField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcLinkManField* getUnmanagedStructP()
		{
			CThostFtdcLinkManField* result = new CThostFtdcLinkManField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->PersonType = PersonType;
			result->IdentifiedCardType = IdentifiedCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			PersonName ? strcpy_s(result->PersonName, netString2ConstChar(PersonName)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			result->Priority = Priority;
			UOAZipCode ? strcpy_s(result->UOAZipCode, netString2ConstChar(UOAZipCode)) : false;
			PersonFullName ? strcpy_s(result->PersonFullName, netString2ConstChar(PersonFullName)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司用户事件
	/// </summary>
	public ref struct QryBrokerUserEventField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户事件类型
		/// </summary>
		char UserEventType;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBrokerUserEventField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBrokerUserEventField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserEventType = source->UserEventType;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBrokerUserEventField(CThostFtdcQryBrokerUserEventField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBrokerUserEventField* getUnmanagedStructP()
		{
			CThostFtdcQryBrokerUserEventField* result = new CThostFtdcQryBrokerUserEventField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->UserEventType = UserEventType;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司用户事件
	/// </summary>
	public ref struct BrokerUserEventField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户事件类型
		/// </summary>
		char UserEventType;
		/// <summary>
		///用户事件序号
		/// </summary>
		int EventSequenceNo;
		/// <summary>
		///事件发生日期
		/// </summary>
		System::String^ EventDate;
		/// <summary>
		///事件发生时间
		/// </summary>
		System::String^ EventTime;
		/// <summary>
		///用户事件信息
		/// </summary>
		System::String^ UserEventInfo;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerUserEventField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerUserEventField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			UserEventType = source->UserEventType;
			EventSequenceNo = source->EventSequenceNo;
			EventDate = char2NetString(source->EventDate);
			EventTime = char2NetString(source->EventTime);
			UserEventInfo = char2NetString(source->UserEventInfo);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerUserEventField(CThostFtdcBrokerUserEventField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerUserEventField* getUnmanagedStructP()
		{
			CThostFtdcBrokerUserEventField* result = new CThostFtdcBrokerUserEventField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->UserEventType = UserEventType;
			result->EventSequenceNo = EventSequenceNo;
			EventDate ? strcpy_s(result->EventDate, netString2ConstChar(EventDate)) : false;
			EventTime ? strcpy_s(result->EventTime, netString2ConstChar(EventTime)) : false;
			UserEventInfo ? strcpy_s(result->UserEventInfo, netString2ConstChar(UserEventInfo)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询签约银行请求
	/// </summary>
	public ref struct QryContractBankField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分中心代码
		/// </summary>
		System::String^ BankBrchID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryContractBankField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryContractBankField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			BankID = char2NetString(source->BankID);
			BankBrchID = char2NetString(source->BankBrchID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryContractBankField(CThostFtdcQryContractBankField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryContractBankField* getUnmanagedStructP()
		{
			CThostFtdcQryContractBankField* result = new CThostFtdcQryContractBankField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBrchID ? strcpy_s(result->BankBrchID, netString2ConstChar(BankBrchID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询签约银行响应
	/// </summary>
	public ref struct ContractBankField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分中心代码
		/// </summary>
		System::String^ BankBrchID;
		/// <summary>
		///银行名称
		/// </summary>
		System::String^ BankName;

		/// <summary>
		/// 默认构造函数	</summary>
		ContractBankField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcContractBankField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			BankID = char2NetString(source->BankID);
			BankBrchID = char2NetString(source->BankBrchID);
			BankName = char2NetString(source->BankName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ContractBankField(CThostFtdcContractBankField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcContractBankField* getUnmanagedStructP()
		{
			CThostFtdcContractBankField* result = new CThostFtdcContractBankField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBrchID ? strcpy_s(result->BankBrchID, netString2ConstChar(BankBrchID)) : false;
			BankName ? strcpy_s(result->BankName, netString2ConstChar(BankName)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者组合持仓明细
	/// </summary>
	public ref struct InvestorPositionCombineDetailField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///开仓日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///组合编号
		/// </summary>
		System::String^ ComTradeID;
		/// <summary>
		///撮合编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///买卖
		/// </summary>
		char Direction;
		/// <summary>
		///持仓量
		/// </summary>
		int TotalAmt;
		/// <summary>
		///投资者保证金
		/// </summary>
		double Margin;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchMargin;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///单腿编号
		/// </summary>
		int LegID;
		/// <summary>
		///单腿乘数
		/// </summary>
		int LegMultiple;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///成交组号
		/// </summary>
		int TradeGroupID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///组合持仓合约编码
		/// </summary>
		System::String^ CombInstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorPositionCombineDetailField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorPositionCombineDetailField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			OpenDate = char2NetString(source->OpenDate);
			ExchangeID = char2NetString(source->ExchangeID);
			SettlementID = source->SettlementID;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ComTradeID = char2NetString(source->ComTradeID);
			TradeID = char2NetString(source->TradeID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			Direction = source->Direction;
			TotalAmt = source->TotalAmt;
			Margin = source->Margin;
			ExchMargin = source->ExchMargin;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			LegID = source->LegID;
			LegMultiple = source->LegMultiple;
			reserve2 = char2NetString(source->reserve2);
			TradeGroupID = source->TradeGroupID;
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
			CombInstrumentID = char2NetString(source->CombInstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorPositionCombineDetailField(CThostFtdcInvestorPositionCombineDetailField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorPositionCombineDetailField* getUnmanagedStructP()
		{
			CThostFtdcInvestorPositionCombineDetailField* result = new CThostFtdcInvestorPositionCombineDetailField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->SettlementID = SettlementID;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ComTradeID ? strcpy_s(result->ComTradeID, netString2ConstChar(ComTradeID)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			result->Direction = Direction;
			result->TotalAmt = TotalAmt;
			result->Margin = Margin;
			result->ExchMargin = ExchMargin;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->LegID = LegID;
			result->LegMultiple = LegMultiple;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			result->TradeGroupID = TradeGroupID;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///预埋单
	/// </summary>
	public ref struct ParkedOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///报单价格条件
		/// </summary>
		char OrderPriceType;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///组合开平标志
		/// </summary>
		System::String^ CombOffsetFlag;
		/// <summary>
		///组合投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量
		/// </summary>
		int VolumeTotalOriginal;
		/// <summary>
		///有效期类型
		/// </summary>
		char TimeCondition;
		/// <summary>
		///GTD日期
		/// </summary>
		System::String^ GTDDate;
		/// <summary>
		///成交量类型
		/// </summary>
		char VolumeCondition;
		/// <summary>
		///最小成交量
		/// </summary>
		int MinVolume;
		/// <summary>
		///触发条件
		/// </summary>
		char ContingentCondition;
		/// <summary>
		///止损价
		/// </summary>
		double StopPrice;
		/// <summary>
		///强平原因
		/// </summary>
		char ForceCloseReason;
		/// <summary>
		///自动挂起标志
		/// </summary>
		int IsAutoSuspend;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///用户强评标志
		/// </summary>
		int UserForceClose;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///预埋报单编号
		/// </summary>
		System::String^ ParkedOrderID;
		/// <summary>
		///用户类型
		/// </summary>
		char UserType;
		/// <summary>
		///预埋单状态
		/// </summary>
		char Status;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///互换单标志
		/// </summary>
		int IsSwapOrder;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ParkedOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcParkedOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OrderRef = char2NetString(source->OrderRef);
			UserID = char2NetString(source->UserID);
			OrderPriceType = source->OrderPriceType;
			Direction = source->Direction;
			CombOffsetFlag = char2NetString(source->CombOffsetFlag);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			LimitPrice = source->LimitPrice;
			VolumeTotalOriginal = source->VolumeTotalOriginal;
			TimeCondition = source->TimeCondition;
			GTDDate = char2NetString(source->GTDDate);
			VolumeCondition = source->VolumeCondition;
			MinVolume = source->MinVolume;
			ContingentCondition = source->ContingentCondition;
			StopPrice = source->StopPrice;
			ForceCloseReason = source->ForceCloseReason;
			IsAutoSuspend = source->IsAutoSuspend;
			BusinessUnit = char2NetString(source->BusinessUnit);
			RequestID = source->RequestID;
			UserForceClose = source->UserForceClose;
			ExchangeID = char2NetString(source->ExchangeID);
			ParkedOrderID = char2NetString(source->ParkedOrderID);
			UserType = source->UserType;
			Status = source->Status;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			IsSwapOrder = source->IsSwapOrder;
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			ClientID = char2NetString(source->ClientID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ParkedOrderField(CThostFtdcParkedOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcParkedOrderField* getUnmanagedStructP()
		{
			CThostFtdcParkedOrderField* result = new CThostFtdcParkedOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->OrderPriceType = OrderPriceType;
			result->Direction = Direction;
			CombOffsetFlag ? strcpy_s(result->CombOffsetFlag, netString2ConstChar(CombOffsetFlag)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->LimitPrice = LimitPrice;
			result->VolumeTotalOriginal = VolumeTotalOriginal;
			result->TimeCondition = TimeCondition;
			GTDDate ? strcpy_s(result->GTDDate, netString2ConstChar(GTDDate)) : false;
			result->VolumeCondition = VolumeCondition;
			result->MinVolume = MinVolume;
			result->ContingentCondition = ContingentCondition;
			result->StopPrice = StopPrice;
			result->ForceCloseReason = ForceCloseReason;
			result->IsAutoSuspend = IsAutoSuspend;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->RequestID = RequestID;
			result->UserForceClose = UserForceClose;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParkedOrderID ? strcpy_s(result->ParkedOrderID, netString2ConstChar(ParkedOrderID)) : false;
			result->UserType = UserType;
			result->Status = Status;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			result->IsSwapOrder = IsSwapOrder;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///输入预埋单操作
	/// </summary>
	public ref struct ParkedOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报单操作引用
		/// </summary>
		int OrderActionRef;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量变化
		/// </summary>
		int VolumeChange;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///预埋撤单单编号
		/// </summary>
		System::String^ ParkedOrderActionID;
		/// <summary>
		///用户类型
		/// </summary>
		char UserType;
		/// <summary>
		///预埋撤单状态
		/// </summary>
		char Status;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ParkedOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcParkedOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OrderActionRef = source->OrderActionRef;
			OrderRef = char2NetString(source->OrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			ActionFlag = source->ActionFlag;
			LimitPrice = source->LimitPrice;
			VolumeChange = source->VolumeChange;
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			ParkedOrderActionID = char2NetString(source->ParkedOrderActionID);
			UserType = source->UserType;
			Status = source->Status;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ParkedOrderActionField(CThostFtdcParkedOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcParkedOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcParkedOrderActionField* result = new CThostFtdcParkedOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OrderActionRef = OrderActionRef;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			result->LimitPrice = LimitPrice;
			result->VolumeChange = VolumeChange;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ParkedOrderActionID ? strcpy_s(result->ParkedOrderActionID, netString2ConstChar(ParkedOrderActionID)) : false;
			result->UserType = UserType;
			result->Status = Status;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询预埋单
	/// </summary>
	public ref struct QryParkedOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryParkedOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryParkedOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryParkedOrderField(CThostFtdcQryParkedOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryParkedOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryParkedOrderField* result = new CThostFtdcQryParkedOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询预埋撤单
	/// </summary>
	public ref struct QryParkedOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryParkedOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryParkedOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryParkedOrderActionField(CThostFtdcQryParkedOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryParkedOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryParkedOrderActionField* result = new CThostFtdcQryParkedOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///删除预埋单
	/// </summary>
	public ref struct RemoveParkedOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///预埋报单编号
		/// </summary>
		System::String^ ParkedOrderID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		RemoveParkedOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRemoveParkedOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ParkedOrderID = char2NetString(source->ParkedOrderID);
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RemoveParkedOrderField(CThostFtdcRemoveParkedOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRemoveParkedOrderField* getUnmanagedStructP()
		{
			CThostFtdcRemoveParkedOrderField* result = new CThostFtdcRemoveParkedOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ParkedOrderID ? strcpy_s(result->ParkedOrderID, netString2ConstChar(ParkedOrderID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///删除预埋撤单
	/// </summary>
	public ref struct RemoveParkedOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///预埋撤单编号
		/// </summary>
		System::String^ ParkedOrderActionID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		RemoveParkedOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRemoveParkedOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ParkedOrderActionID = char2NetString(source->ParkedOrderActionID);
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RemoveParkedOrderActionField(CThostFtdcRemoveParkedOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRemoveParkedOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcRemoveParkedOrderActionField* result = new CThostFtdcRemoveParkedOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ParkedOrderActionID ? strcpy_s(result->ParkedOrderActionID, netString2ConstChar(ParkedOrderActionID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司可提资金算法表
	/// </summary>
	public ref struct InvestorWithdrawAlgorithmField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///可提资金比例
		/// </summary>
		double UsingRatio;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///货币质押比率
		/// </summary>
		double FundMortgageRatio;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorWithdrawAlgorithmField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorWithdrawAlgorithmField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorRange = source->InvestorRange;
			InvestorID = char2NetString(source->InvestorID);
			UsingRatio = source->UsingRatio;
			CurrencyID = char2NetString(source->CurrencyID);
			FundMortgageRatio = source->FundMortgageRatio;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorWithdrawAlgorithmField(CThostFtdcInvestorWithdrawAlgorithmField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorWithdrawAlgorithmField* getUnmanagedStructP()
		{
			CThostFtdcInvestorWithdrawAlgorithmField* result = new CThostFtdcInvestorWithdrawAlgorithmField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			result->InvestorRange = InvestorRange;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->UsingRatio = UsingRatio;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->FundMortgageRatio = FundMortgageRatio;
			return result;
		}
	};

	/// <summary>
	///查询组合持仓明细
	/// </summary>
	public ref struct QryInvestorPositionCombineDetailField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///组合持仓合约编码
		/// </summary>
		System::String^ CombInstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestorPositionCombineDetailField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestorPositionCombineDetailField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			CombInstrumentID = char2NetString(source->CombInstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestorPositionCombineDetailField(CThostFtdcQryInvestorPositionCombineDetailField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestorPositionCombineDetailField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestorPositionCombineDetailField* result = new CThostFtdcQryInvestorPositionCombineDetailField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///成交均价
	/// </summary>
	public ref struct MarketDataAveragePriceField
	{
		/// <summary>
		///当日均价
		/// </summary>
		double AveragePrice;

		/// <summary>
		/// 默认构造函数	</summary>
		MarketDataAveragePriceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarketDataAveragePriceField* source)
		{
			AveragePrice = source->AveragePrice;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarketDataAveragePriceField(CThostFtdcMarketDataAveragePriceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarketDataAveragePriceField* getUnmanagedStructP()
		{
			CThostFtdcMarketDataAveragePriceField* result = new CThostFtdcMarketDataAveragePriceField();
			result->AveragePrice = AveragePrice;
			return result;
		}
	};

	/// <summary>
	///校验投资者密码
	/// </summary>
	public ref struct VerifyInvestorPasswordField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;

		/// <summary>
		/// 默认构造函数	</summary>
		VerifyInvestorPasswordField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcVerifyInvestorPasswordField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			Password = char2NetString(source->Password);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		VerifyInvestorPasswordField(CThostFtdcVerifyInvestorPasswordField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcVerifyInvestorPasswordField* getUnmanagedStructP()
		{
			CThostFtdcVerifyInvestorPasswordField* result = new CThostFtdcVerifyInvestorPasswordField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			return result;
		}
	};

	/// <summary>
	///用户IP
	/// </summary>
	public ref struct UserIPField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;
		/// <summary>
		///IP地址掩码
		/// </summary>
		System::String^ IPMask;

		/// <summary>
		/// 默认构造函数	</summary>
		UserIPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserIPField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			IPAddress = char2NetString(source->IPAddress);
			IPMask = char2NetString(source->IPMask);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserIPField(CThostFtdcUserIPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserIPField* getUnmanagedStructP()
		{
			CThostFtdcUserIPField* result = new CThostFtdcUserIPField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			IPMask ? strcpy_s(result->IPMask, netString2ConstChar(IPMask)) : false;
			return result;
		}
	};

	/// <summary>
	///用户事件通知信息
	/// </summary>
	public ref struct TradingNoticeInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///发送时间
		/// </summary>
		System::String^ SendTime;
		/// <summary>
		///消息正文
		/// </summary>
		System::String^ FieldContent;
		/// <summary>
		///序列系列号
		/// </summary>
		short SequenceSeries;
		/// <summary>
		///序列号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingNoticeInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingNoticeInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			SendTime = char2NetString(source->SendTime);
			FieldContent = char2NetString(source->FieldContent);
			SequenceSeries = source->SequenceSeries;
			SequenceNo = source->SequenceNo;
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingNoticeInfoField(CThostFtdcTradingNoticeInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingNoticeInfoField* getUnmanagedStructP()
		{
			CThostFtdcTradingNoticeInfoField* result = new CThostFtdcTradingNoticeInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			SendTime ? strcpy_s(result->SendTime, netString2ConstChar(SendTime)) : false;
			FieldContent ? strcpy_s(result->FieldContent, netString2ConstChar(FieldContent)) : false;
			result->SequenceSeries = SequenceSeries;
			result->SequenceNo = SequenceNo;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///用户事件通知
	/// </summary>
	public ref struct TradingNoticeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///序列系列号
		/// </summary>
		short SequenceSeries;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///发送时间
		/// </summary>
		System::String^ SendTime;
		/// <summary>
		///序列号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///消息正文
		/// </summary>
		System::String^ FieldContent;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingNoticeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingNoticeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorRange = source->InvestorRange;
			InvestorID = char2NetString(source->InvestorID);
			SequenceSeries = source->SequenceSeries;
			UserID = char2NetString(source->UserID);
			SendTime = char2NetString(source->SendTime);
			SequenceNo = source->SequenceNo;
			FieldContent = char2NetString(source->FieldContent);
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingNoticeField(CThostFtdcTradingNoticeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingNoticeField* getUnmanagedStructP()
		{
			CThostFtdcTradingNoticeField* result = new CThostFtdcTradingNoticeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			result->InvestorRange = InvestorRange;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->SequenceSeries = SequenceSeries;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			SendTime ? strcpy_s(result->SendTime, netString2ConstChar(SendTime)) : false;
			result->SequenceNo = SequenceNo;
			FieldContent ? strcpy_s(result->FieldContent, netString2ConstChar(FieldContent)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易事件通知
	/// </summary>
	public ref struct QryTradingNoticeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTradingNoticeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTradingNoticeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTradingNoticeField(CThostFtdcQryTradingNoticeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTradingNoticeField* getUnmanagedStructP()
		{
			CThostFtdcQryTradingNoticeField* result = new CThostFtdcQryTradingNoticeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询错误报单
	/// </summary>
	public ref struct QryErrOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryErrOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryErrOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryErrOrderField(CThostFtdcQryErrOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryErrOrderField* getUnmanagedStructP()
		{
			CThostFtdcQryErrOrderField* result = new CThostFtdcQryErrOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///错误报单
	/// </summary>
	public ref struct ErrOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///报单价格条件
		/// </summary>
		char OrderPriceType;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///组合开平标志
		/// </summary>
		System::String^ CombOffsetFlag;
		/// <summary>
		///组合投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量
		/// </summary>
		int VolumeTotalOriginal;
		/// <summary>
		///有效期类型
		/// </summary>
		char TimeCondition;
		/// <summary>
		///GTD日期
		/// </summary>
		System::String^ GTDDate;
		/// <summary>
		///成交量类型
		/// </summary>
		char VolumeCondition;
		/// <summary>
		///最小成交量
		/// </summary>
		int MinVolume;
		/// <summary>
		///触发条件
		/// </summary>
		char ContingentCondition;
		/// <summary>
		///止损价
		/// </summary>
		double StopPrice;
		/// <summary>
		///强平原因
		/// </summary>
		char ForceCloseReason;
		/// <summary>
		///自动挂起标志
		/// </summary>
		int IsAutoSuspend;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///用户强评标志
		/// </summary>
		int UserForceClose;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///互换单标志
		/// </summary>
		int IsSwapOrder;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易编码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ErrOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcErrOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OrderRef = char2NetString(source->OrderRef);
			UserID = char2NetString(source->UserID);
			OrderPriceType = source->OrderPriceType;
			Direction = source->Direction;
			CombOffsetFlag = char2NetString(source->CombOffsetFlag);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			LimitPrice = source->LimitPrice;
			VolumeTotalOriginal = source->VolumeTotalOriginal;
			TimeCondition = source->TimeCondition;
			GTDDate = char2NetString(source->GTDDate);
			VolumeCondition = source->VolumeCondition;
			MinVolume = source->MinVolume;
			ContingentCondition = source->ContingentCondition;
			StopPrice = source->StopPrice;
			ForceCloseReason = source->ForceCloseReason;
			IsAutoSuspend = source->IsAutoSuspend;
			BusinessUnit = char2NetString(source->BusinessUnit);
			RequestID = source->RequestID;
			UserForceClose = source->UserForceClose;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			IsSwapOrder = source->IsSwapOrder;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ErrOrderField(CThostFtdcErrOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcErrOrderField* getUnmanagedStructP()
		{
			CThostFtdcErrOrderField* result = new CThostFtdcErrOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->OrderPriceType = OrderPriceType;
			result->Direction = Direction;
			CombOffsetFlag ? strcpy_s(result->CombOffsetFlag, netString2ConstChar(CombOffsetFlag)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->LimitPrice = LimitPrice;
			result->VolumeTotalOriginal = VolumeTotalOriginal;
			result->TimeCondition = TimeCondition;
			GTDDate ? strcpy_s(result->GTDDate, netString2ConstChar(GTDDate)) : false;
			result->VolumeCondition = VolumeCondition;
			result->MinVolume = MinVolume;
			result->ContingentCondition = ContingentCondition;
			result->StopPrice = StopPrice;
			result->ForceCloseReason = ForceCloseReason;
			result->IsAutoSuspend = IsAutoSuspend;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->RequestID = RequestID;
			result->UserForceClose = UserForceClose;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			result->IsSwapOrder = IsSwapOrder;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询错误报单操作
	/// </summary>
	public ref struct ErrorConditionalOrderField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///报单价格条件
		/// </summary>
		char OrderPriceType;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///组合开平标志
		/// </summary>
		System::String^ CombOffsetFlag;
		/// <summary>
		///组合投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量
		/// </summary>
		int VolumeTotalOriginal;
		/// <summary>
		///有效期类型
		/// </summary>
		char TimeCondition;
		/// <summary>
		///GTD日期
		/// </summary>
		System::String^ GTDDate;
		/// <summary>
		///成交量类型
		/// </summary>
		char VolumeCondition;
		/// <summary>
		///最小成交量
		/// </summary>
		int MinVolume;
		/// <summary>
		///触发条件
		/// </summary>
		char ContingentCondition;
		/// <summary>
		///止损价
		/// </summary>
		double StopPrice;
		/// <summary>
		///强平原因
		/// </summary>
		char ForceCloseReason;
		/// <summary>
		///自动挂起标志
		/// </summary>
		int IsAutoSuspend;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///报单提交状态
		/// </summary>
		char OrderSubmitStatus;
		/// <summary>
		///报单提示序号
		/// </summary>
		int NotifySequence;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///报单来源
		/// </summary>
		char OrderSource;
		/// <summary>
		///报单状态
		/// </summary>
		char OrderStatus;
		/// <summary>
		///报单类型
		/// </summary>
		char OrderType;
		/// <summary>
		///今成交数量
		/// </summary>
		int VolumeTraded;
		/// <summary>
		///剩余数量
		/// </summary>
		int VolumeTotal;
		/// <summary>
		///报单日期
		/// </summary>
		System::String^ InsertDate;
		/// <summary>
		///委托时间
		/// </summary>
		System::String^ InsertTime;
		/// <summary>
		///激活时间
		/// </summary>
		System::String^ ActiveTime;
		/// <summary>
		///挂起时间
		/// </summary>
		System::String^ SuspendTime;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///撤销时间
		/// </summary>
		System::String^ CancelTime;
		/// <summary>
		///最后修改交易所交易员代码
		/// </summary>
		System::String^ ActiveTraderID;
		/// <summary>
		///结算会员编号
		/// </summary>
		System::String^ ClearingPartID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///用户强评标志
		/// </summary>
		int UserForceClose;
		/// <summary>
		///操作用户代码
		/// </summary>
		System::String^ ActiveUserID;
		/// <summary>
		///经纪公司报单编号
		/// </summary>
		int BrokerOrderSeq;
		/// <summary>
		///相关报单
		/// </summary>
		System::String^ RelativeOrderSysID;
		/// <summary>
		///郑商所成交数量
		/// </summary>
		int ZCETotalTradedVolume;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///互换单标志
		/// </summary>
		int IsSwapOrder;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///资金账号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve3;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ErrorConditionalOrderField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcErrorConditionalOrderField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			OrderRef = char2NetString(source->OrderRef);
			UserID = char2NetString(source->UserID);
			OrderPriceType = source->OrderPriceType;
			Direction = source->Direction;
			CombOffsetFlag = char2NetString(source->CombOffsetFlag);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			LimitPrice = source->LimitPrice;
			VolumeTotalOriginal = source->VolumeTotalOriginal;
			TimeCondition = source->TimeCondition;
			GTDDate = char2NetString(source->GTDDate);
			VolumeCondition = source->VolumeCondition;
			MinVolume = source->MinVolume;
			ContingentCondition = source->ContingentCondition;
			StopPrice = source->StopPrice;
			ForceCloseReason = source->ForceCloseReason;
			IsAutoSuspend = source->IsAutoSuspend;
			BusinessUnit = char2NetString(source->BusinessUnit);
			RequestID = source->RequestID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ExchangeID = char2NetString(source->ExchangeID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			reserve2 = char2NetString(source->reserve2);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderSubmitStatus = source->OrderSubmitStatus;
			NotifySequence = source->NotifySequence;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OrderSysID = char2NetString(source->OrderSysID);
			OrderSource = source->OrderSource;
			OrderStatus = source->OrderStatus;
			OrderType = source->OrderType;
			VolumeTraded = source->VolumeTraded;
			VolumeTotal = source->VolumeTotal;
			InsertDate = char2NetString(source->InsertDate);
			InsertTime = char2NetString(source->InsertTime);
			ActiveTime = char2NetString(source->ActiveTime);
			SuspendTime = char2NetString(source->SuspendTime);
			UpdateTime = char2NetString(source->UpdateTime);
			CancelTime = char2NetString(source->CancelTime);
			ActiveTraderID = char2NetString(source->ActiveTraderID);
			ClearingPartID = char2NetString(source->ClearingPartID);
			SequenceNo = source->SequenceNo;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			UserProductInfo = char2NetString(source->UserProductInfo);
			StatusMsg = char2NetString(source->StatusMsg);
			UserForceClose = source->UserForceClose;
			ActiveUserID = char2NetString(source->ActiveUserID);
			BrokerOrderSeq = source->BrokerOrderSeq;
			RelativeOrderSysID = char2NetString(source->RelativeOrderSysID);
			ZCETotalTradedVolume = source->ZCETotalTradedVolume;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			IsSwapOrder = source->IsSwapOrder;
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			reserve3 = char2NetString(source->reserve3);
			MacAddress = char2NetString(source->MacAddress);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ErrorConditionalOrderField(CThostFtdcErrorConditionalOrderField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcErrorConditionalOrderField* getUnmanagedStructP()
		{
			CThostFtdcErrorConditionalOrderField* result = new CThostFtdcErrorConditionalOrderField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->OrderPriceType = OrderPriceType;
			result->Direction = Direction;
			CombOffsetFlag ? strcpy_s(result->CombOffsetFlag, netString2ConstChar(CombOffsetFlag)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->LimitPrice = LimitPrice;
			result->VolumeTotalOriginal = VolumeTotalOriginal;
			result->TimeCondition = TimeCondition;
			GTDDate ? strcpy_s(result->GTDDate, netString2ConstChar(GTDDate)) : false;
			result->VolumeCondition = VolumeCondition;
			result->MinVolume = MinVolume;
			result->ContingentCondition = ContingentCondition;
			result->StopPrice = StopPrice;
			result->ForceCloseReason = ForceCloseReason;
			result->IsAutoSuspend = IsAutoSuspend;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->RequestID = RequestID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			result->OrderSubmitStatus = OrderSubmitStatus;
			result->NotifySequence = NotifySequence;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->OrderSource = OrderSource;
			result->OrderStatus = OrderStatus;
			result->OrderType = OrderType;
			result->VolumeTraded = VolumeTraded;
			result->VolumeTotal = VolumeTotal;
			InsertDate ? strcpy_s(result->InsertDate, netString2ConstChar(InsertDate)) : false;
			InsertTime ? strcpy_s(result->InsertTime, netString2ConstChar(InsertTime)) : false;
			ActiveTime ? strcpy_s(result->ActiveTime, netString2ConstChar(ActiveTime)) : false;
			SuspendTime ? strcpy_s(result->SuspendTime, netString2ConstChar(SuspendTime)) : false;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			CancelTime ? strcpy_s(result->CancelTime, netString2ConstChar(CancelTime)) : false;
			ActiveTraderID ? strcpy_s(result->ActiveTraderID, netString2ConstChar(ActiveTraderID)) : false;
			ClearingPartID ? strcpy_s(result->ClearingPartID, netString2ConstChar(ClearingPartID)) : false;
			result->SequenceNo = SequenceNo;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			result->UserForceClose = UserForceClose;
			ActiveUserID ? strcpy_s(result->ActiveUserID, netString2ConstChar(ActiveUserID)) : false;
			result->BrokerOrderSeq = BrokerOrderSeq;
			RelativeOrderSysID ? strcpy_s(result->RelativeOrderSysID, netString2ConstChar(RelativeOrderSysID)) : false;
			result->ZCETotalTradedVolume = ZCETotalTradedVolume;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			result->IsSwapOrder = IsSwapOrder;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			reserve3 ? strcpy_s(result->reserve3, netString2ConstChar(reserve3)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询错误报单操作
	/// </summary>
	public ref struct QryErrOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryErrOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryErrOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryErrOrderActionField(CThostFtdcQryErrOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryErrOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcQryErrOrderActionField* result = new CThostFtdcQryErrOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///错误报单操作
	/// </summary>
	public ref struct ErrOrderActionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///报单操作引用
		/// </summary>
		int OrderActionRef;
		/// <summary>
		///报单引用
		/// </summary>
		System::String^ OrderRef;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///前置编号
		/// </summary>
		int FrontID;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///报单编号
		/// </summary>
		System::String^ OrderSysID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionFlag;
		/// <summary>
		///价格
		/// </summary>
		double LimitPrice;
		/// <summary>
		///数量变化
		/// </summary>
		int VolumeChange;
		/// <summary>
		///操作日期
		/// </summary>
		System::String^ ActionDate;
		/// <summary>
		///操作时间
		/// </summary>
		System::String^ ActionTime;
		/// <summary>
		///交易所交易员代码
		/// </summary>
		System::String^ TraderID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///本地报单编号
		/// </summary>
		System::String^ OrderLocalID;
		/// <summary>
		///操作本地编号
		/// </summary>
		System::String^ ActionLocalID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///客户代码
		/// </summary>
		System::String^ ClientID;
		/// <summary>
		///业务单元
		/// </summary>
		System::String^ BusinessUnit;
		/// <summary>
		///报单操作状态
		/// </summary>
		char OrderActionStatus;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///状态信息
		/// </summary>
		System::String^ StatusMsg;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///营业部编号
		/// </summary>
		System::String^ BranchID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ErrOrderActionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcErrOrderActionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OrderActionRef = source->OrderActionRef;
			OrderRef = char2NetString(source->OrderRef);
			RequestID = source->RequestID;
			FrontID = source->FrontID;
			SessionID = source->SessionID;
			ExchangeID = char2NetString(source->ExchangeID);
			OrderSysID = char2NetString(source->OrderSysID);
			ActionFlag = source->ActionFlag;
			LimitPrice = source->LimitPrice;
			VolumeChange = source->VolumeChange;
			ActionDate = char2NetString(source->ActionDate);
			ActionTime = char2NetString(source->ActionTime);
			TraderID = char2NetString(source->TraderID);
			InstallID = source->InstallID;
			OrderLocalID = char2NetString(source->OrderLocalID);
			ActionLocalID = char2NetString(source->ActionLocalID);
			ParticipantID = char2NetString(source->ParticipantID);
			ClientID = char2NetString(source->ClientID);
			BusinessUnit = char2NetString(source->BusinessUnit);
			OrderActionStatus = source->OrderActionStatus;
			UserID = char2NetString(source->UserID);
			StatusMsg = char2NetString(source->StatusMsg);
			reserve1 = char2NetString(source->reserve1);
			BranchID = char2NetString(source->BranchID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			reserve2 = char2NetString(source->reserve2);
			MacAddress = char2NetString(source->MacAddress);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			InstrumentID = char2NetString(source->InstrumentID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ErrOrderActionField(CThostFtdcErrOrderActionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcErrOrderActionField* getUnmanagedStructP()
		{
			CThostFtdcErrOrderActionField* result = new CThostFtdcErrOrderActionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OrderActionRef = OrderActionRef;
			OrderRef ? strcpy_s(result->OrderRef, netString2ConstChar(OrderRef)) : false;
			result->RequestID = RequestID;
			result->FrontID = FrontID;
			result->SessionID = SessionID;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			OrderSysID ? strcpy_s(result->OrderSysID, netString2ConstChar(OrderSysID)) : false;
			result->ActionFlag = ActionFlag;
			result->LimitPrice = LimitPrice;
			result->VolumeChange = VolumeChange;
			ActionDate ? strcpy_s(result->ActionDate, netString2ConstChar(ActionDate)) : false;
			ActionTime ? strcpy_s(result->ActionTime, netString2ConstChar(ActionTime)) : false;
			TraderID ? strcpy_s(result->TraderID, netString2ConstChar(TraderID)) : false;
			result->InstallID = InstallID;
			OrderLocalID ? strcpy_s(result->OrderLocalID, netString2ConstChar(OrderLocalID)) : false;
			ActionLocalID ? strcpy_s(result->ActionLocalID, netString2ConstChar(ActionLocalID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ClientID ? strcpy_s(result->ClientID, netString2ConstChar(ClientID)) : false;
			BusinessUnit ? strcpy_s(result->BusinessUnit, netString2ConstChar(BusinessUnit)) : false;
			result->OrderActionStatus = OrderActionStatus;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			StatusMsg ? strcpy_s(result->StatusMsg, netString2ConstChar(StatusMsg)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BranchID ? strcpy_s(result->BranchID, netString2ConstChar(BranchID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易所状态
	/// </summary>
	public ref struct QryExchangeSequenceField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryExchangeSequenceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryExchangeSequenceField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryExchangeSequenceField(CThostFtdcQryExchangeSequenceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryExchangeSequenceField* getUnmanagedStructP()
		{
			CThostFtdcQryExchangeSequenceField* result = new CThostFtdcQryExchangeSequenceField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所状态
	/// </summary>
	public ref struct ExchangeSequenceField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///序号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///合约交易状态
		/// </summary>
		char MarketStatus;

		/// <summary>
		/// 默认构造函数	</summary>
		ExchangeSequenceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcExchangeSequenceField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			SequenceNo = source->SequenceNo;
			MarketStatus = source->MarketStatus;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ExchangeSequenceField(CThostFtdcExchangeSequenceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcExchangeSequenceField* getUnmanagedStructP()
		{
			CThostFtdcExchangeSequenceField* result = new CThostFtdcExchangeSequenceField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->SequenceNo = SequenceNo;
			result->MarketStatus = MarketStatus;
			return result;
		}
	};

	/// <summary>
	///根据价格查询最大报单数量
	/// </summary>
	public ref struct QryMaxOrderVolumeWithPriceField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///开平标志
		/// </summary>
		char OffsetFlag;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///最大允许报单数量
		/// </summary>
		int MaxVolume;
		/// <summary>
		///报单价格
		/// </summary>
		double Price;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMaxOrderVolumeWithPriceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMaxOrderVolumeWithPriceField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			Direction = source->Direction;
			OffsetFlag = source->OffsetFlag;
			HedgeFlag = source->HedgeFlag;
			MaxVolume = source->MaxVolume;
			Price = source->Price;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMaxOrderVolumeWithPriceField(CThostFtdcQryMaxOrderVolumeWithPriceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMaxOrderVolumeWithPriceField* getUnmanagedStructP()
		{
			CThostFtdcQryMaxOrderVolumeWithPriceField* result = new CThostFtdcQryMaxOrderVolumeWithPriceField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->Direction = Direction;
			result->OffsetFlag = OffsetFlag;
			result->HedgeFlag = HedgeFlag;
			result->MaxVolume = MaxVolume;
			result->Price = Price;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司交易参数
	/// </summary>
	public ref struct QryBrokerTradingParamsField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBrokerTradingParamsField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBrokerTradingParamsField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			CurrencyID = char2NetString(source->CurrencyID);
			AccountID = char2NetString(source->AccountID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBrokerTradingParamsField(CThostFtdcQryBrokerTradingParamsField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBrokerTradingParamsField* getUnmanagedStructP()
		{
			CThostFtdcQryBrokerTradingParamsField* result = new CThostFtdcQryBrokerTradingParamsField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司交易参数
	/// </summary>
	public ref struct BrokerTradingParamsField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保证金价格类型
		/// </summary>
		char MarginPriceType;
		/// <summary>
		///盈亏算法
		/// </summary>
		char Algorithm;
		/// <summary>
		///可用是否包含平仓盈利
		/// </summary>
		char AvailIncludeCloseProfit;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///期权权利金价格类型
		/// </summary>
		char OptionRoyaltyPriceType;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerTradingParamsField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerTradingParamsField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			MarginPriceType = source->MarginPriceType;
			Algorithm = source->Algorithm;
			AvailIncludeCloseProfit = source->AvailIncludeCloseProfit;
			CurrencyID = char2NetString(source->CurrencyID);
			OptionRoyaltyPriceType = source->OptionRoyaltyPriceType;
			AccountID = char2NetString(source->AccountID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerTradingParamsField(CThostFtdcBrokerTradingParamsField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerTradingParamsField* getUnmanagedStructP()
		{
			CThostFtdcBrokerTradingParamsField* result = new CThostFtdcBrokerTradingParamsField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->MarginPriceType = MarginPriceType;
			result->Algorithm = Algorithm;
			result->AvailIncludeCloseProfit = AvailIncludeCloseProfit;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->OptionRoyaltyPriceType = OptionRoyaltyPriceType;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司交易算法
	/// </summary>
	public ref struct QryBrokerTradingAlgosField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBrokerTradingAlgosField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBrokerTradingAlgosField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBrokerTradingAlgosField(CThostFtdcQryBrokerTradingAlgosField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBrokerTradingAlgosField* getUnmanagedStructP()
		{
			CThostFtdcQryBrokerTradingAlgosField* result = new CThostFtdcQryBrokerTradingAlgosField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司交易算法
	/// </summary>
	public ref struct BrokerTradingAlgosField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///持仓处理算法编号
		/// </summary>
		char HandlePositionAlgoID;
		/// <summary>
		///寻找保证金率算法编号
		/// </summary>
		char FindMarginRateAlgoID;
		/// <summary>
		///资金处理算法编号
		/// </summary>
		char HandleTradingAccountAlgoID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerTradingAlgosField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerTradingAlgosField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve1 = char2NetString(source->reserve1);
			HandlePositionAlgoID = source->HandlePositionAlgoID;
			FindMarginRateAlgoID = source->FindMarginRateAlgoID;
			HandleTradingAccountAlgoID = source->HandleTradingAccountAlgoID;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerTradingAlgosField(CThostFtdcBrokerTradingAlgosField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerTradingAlgosField* getUnmanagedStructP()
		{
			CThostFtdcBrokerTradingAlgosField* result = new CThostFtdcBrokerTradingAlgosField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HandlePositionAlgoID = HandlePositionAlgoID;
			result->FindMarginRateAlgoID = FindMarginRateAlgoID;
			result->HandleTradingAccountAlgoID = HandleTradingAccountAlgoID;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询经纪公司资金
	/// </summary>
	public ref struct QueryBrokerDepositField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;

		/// <summary>
		/// 默认构造函数	</summary>
		QueryBrokerDepositField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQueryBrokerDepositField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ExchangeID = char2NetString(source->ExchangeID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QueryBrokerDepositField(CThostFtdcQueryBrokerDepositField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQueryBrokerDepositField* getUnmanagedStructP()
		{
			CThostFtdcQueryBrokerDepositField* result = new CThostFtdcQueryBrokerDepositField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			return result;
		}
	};

	/// <summary>
	///经纪公司资金
	/// </summary>
	public ref struct BrokerDepositField
	{
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///会员代码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///上次结算准备金
		/// </summary>
		double PreBalance;
		/// <summary>
		///当前保证金总额
		/// </summary>
		double CurrMargin;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///期货结算准备金
		/// </summary>
		double Balance;
		/// <summary>
		///入金金额
		/// </summary>
		double Deposit;
		/// <summary>
		///出金金额
		/// </summary>
		double Withdraw;
		/// <summary>
		///可提资金
		/// </summary>
		double Available;
		/// <summary>
		///基本准备金
		/// </summary>
		double Reserve;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerDepositField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerDepositField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			ParticipantID = char2NetString(source->ParticipantID);
			ExchangeID = char2NetString(source->ExchangeID);
			PreBalance = source->PreBalance;
			CurrMargin = source->CurrMargin;
			CloseProfit = source->CloseProfit;
			Balance = source->Balance;
			Deposit = source->Deposit;
			Withdraw = source->Withdraw;
			Available = source->Available;
			Reserve = source->Reserve;
			FrozenMargin = source->FrozenMargin;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerDepositField(CThostFtdcBrokerDepositField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerDepositField* getUnmanagedStructP()
		{
			CThostFtdcBrokerDepositField* result = new CThostFtdcBrokerDepositField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->PreBalance = PreBalance;
			result->CurrMargin = CurrMargin;
			result->CloseProfit = CloseProfit;
			result->Balance = Balance;
			result->Deposit = Deposit;
			result->Withdraw = Withdraw;
			result->Available = Available;
			result->Reserve = Reserve;
			result->FrozenMargin = FrozenMargin;
			return result;
		}
	};

	/// <summary>
	///查询保证金监管系统经纪公司密钥
	/// </summary>
	public ref struct QryCFMMCBrokerKeyField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCFMMCBrokerKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCFMMCBrokerKeyField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCFMMCBrokerKeyField(CThostFtdcQryCFMMCBrokerKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCFMMCBrokerKeyField* getUnmanagedStructP()
		{
			CThostFtdcQryCFMMCBrokerKeyField* result = new CThostFtdcQryCFMMCBrokerKeyField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///保证金监管系统经纪公司密钥
	/// </summary>
	public ref struct CFMMCBrokerKeyField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///经纪公司统一编码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///密钥生成日期
		/// </summary>
		System::String^ CreateDate;
		/// <summary>
		///密钥生成时间
		/// </summary>
		System::String^ CreateTime;
		/// <summary>
		///密钥编号
		/// </summary>
		int KeyID;
		/// <summary>
		///动态密钥
		/// </summary>
		System::String^ CurrentKey;
		/// <summary>
		///动态密钥类型
		/// </summary>
		char KeyKind;

		/// <summary>
		/// 默认构造函数	</summary>
		CFMMCBrokerKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCFMMCBrokerKeyField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ParticipantID = char2NetString(source->ParticipantID);
			CreateDate = char2NetString(source->CreateDate);
			CreateTime = char2NetString(source->CreateTime);
			KeyID = source->KeyID;
			CurrentKey = char2NetString(source->CurrentKey);
			KeyKind = source->KeyKind;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CFMMCBrokerKeyField(CThostFtdcCFMMCBrokerKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCFMMCBrokerKeyField* getUnmanagedStructP()
		{
			CThostFtdcCFMMCBrokerKeyField* result = new CThostFtdcCFMMCBrokerKeyField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			CreateDate ? strcpy_s(result->CreateDate, netString2ConstChar(CreateDate)) : false;
			CreateTime ? strcpy_s(result->CreateTime, netString2ConstChar(CreateTime)) : false;
			result->KeyID = KeyID;
			CurrentKey ? strcpy_s(result->CurrentKey, netString2ConstChar(CurrentKey)) : false;
			result->KeyKind = KeyKind;
			return result;
		}
	};

	/// <summary>
	///保证金监管系统经纪公司资金账户密钥
	/// </summary>
	public ref struct CFMMCTradingAccountKeyField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///经纪公司统一编码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///密钥编号
		/// </summary>
		int KeyID;
		/// <summary>
		///动态密钥
		/// </summary>
		System::String^ CurrentKey;

		/// <summary>
		/// 默认构造函数	</summary>
		CFMMCTradingAccountKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCFMMCTradingAccountKeyField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ParticipantID = char2NetString(source->ParticipantID);
			AccountID = char2NetString(source->AccountID);
			KeyID = source->KeyID;
			CurrentKey = char2NetString(source->CurrentKey);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CFMMCTradingAccountKeyField(CThostFtdcCFMMCTradingAccountKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCFMMCTradingAccountKeyField* getUnmanagedStructP()
		{
			CThostFtdcCFMMCTradingAccountKeyField* result = new CThostFtdcCFMMCTradingAccountKeyField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->KeyID = KeyID;
			CurrentKey ? strcpy_s(result->CurrentKey, netString2ConstChar(CurrentKey)) : false;
			return result;
		}
	};

	/// <summary>
	///请求查询保证金监管系统经纪公司资金账户密钥
	/// </summary>
	public ref struct QryCFMMCTradingAccountKeyField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCFMMCTradingAccountKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCFMMCTradingAccountKeyField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCFMMCTradingAccountKeyField(CThostFtdcQryCFMMCTradingAccountKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCFMMCTradingAccountKeyField* getUnmanagedStructP()
		{
			CThostFtdcQryCFMMCTradingAccountKeyField* result = new CThostFtdcQryCFMMCTradingAccountKeyField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///用户动态令牌参数
	/// </summary>
	public ref struct BrokerUserOTPParamField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///动态令牌提供商
		/// </summary>
		System::String^ OTPVendorsID;
		/// <summary>
		///动态令牌序列号
		/// </summary>
		System::String^ SerialNumber;
		/// <summary>
		///令牌密钥
		/// </summary>
		System::String^ AuthKey;
		/// <summary>
		///漂移值
		/// </summary>
		int LastDrift;
		/// <summary>
		///成功值
		/// </summary>
		int LastSuccess;
		/// <summary>
		///动态令牌类型
		/// </summary>
		char OTPType;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerUserOTPParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerUserOTPParamField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			OTPVendorsID = char2NetString(source->OTPVendorsID);
			SerialNumber = char2NetString(source->SerialNumber);
			AuthKey = char2NetString(source->AuthKey);
			LastDrift = source->LastDrift;
			LastSuccess = source->LastSuccess;
			OTPType = source->OTPType;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerUserOTPParamField(CThostFtdcBrokerUserOTPParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerUserOTPParamField* getUnmanagedStructP()
		{
			CThostFtdcBrokerUserOTPParamField* result = new CThostFtdcBrokerUserOTPParamField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			OTPVendorsID ? strcpy_s(result->OTPVendorsID, netString2ConstChar(OTPVendorsID)) : false;
			SerialNumber ? strcpy_s(result->SerialNumber, netString2ConstChar(SerialNumber)) : false;
			AuthKey ? strcpy_s(result->AuthKey, netString2ConstChar(AuthKey)) : false;
			result->LastDrift = LastDrift;
			result->LastSuccess = LastSuccess;
			result->OTPType = OTPType;
			return result;
		}
	};

	/// <summary>
	///手工同步用户动态令牌
	/// </summary>
	public ref struct ManualSyncBrokerUserOTPField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///动态令牌类型
		/// </summary>
		char OTPType;
		/// <summary>
		///第一个动态密码
		/// </summary>
		System::String^ FirstOTP;
		/// <summary>
		///第二个动态密码
		/// </summary>
		System::String^ SecondOTP;

		/// <summary>
		/// 默认构造函数	</summary>
		ManualSyncBrokerUserOTPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcManualSyncBrokerUserOTPField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			OTPType = source->OTPType;
			FirstOTP = char2NetString(source->FirstOTP);
			SecondOTP = char2NetString(source->SecondOTP);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ManualSyncBrokerUserOTPField(CThostFtdcManualSyncBrokerUserOTPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcManualSyncBrokerUserOTPField* getUnmanagedStructP()
		{
			CThostFtdcManualSyncBrokerUserOTPField* result = new CThostFtdcManualSyncBrokerUserOTPField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->OTPType = OTPType;
			FirstOTP ? strcpy_s(result->FirstOTP, netString2ConstChar(FirstOTP)) : false;
			SecondOTP ? strcpy_s(result->SecondOTP, netString2ConstChar(SecondOTP)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者手续费率模板
	/// </summary>
	public ref struct CommRateModelField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///手续费率模板代码
		/// </summary>
		System::String^ CommModelID;
		/// <summary>
		///模板名称
		/// </summary>
		System::String^ CommModelName;

		/// <summary>
		/// 默认构造函数	</summary>
		CommRateModelField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCommRateModelField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			CommModelID = char2NetString(source->CommModelID);
			CommModelName = char2NetString(source->CommModelName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CommRateModelField(CThostFtdcCommRateModelField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCommRateModelField* getUnmanagedStructP()
		{
			CThostFtdcCommRateModelField* result = new CThostFtdcCommRateModelField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			CommModelID ? strcpy_s(result->CommModelID, netString2ConstChar(CommModelID)) : false;
			CommModelName ? strcpy_s(result->CommModelName, netString2ConstChar(CommModelName)) : false;
			return result;
		}
	};

	/// <summary>
	///请求查询投资者手续费率模板
	/// </summary>
	public ref struct QryCommRateModelField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///手续费率模板代码
		/// </summary>
		System::String^ CommModelID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCommRateModelField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCommRateModelField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			CommModelID = char2NetString(source->CommModelID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCommRateModelField(CThostFtdcQryCommRateModelField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCommRateModelField* getUnmanagedStructP()
		{
			CThostFtdcQryCommRateModelField* result = new CThostFtdcQryCommRateModelField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			CommModelID ? strcpy_s(result->CommModelID, netString2ConstChar(CommModelID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者保证金率模板
	/// </summary>
	public ref struct MarginModelField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保证金率模板代码
		/// </summary>
		System::String^ MarginModelID;
		/// <summary>
		///模板名称
		/// </summary>
		System::String^ MarginModelName;

		/// <summary>
		/// 默认构造函数	</summary>
		MarginModelField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMarginModelField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			MarginModelID = char2NetString(source->MarginModelID);
			MarginModelName = char2NetString(source->MarginModelName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MarginModelField(CThostFtdcMarginModelField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMarginModelField* getUnmanagedStructP()
		{
			CThostFtdcMarginModelField* result = new CThostFtdcMarginModelField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			MarginModelID ? strcpy_s(result->MarginModelID, netString2ConstChar(MarginModelID)) : false;
			MarginModelName ? strcpy_s(result->MarginModelName, netString2ConstChar(MarginModelName)) : false;
			return result;
		}
	};

	/// <summary>
	///请求查询投资者保证金率模板
	/// </summary>
	public ref struct QryMarginModelField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///保证金率模板代码
		/// </summary>
		System::String^ MarginModelID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMarginModelField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMarginModelField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			MarginModelID = char2NetString(source->MarginModelID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMarginModelField(CThostFtdcQryMarginModelField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMarginModelField* getUnmanagedStructP()
		{
			CThostFtdcQryMarginModelField* result = new CThostFtdcQryMarginModelField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			MarginModelID ? strcpy_s(result->MarginModelID, netString2ConstChar(MarginModelID)) : false;
			return result;
		}
	};

	/// <summary>
	///仓单折抵信息
	/// </summary>
	public ref struct EWarrantOffsetField
	{
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		EWarrantOffsetField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcEWarrantOffsetField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve1 = char2NetString(source->reserve1);
			Direction = source->Direction;
			HedgeFlag = source->HedgeFlag;
			Volume = source->Volume;
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		EWarrantOffsetField(CThostFtdcEWarrantOffsetField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcEWarrantOffsetField* getUnmanagedStructP()
		{
			CThostFtdcEWarrantOffsetField* result = new CThostFtdcEWarrantOffsetField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->Direction = Direction;
			result->HedgeFlag = HedgeFlag;
			result->Volume = Volume;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询仓单折抵信息
	/// </summary>
	public ref struct QryEWarrantOffsetField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryEWarrantOffsetField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryEWarrantOffsetField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve1 = char2NetString(source->reserve1);
			InvestUnitID = char2NetString(source->InvestUnitID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryEWarrantOffsetField(CThostFtdcQryEWarrantOffsetField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryEWarrantOffsetField* getUnmanagedStructP()
		{
			CThostFtdcQryEWarrantOffsetField* result = new CThostFtdcQryEWarrantOffsetField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询投资者品种/跨品种保证金
	/// </summary>
	public ref struct QryInvestorProductGroupMarginField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///品种/跨品种标示
		/// </summary>
		System::String^ ProductGroupID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryInvestorProductGroupMarginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryInvestorProductGroupMarginField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			reserve1 = char2NetString(source->reserve1);
			HedgeFlag = source->HedgeFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			ProductGroupID = char2NetString(source->ProductGroupID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryInvestorProductGroupMarginField(CThostFtdcQryInvestorProductGroupMarginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryInvestorProductGroupMarginField* getUnmanagedStructP()
		{
			CThostFtdcQryInvestorProductGroupMarginField* result = new CThostFtdcQryInvestorProductGroupMarginField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->HedgeFlag = HedgeFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			ProductGroupID ? strcpy_s(result->ProductGroupID, netString2ConstChar(ProductGroupID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者品种/跨品种保证金
	/// </summary>
	public ref struct InvestorProductGroupMarginField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///多头冻结的保证金
		/// </summary>
		double LongFrozenMargin;
		/// <summary>
		///空头冻结的保证金
		/// </summary>
		double ShortFrozenMargin;
		/// <summary>
		///占用的保证金
		/// </summary>
		double UseMargin;
		/// <summary>
		///多头保证金
		/// </summary>
		double LongUseMargin;
		/// <summary>
		///空头保证金
		/// </summary>
		double ShortUseMargin;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchMargin;
		/// <summary>
		///交易所多头保证金
		/// </summary>
		double LongExchMargin;
		/// <summary>
		///交易所空头保证金
		/// </summary>
		double ShortExchMargin;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///折抵总金额
		/// </summary>
		double OffsetAmount;
		/// <summary>
		///多头折抵总金额
		/// </summary>
		double LongOffsetAmount;
		/// <summary>
		///空头折抵总金额
		/// </summary>
		double ShortOffsetAmount;
		/// <summary>
		///交易所折抵总金额
		/// </summary>
		double ExchOffsetAmount;
		/// <summary>
		///交易所多头折抵总金额
		/// </summary>
		double LongExchOffsetAmount;
		/// <summary>
		///交易所空头折抵总金额
		/// </summary>
		double ShortExchOffsetAmount;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///品种/跨品种标示
		/// </summary>
		System::String^ ProductGroupID;

		/// <summary>
		/// 默认构造函数	</summary>
		InvestorProductGroupMarginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcInvestorProductGroupMarginField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			FrozenMargin = source->FrozenMargin;
			LongFrozenMargin = source->LongFrozenMargin;
			ShortFrozenMargin = source->ShortFrozenMargin;
			UseMargin = source->UseMargin;
			LongUseMargin = source->LongUseMargin;
			ShortUseMargin = source->ShortUseMargin;
			ExchMargin = source->ExchMargin;
			LongExchMargin = source->LongExchMargin;
			ShortExchMargin = source->ShortExchMargin;
			CloseProfit = source->CloseProfit;
			FrozenCommission = source->FrozenCommission;
			Commission = source->Commission;
			FrozenCash = source->FrozenCash;
			CashIn = source->CashIn;
			PositionProfit = source->PositionProfit;
			OffsetAmount = source->OffsetAmount;
			LongOffsetAmount = source->LongOffsetAmount;
			ShortOffsetAmount = source->ShortOffsetAmount;
			ExchOffsetAmount = source->ExchOffsetAmount;
			LongExchOffsetAmount = source->LongExchOffsetAmount;
			ShortExchOffsetAmount = source->ShortExchOffsetAmount;
			HedgeFlag = source->HedgeFlag;
			ExchangeID = char2NetString(source->ExchangeID);
			InvestUnitID = char2NetString(source->InvestUnitID);
			ProductGroupID = char2NetString(source->ProductGroupID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		InvestorProductGroupMarginField(CThostFtdcInvestorProductGroupMarginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcInvestorProductGroupMarginField* getUnmanagedStructP()
		{
			CThostFtdcInvestorProductGroupMarginField* result = new CThostFtdcInvestorProductGroupMarginField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->FrozenMargin = FrozenMargin;
			result->LongFrozenMargin = LongFrozenMargin;
			result->ShortFrozenMargin = ShortFrozenMargin;
			result->UseMargin = UseMargin;
			result->LongUseMargin = LongUseMargin;
			result->ShortUseMargin = ShortUseMargin;
			result->ExchMargin = ExchMargin;
			result->LongExchMargin = LongExchMargin;
			result->ShortExchMargin = ShortExchMargin;
			result->CloseProfit = CloseProfit;
			result->FrozenCommission = FrozenCommission;
			result->Commission = Commission;
			result->FrozenCash = FrozenCash;
			result->CashIn = CashIn;
			result->PositionProfit = PositionProfit;
			result->OffsetAmount = OffsetAmount;
			result->LongOffsetAmount = LongOffsetAmount;
			result->ShortOffsetAmount = ShortOffsetAmount;
			result->ExchOffsetAmount = ExchOffsetAmount;
			result->LongExchOffsetAmount = LongExchOffsetAmount;
			result->ShortExchOffsetAmount = ShortExchOffsetAmount;
			result->HedgeFlag = HedgeFlag;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			ProductGroupID ? strcpy_s(result->ProductGroupID, netString2ConstChar(ProductGroupID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询监控中心用户令牌
	/// </summary>
	public ref struct QueryCFMMCTradingAccountTokenField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;

		/// <summary>
		/// 默认构造函数	</summary>
		QueryCFMMCTradingAccountTokenField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQueryCFMMCTradingAccountTokenField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			InvestUnitID = char2NetString(source->InvestUnitID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QueryCFMMCTradingAccountTokenField(CThostFtdcQueryCFMMCTradingAccountTokenField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQueryCFMMCTradingAccountTokenField* getUnmanagedStructP()
		{
			CThostFtdcQueryCFMMCTradingAccountTokenField* result = new CThostFtdcQueryCFMMCTradingAccountTokenField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			return result;
		}
	};

	/// <summary>
	///监控中心用户令牌
	/// </summary>
	public ref struct CFMMCTradingAccountTokenField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///经纪公司统一编码
		/// </summary>
		System::String^ ParticipantID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///密钥编号
		/// </summary>
		int KeyID;
		/// <summary>
		///动态令牌
		/// </summary>
		System::String^ Token;

		/// <summary>
		/// 默认构造函数	</summary>
		CFMMCTradingAccountTokenField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCFMMCTradingAccountTokenField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			ParticipantID = char2NetString(source->ParticipantID);
			AccountID = char2NetString(source->AccountID);
			KeyID = source->KeyID;
			Token = char2NetString(source->Token);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CFMMCTradingAccountTokenField(CThostFtdcCFMMCTradingAccountTokenField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCFMMCTradingAccountTokenField* getUnmanagedStructP()
		{
			CThostFtdcCFMMCTradingAccountTokenField* result = new CThostFtdcCFMMCTradingAccountTokenField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			ParticipantID ? strcpy_s(result->ParticipantID, netString2ConstChar(ParticipantID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->KeyID = KeyID;
			Token ? strcpy_s(result->Token, netString2ConstChar(Token)) : false;
			return result;
		}
	};

	/// <summary>
	///查询产品组
	/// </summary>
	public ref struct QryProductGroupField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryProductGroupField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryProductGroupField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryProductGroupField(CThostFtdcQryProductGroupField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryProductGroupField* getUnmanagedStructP()
		{
			CThostFtdcQryProductGroupField* result = new CThostFtdcQryProductGroupField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者品种/跨品种保证金产品组
	/// </summary>
	public ref struct ProductGroupField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve2;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///产品组代码
		/// </summary>
		System::String^ ProductGroupID;

		/// <summary>
		/// 默认构造函数	</summary>
		ProductGroupField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcProductGroupField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			ExchangeID = char2NetString(source->ExchangeID);
			reserve2 = char2NetString(source->reserve2);
			ProductID = char2NetString(source->ProductID);
			ProductGroupID = char2NetString(source->ProductGroupID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ProductGroupField(CThostFtdcProductGroupField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcProductGroupField* getUnmanagedStructP()
		{
			CThostFtdcProductGroupField* result = new CThostFtdcProductGroupField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			reserve2 ? strcpy_s(result->reserve2, netString2ConstChar(reserve2)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			ProductGroupID ? strcpy_s(result->ProductGroupID, netString2ConstChar(ProductGroupID)) : false;
			return result;
		}
	};

	/// <summary>
	///交易所公告
	/// </summary>
	public ref struct BulletinField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///公告编号
		/// </summary>
		int BulletinID;
		/// <summary>
		///序列号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///公告类型
		/// </summary>
		System::String^ NewsType;
		/// <summary>
		///紧急程度
		/// </summary>
		char NewsUrgency;
		/// <summary>
		///发送时间
		/// </summary>
		System::String^ SendTime;
		/// <summary>
		///消息摘要
		/// </summary>
		System::String^ Abstract;
		/// <summary>
		///消息来源
		/// </summary>
		System::String^ ComeFrom;
		/// <summary>
		///消息正文
		/// </summary>
		System::String^ Content;
		/// <summary>
		///WEB地址
		/// </summary>
		System::String^ URLLink;
		/// <summary>
		///市场代码
		/// </summary>
		System::String^ MarketID;

		/// <summary>
		/// 默认构造函数	</summary>
		BulletinField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBulletinField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			TradingDay = char2NetString(source->TradingDay);
			BulletinID = source->BulletinID;
			SequenceNo = source->SequenceNo;
			NewsType = char2NetString(source->NewsType);
			NewsUrgency = source->NewsUrgency;
			SendTime = char2NetString(source->SendTime);
			Abstract = char2NetString(source->Abstract);
			ComeFrom = char2NetString(source->ComeFrom);
			Content = char2NetString(source->Content);
			URLLink = char2NetString(source->URLLink);
			MarketID = char2NetString(source->MarketID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BulletinField(CThostFtdcBulletinField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBulletinField* getUnmanagedStructP()
		{
			CThostFtdcBulletinField* result = new CThostFtdcBulletinField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->BulletinID = BulletinID;
			result->SequenceNo = SequenceNo;
			NewsType ? strcpy_s(result->NewsType, netString2ConstChar(NewsType)) : false;
			result->NewsUrgency = NewsUrgency;
			SendTime ? strcpy_s(result->SendTime, netString2ConstChar(SendTime)) : false;
			Abstract ? strcpy_s(result->Abstract, netString2ConstChar(Abstract)) : false;
			ComeFrom ? strcpy_s(result->ComeFrom, netString2ConstChar(ComeFrom)) : false;
			Content ? strcpy_s(result->Content, netString2ConstChar(Content)) : false;
			URLLink ? strcpy_s(result->URLLink, netString2ConstChar(URLLink)) : false;
			MarketID ? strcpy_s(result->MarketID, netString2ConstChar(MarketID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询交易所公告
	/// </summary>
	public ref struct QryBulletinField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///公告编号
		/// </summary>
		int BulletinID;
		/// <summary>
		///序列号
		/// </summary>
		int SequenceNo;
		/// <summary>
		///公告类型
		/// </summary>
		System::String^ NewsType;
		/// <summary>
		///紧急程度
		/// </summary>
		char NewsUrgency;

		/// <summary>
		/// 默认构造函数	</summary>
		QryBulletinField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryBulletinField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			BulletinID = source->BulletinID;
			SequenceNo = source->SequenceNo;
			NewsType = char2NetString(source->NewsType);
			NewsUrgency = source->NewsUrgency;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryBulletinField(CThostFtdcQryBulletinField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryBulletinField* getUnmanagedStructP()
		{
			CThostFtdcQryBulletinField* result = new CThostFtdcQryBulletinField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->BulletinID = BulletinID;
			result->SequenceNo = SequenceNo;
			NewsType ? strcpy_s(result->NewsType, netString2ConstChar(NewsType)) : false;
			result->NewsUrgency = NewsUrgency;
			return result;
		}
	};

	/// <summary>
	///MulticastInstrument
	/// </summary>
	public ref struct MulticastInstrumentField
	{
		/// <summary>
		///主题号
		/// </summary>
		int TopicID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约编号
		/// </summary>
		int InstrumentNo;
		/// <summary>
		///基准价
		/// </summary>
		double CodePrice;
		/// <summary>
		///合约数量乘数
		/// </summary>
		int VolumeMultiple;
		/// <summary>
		///最小变动价位
		/// </summary>
		double PriceTick;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		MulticastInstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcMulticastInstrumentField* source)
		{
			TopicID = source->TopicID;
			reserve1 = char2NetString(source->reserve1);
			InstrumentNo = source->InstrumentNo;
			CodePrice = source->CodePrice;
			VolumeMultiple = source->VolumeMultiple;
			PriceTick = source->PriceTick;
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		MulticastInstrumentField(CThostFtdcMulticastInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcMulticastInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcMulticastInstrumentField* result = new CThostFtdcMulticastInstrumentField();
			result->TopicID = TopicID;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->InstrumentNo = InstrumentNo;
			result->CodePrice = CodePrice;
			result->VolumeMultiple = VolumeMultiple;
			result->PriceTick = PriceTick;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///QryMulticastInstrument
	/// </summary>
	public ref struct QryMulticastInstrumentField
	{
		/// <summary>
		///主题号
		/// </summary>
		int TopicID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryMulticastInstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryMulticastInstrumentField* source)
		{
			TopicID = source->TopicID;
			reserve1 = char2NetString(source->reserve1);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryMulticastInstrumentField(CThostFtdcQryMulticastInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryMulticastInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcQryMulticastInstrumentField* result = new CThostFtdcQryMulticastInstrumentField();
			result->TopicID = TopicID;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///App客户端权限分配
	/// </summary>
	public ref struct AppIDAuthAssignField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ AppID;
		/// <summary>
		///交易中心代码
		/// </summary>
		int DRIdentityID;

		/// <summary>
		/// 默认构造函数	</summary>
		AppIDAuthAssignField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAppIDAuthAssignField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AppID = char2NetString(source->AppID);
			DRIdentityID = source->DRIdentityID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AppIDAuthAssignField(CThostFtdcAppIDAuthAssignField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAppIDAuthAssignField* getUnmanagedStructP()
		{
			CThostFtdcAppIDAuthAssignField* result = new CThostFtdcAppIDAuthAssignField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AppID ? strcpy_s(result->AppID, netString2ConstChar(AppID)) : false;
			result->DRIdentityID = DRIdentityID;
			return result;
		}
	};

	/// <summary>
	///转帐开户请求
	/// </summary>
	public ref struct ReqOpenAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///汇钞标志
		/// </summary>
		char CashExchangeCode;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqOpenAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqOpenAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			CashExchangeCode = source->CashExchangeCode;
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			TID = source->TID;
			UserID = char2NetString(source->UserID);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqOpenAccountField(CThostFtdcReqOpenAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqOpenAccountField* getUnmanagedStructP()
		{
			CThostFtdcReqOpenAccountField* result = new CThostFtdcReqOpenAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->CashExchangeCode = CashExchangeCode;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->TID = TID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///转帐销户请求
	/// </summary>
	public ref struct ReqCancelAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///汇钞标志
		/// </summary>
		char CashExchangeCode;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqCancelAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqCancelAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			CashExchangeCode = source->CashExchangeCode;
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			TID = source->TID;
			UserID = char2NetString(source->UserID);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqCancelAccountField(CThostFtdcReqCancelAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqCancelAccountField* getUnmanagedStructP()
		{
			CThostFtdcReqCancelAccountField* result = new CThostFtdcReqCancelAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->CashExchangeCode = CashExchangeCode;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->TID = TID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///变更银行账户请求
	/// </summary>
	public ref struct ReqChangeAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///新银行帐号
		/// </summary>
		System::String^ NewBankAccount;
		/// <summary>
		///新银行密码
		/// </summary>
		System::String^ NewBankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqChangeAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqChangeAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			NewBankAccount = char2NetString(source->NewBankAccount);
			NewBankPassWord = char2NetString(source->NewBankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			BankAccType = source->BankAccType;
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			TID = source->TID;
			Digest = char2NetString(source->Digest);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqChangeAccountField(CThostFtdcReqChangeAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqChangeAccountField* getUnmanagedStructP()
		{
			CThostFtdcReqChangeAccountField* result = new CThostFtdcReqChangeAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			NewBankAccount ? strcpy_s(result->NewBankAccount, netString2ConstChar(NewBankAccount)) : false;
			NewBankPassWord ? strcpy_s(result->NewBankPassWord, netString2ConstChar(NewBankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->BankAccType = BankAccType;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			result->TID = TID;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///转账请求
	/// </summary>
	public ref struct ReqTransferField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///期货可取金额
		/// </summary>
		double FutureFetchAmount;
		/// <summary>
		///费用支付标志
		/// </summary>
		char FeePayFlag;
		/// <summary>
		///应收客户费用
		/// </summary>
		double CustFee;
		/// <summary>
		///应收期货公司费用
		/// </summary>
		double BrokerFee;
		/// <summary>
		///发送方给接收方的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///转账交易状态
		/// </summary>
		char TransferStatus;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqTransferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqTransferField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			FutureSerial = source->FutureSerial;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			FutureFetchAmount = source->FutureFetchAmount;
			FeePayFlag = source->FeePayFlag;
			CustFee = source->CustFee;
			BrokerFee = source->BrokerFee;
			Message = char2NetString(source->Message);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			TransferStatus = source->TransferStatus;
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqTransferField(CThostFtdcReqTransferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqTransferField* getUnmanagedStructP()
		{
			CThostFtdcReqTransferField* result = new CThostFtdcReqTransferField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->FutureSerial = FutureSerial;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			result->FutureFetchAmount = FutureFetchAmount;
			result->FeePayFlag = FeePayFlag;
			result->CustFee = CustFee;
			result->BrokerFee = BrokerFee;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->TransferStatus = TransferStatus;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///银行发起银行资金转期货响应
	/// </summary>
	public ref struct RspTransferField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///期货可取金额
		/// </summary>
		double FutureFetchAmount;
		/// <summary>
		///费用支付标志
		/// </summary>
		char FeePayFlag;
		/// <summary>
		///应收客户费用
		/// </summary>
		double CustFee;
		/// <summary>
		///应收期货公司费用
		/// </summary>
		double BrokerFee;
		/// <summary>
		///发送方给接收方的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///转账交易状态
		/// </summary>
		char TransferStatus;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		RspTransferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspTransferField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			FutureSerial = source->FutureSerial;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			FutureFetchAmount = source->FutureFetchAmount;
			FeePayFlag = source->FeePayFlag;
			CustFee = source->CustFee;
			BrokerFee = source->BrokerFee;
			Message = char2NetString(source->Message);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			TransferStatus = source->TransferStatus;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspTransferField(CThostFtdcRspTransferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspTransferField* getUnmanagedStructP()
		{
			CThostFtdcRspTransferField* result = new CThostFtdcRspTransferField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->FutureSerial = FutureSerial;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			result->FutureFetchAmount = FutureFetchAmount;
			result->FeePayFlag = FeePayFlag;
			result->CustFee = CustFee;
			result->BrokerFee = BrokerFee;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->TransferStatus = TransferStatus;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///冲正请求
	/// </summary>
	public ref struct ReqRepealField
	{
		/// <summary>
		///冲正时间间隔
		/// </summary>
		int RepealTimeInterval;
		/// <summary>
		///已经冲正次数
		/// </summary>
		int RepealedTimes;
		/// <summary>
		///银行冲正标志
		/// </summary>
		char BankRepealFlag;
		/// <summary>
		///期商冲正标志
		/// </summary>
		char BrokerRepealFlag;
		/// <summary>
		///被冲正平台流水号
		/// </summary>
		int PlateRepealSerial;
		/// <summary>
		///被冲正银行流水号
		/// </summary>
		System::String^ BankRepealSerial;
		/// <summary>
		///被冲正期货流水号
		/// </summary>
		int FutureRepealSerial;
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///期货可取金额
		/// </summary>
		double FutureFetchAmount;
		/// <summary>
		///费用支付标志
		/// </summary>
		char FeePayFlag;
		/// <summary>
		///应收客户费用
		/// </summary>
		double CustFee;
		/// <summary>
		///应收期货公司费用
		/// </summary>
		double BrokerFee;
		/// <summary>
		///发送方给接收方的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///转账交易状态
		/// </summary>
		char TransferStatus;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqRepealField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqRepealField* source)
		{
			RepealTimeInterval = source->RepealTimeInterval;
			RepealedTimes = source->RepealedTimes;
			BankRepealFlag = source->BankRepealFlag;
			BrokerRepealFlag = source->BrokerRepealFlag;
			PlateRepealSerial = source->PlateRepealSerial;
			BankRepealSerial = char2NetString(source->BankRepealSerial);
			FutureRepealSerial = source->FutureRepealSerial;
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			FutureSerial = source->FutureSerial;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			FutureFetchAmount = source->FutureFetchAmount;
			FeePayFlag = source->FeePayFlag;
			CustFee = source->CustFee;
			BrokerFee = source->BrokerFee;
			Message = char2NetString(source->Message);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			TransferStatus = source->TransferStatus;
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqRepealField(CThostFtdcReqRepealField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqRepealField* getUnmanagedStructP()
		{
			CThostFtdcReqRepealField* result = new CThostFtdcReqRepealField();
			result->RepealTimeInterval = RepealTimeInterval;
			result->RepealedTimes = RepealedTimes;
			result->BankRepealFlag = BankRepealFlag;
			result->BrokerRepealFlag = BrokerRepealFlag;
			result->PlateRepealSerial = PlateRepealSerial;
			BankRepealSerial ? strcpy_s(result->BankRepealSerial, netString2ConstChar(BankRepealSerial)) : false;
			result->FutureRepealSerial = FutureRepealSerial;
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->FutureSerial = FutureSerial;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			result->FutureFetchAmount = FutureFetchAmount;
			result->FeePayFlag = FeePayFlag;
			result->CustFee = CustFee;
			result->BrokerFee = BrokerFee;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->TransferStatus = TransferStatus;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///冲正响应
	/// </summary>
	public ref struct RspRepealField
	{
		/// <summary>
		///冲正时间间隔
		/// </summary>
		int RepealTimeInterval;
		/// <summary>
		///已经冲正次数
		/// </summary>
		int RepealedTimes;
		/// <summary>
		///银行冲正标志
		/// </summary>
		char BankRepealFlag;
		/// <summary>
		///期商冲正标志
		/// </summary>
		char BrokerRepealFlag;
		/// <summary>
		///被冲正平台流水号
		/// </summary>
		int PlateRepealSerial;
		/// <summary>
		///被冲正银行流水号
		/// </summary>
		System::String^ BankRepealSerial;
		/// <summary>
		///被冲正期货流水号
		/// </summary>
		int FutureRepealSerial;
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///期货可取金额
		/// </summary>
		double FutureFetchAmount;
		/// <summary>
		///费用支付标志
		/// </summary>
		char FeePayFlag;
		/// <summary>
		///应收客户费用
		/// </summary>
		double CustFee;
		/// <summary>
		///应收期货公司费用
		/// </summary>
		double BrokerFee;
		/// <summary>
		///发送方给接收方的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///转账交易状态
		/// </summary>
		char TransferStatus;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		RspRepealField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspRepealField* source)
		{
			RepealTimeInterval = source->RepealTimeInterval;
			RepealedTimes = source->RepealedTimes;
			BankRepealFlag = source->BankRepealFlag;
			BrokerRepealFlag = source->BrokerRepealFlag;
			PlateRepealSerial = source->PlateRepealSerial;
			BankRepealSerial = char2NetString(source->BankRepealSerial);
			FutureRepealSerial = source->FutureRepealSerial;
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			FutureSerial = source->FutureSerial;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			FutureFetchAmount = source->FutureFetchAmount;
			FeePayFlag = source->FeePayFlag;
			CustFee = source->CustFee;
			BrokerFee = source->BrokerFee;
			Message = char2NetString(source->Message);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			TransferStatus = source->TransferStatus;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspRepealField(CThostFtdcRspRepealField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspRepealField* getUnmanagedStructP()
		{
			CThostFtdcRspRepealField* result = new CThostFtdcRspRepealField();
			result->RepealTimeInterval = RepealTimeInterval;
			result->RepealedTimes = RepealedTimes;
			result->BankRepealFlag = BankRepealFlag;
			result->BrokerRepealFlag = BrokerRepealFlag;
			result->PlateRepealSerial = PlateRepealSerial;
			BankRepealSerial ? strcpy_s(result->BankRepealSerial, netString2ConstChar(BankRepealSerial)) : false;
			result->FutureRepealSerial = FutureRepealSerial;
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->FutureSerial = FutureSerial;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			result->FutureFetchAmount = FutureFetchAmount;
			result->FeePayFlag = FeePayFlag;
			result->CustFee = CustFee;
			result->BrokerFee = BrokerFee;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->TransferStatus = TransferStatus;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///查询账户信息请求
	/// </summary>
	public ref struct ReqQueryAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqQueryAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqQueryAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			FutureSerial = source->FutureSerial;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqQueryAccountField(CThostFtdcReqQueryAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqQueryAccountField* getUnmanagedStructP()
		{
			CThostFtdcReqQueryAccountField* result = new CThostFtdcReqQueryAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->FutureSerial = FutureSerial;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///查询账户信息响应
	/// </summary>
	public ref struct RspQueryAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///银行可用金额
		/// </summary>
		double BankUseAmount;
		/// <summary>
		///银行可取金额
		/// </summary>
		double BankFetchAmount;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		RspQueryAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspQueryAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			FutureSerial = source->FutureSerial;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			BankUseAmount = source->BankUseAmount;
			BankFetchAmount = source->BankFetchAmount;
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspQueryAccountField(CThostFtdcRspQueryAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspQueryAccountField* getUnmanagedStructP()
		{
			CThostFtdcRspQueryAccountField* result = new CThostFtdcRspQueryAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->FutureSerial = FutureSerial;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->BankUseAmount = BankUseAmount;
			result->BankFetchAmount = BankFetchAmount;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///期商签到签退
	/// </summary>
	public ref struct FutureSignIOField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;

		/// <summary>
		/// 默认构造函数	</summary>
		FutureSignIOField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcFutureSignIOField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Digest = char2NetString(source->Digest);
			CurrencyID = char2NetString(source->CurrencyID);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		FutureSignIOField(CThostFtdcFutureSignIOField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcFutureSignIOField* getUnmanagedStructP()
		{
			CThostFtdcFutureSignIOField* result = new CThostFtdcFutureSignIOField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			return result;
		}
	};

	/// <summary>
	///期商签到响应
	/// </summary>
	public ref struct RspFutureSignInField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///PIN密钥
		/// </summary>
		System::String^ PinKey;
		/// <summary>
		///MAC密钥
		/// </summary>
		System::String^ MacKey;

		/// <summary>
		/// 默认构造函数	</summary>
		RspFutureSignInField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspFutureSignInField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Digest = char2NetString(source->Digest);
			CurrencyID = char2NetString(source->CurrencyID);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			PinKey = char2NetString(source->PinKey);
			MacKey = char2NetString(source->MacKey);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspFutureSignInField(CThostFtdcRspFutureSignInField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspFutureSignInField* getUnmanagedStructP()
		{
			CThostFtdcRspFutureSignInField* result = new CThostFtdcRspFutureSignInField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			PinKey ? strcpy_s(result->PinKey, netString2ConstChar(PinKey)) : false;
			MacKey ? strcpy_s(result->MacKey, netString2ConstChar(MacKey)) : false;
			return result;
		}
	};

	/// <summary>
	///期商签退请求
	/// </summary>
	public ref struct ReqFutureSignOutField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqFutureSignOutField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqFutureSignOutField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Digest = char2NetString(source->Digest);
			CurrencyID = char2NetString(source->CurrencyID);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqFutureSignOutField(CThostFtdcReqFutureSignOutField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqFutureSignOutField* getUnmanagedStructP()
		{
			CThostFtdcReqFutureSignOutField* result = new CThostFtdcReqFutureSignOutField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			return result;
		}
	};

	/// <summary>
	///期商签退响应
	/// </summary>
	public ref struct RspFutureSignOutField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		RspFutureSignOutField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspFutureSignOutField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Digest = char2NetString(source->Digest);
			CurrencyID = char2NetString(source->CurrencyID);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspFutureSignOutField(CThostFtdcRspFutureSignOutField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspFutureSignOutField* getUnmanagedStructP()
		{
			CThostFtdcRspFutureSignOutField* result = new CThostFtdcRspFutureSignOutField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///查询指定流水号的交易结果请求
	/// </summary>
	public ref struct ReqQueryTradeResultBySerialField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///流水号
		/// </summary>
		int Reference;
		/// <summary>
		///本流水号发布者的机构类型
		/// </summary>
		char RefrenceIssureType;
		/// <summary>
		///本流水号发布者机构编码
		/// </summary>
		System::String^ RefrenceIssure;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqQueryTradeResultBySerialField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqQueryTradeResultBySerialField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			Reference = source->Reference;
			RefrenceIssureType = source->RefrenceIssureType;
			RefrenceIssure = char2NetString(source->RefrenceIssure);
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			Digest = char2NetString(source->Digest);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqQueryTradeResultBySerialField(CThostFtdcReqQueryTradeResultBySerialField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqQueryTradeResultBySerialField* getUnmanagedStructP()
		{
			CThostFtdcReqQueryTradeResultBySerialField* result = new CThostFtdcReqQueryTradeResultBySerialField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->Reference = Reference;
			result->RefrenceIssureType = RefrenceIssureType;
			RefrenceIssure ? strcpy_s(result->RefrenceIssure, netString2ConstChar(RefrenceIssure)) : false;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///查询指定流水号的交易结果响应
	/// </summary>
	public ref struct RspQueryTradeResultBySerialField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///流水号
		/// </summary>
		int Reference;
		/// <summary>
		///本流水号发布者的机构类型
		/// </summary>
		char RefrenceIssureType;
		/// <summary>
		///本流水号发布者机构编码
		/// </summary>
		System::String^ RefrenceIssure;
		/// <summary>
		///原始返回代码
		/// </summary>
		System::String^ OriginReturnCode;
		/// <summary>
		///原始返回码描述
		/// </summary>
		System::String^ OriginDescrInfoForReturnCode;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///转帐金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;

		/// <summary>
		/// 默认构造函数	</summary>
		RspQueryTradeResultBySerialField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspQueryTradeResultBySerialField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			Reference = source->Reference;
			RefrenceIssureType = source->RefrenceIssureType;
			RefrenceIssure = char2NetString(source->RefrenceIssure);
			OriginReturnCode = char2NetString(source->OriginReturnCode);
			OriginDescrInfoForReturnCode = char2NetString(source->OriginDescrInfoForReturnCode);
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			Digest = char2NetString(source->Digest);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspQueryTradeResultBySerialField(CThostFtdcRspQueryTradeResultBySerialField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspQueryTradeResultBySerialField* getUnmanagedStructP()
		{
			CThostFtdcRspQueryTradeResultBySerialField* result = new CThostFtdcRspQueryTradeResultBySerialField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			result->Reference = Reference;
			result->RefrenceIssureType = RefrenceIssureType;
			RefrenceIssure ? strcpy_s(result->RefrenceIssure, netString2ConstChar(RefrenceIssure)) : false;
			OriginReturnCode ? strcpy_s(result->OriginReturnCode, netString2ConstChar(OriginReturnCode)) : false;
			OriginDescrInfoForReturnCode ? strcpy_s(result->OriginDescrInfoForReturnCode, netString2ConstChar(OriginDescrInfoForReturnCode)) : false;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			return result;
		}
	};

	/// <summary>
	///日终文件就绪请求
	/// </summary>
	public ref struct ReqDayEndFileReadyField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///文件业务功能
		/// </summary>
		char FileBusinessCode;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqDayEndFileReadyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqDayEndFileReadyField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			FileBusinessCode = source->FileBusinessCode;
			Digest = char2NetString(source->Digest);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqDayEndFileReadyField(CThostFtdcReqDayEndFileReadyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqDayEndFileReadyField* getUnmanagedStructP()
		{
			CThostFtdcReqDayEndFileReadyField* result = new CThostFtdcReqDayEndFileReadyField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->FileBusinessCode = FileBusinessCode;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			return result;
		}
	};

	/// <summary>
	///返回结果
	/// </summary>
	public ref struct ReturnResultField
	{
		/// <summary>
		///返回代码
		/// </summary>
		System::String^ ReturnCode;
		/// <summary>
		///返回码描述
		/// </summary>
		System::String^ DescrInfoForReturnCode;

		/// <summary>
		/// 默认构造函数	</summary>
		ReturnResultField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReturnResultField* source)
		{
			ReturnCode = char2NetString(source->ReturnCode);
			DescrInfoForReturnCode = char2NetString(source->DescrInfoForReturnCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReturnResultField(CThostFtdcReturnResultField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReturnResultField* getUnmanagedStructP()
		{
			CThostFtdcReturnResultField* result = new CThostFtdcReturnResultField();
			ReturnCode ? strcpy_s(result->ReturnCode, netString2ConstChar(ReturnCode)) : false;
			DescrInfoForReturnCode ? strcpy_s(result->DescrInfoForReturnCode, netString2ConstChar(DescrInfoForReturnCode)) : false;
			return result;
		}
	};

	/// <summary>
	///验证期货资金密码
	/// </summary>
	public ref struct VerifyFuturePasswordField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		VerifyFuturePasswordField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcVerifyFuturePasswordField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			InstallID = source->InstallID;
			TID = source->TID;
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		VerifyFuturePasswordField(CThostFtdcVerifyFuturePasswordField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcVerifyFuturePasswordField* getUnmanagedStructP()
		{
			CThostFtdcVerifyFuturePasswordField* result = new CThostFtdcVerifyFuturePasswordField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			result->InstallID = InstallID;
			result->TID = TID;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///验证客户信息
	/// </summary>
	public ref struct VerifyCustInfoField
	{
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		VerifyCustInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcVerifyCustInfoField* source)
		{
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		VerifyCustInfoField(CThostFtdcVerifyCustInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcVerifyCustInfoField* getUnmanagedStructP()
		{
			CThostFtdcVerifyCustInfoField* result = new CThostFtdcVerifyCustInfoField();
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///验证期货资金密码和客户信息
	/// </summary>
	public ref struct VerifyFuturePasswordAndCustInfoField
	{
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		VerifyFuturePasswordAndCustInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcVerifyFuturePasswordAndCustInfoField* source)
		{
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			CurrencyID = char2NetString(source->CurrencyID);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		VerifyFuturePasswordAndCustInfoField(CThostFtdcVerifyFuturePasswordAndCustInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcVerifyFuturePasswordAndCustInfoField* getUnmanagedStructP()
		{
			CThostFtdcVerifyFuturePasswordAndCustInfoField* result = new CThostFtdcVerifyFuturePasswordAndCustInfoField();
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///验证期货资金密码和客户信息
	/// </summary>
	public ref struct DepositResultInformField
	{
		/// <summary>
		///出入金流水号，该流水号为银期报盘返回的流水号
		/// </summary>
		System::String^ DepositSeqNo;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///入金金额
		/// </summary>
		double Deposit;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///返回代码
		/// </summary>
		System::String^ ReturnCode;
		/// <summary>
		///返回码描述
		/// </summary>
		System::String^ DescrInfoForReturnCode;

		/// <summary>
		/// 默认构造函数	</summary>
		DepositResultInformField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcDepositResultInformField* source)
		{
			DepositSeqNo = char2NetString(source->DepositSeqNo);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			Deposit = source->Deposit;
			RequestID = source->RequestID;
			ReturnCode = char2NetString(source->ReturnCode);
			DescrInfoForReturnCode = char2NetString(source->DescrInfoForReturnCode);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		DepositResultInformField(CThostFtdcDepositResultInformField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcDepositResultInformField* getUnmanagedStructP()
		{
			CThostFtdcDepositResultInformField* result = new CThostFtdcDepositResultInformField();
			DepositSeqNo ? strcpy_s(result->DepositSeqNo, netString2ConstChar(DepositSeqNo)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->Deposit = Deposit;
			result->RequestID = RequestID;
			ReturnCode ? strcpy_s(result->ReturnCode, netString2ConstChar(ReturnCode)) : false;
			DescrInfoForReturnCode ? strcpy_s(result->DescrInfoForReturnCode, netString2ConstChar(DescrInfoForReturnCode)) : false;
			return result;
		}
	};

	/// <summary>
	///交易核心向银期报盘发出密钥同步请求
	/// </summary>
	public ref struct ReqSyncKeyField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易核心给银期报盘的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqSyncKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqSyncKeyField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Message = char2NetString(source->Message);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqSyncKeyField(CThostFtdcReqSyncKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqSyncKeyField* getUnmanagedStructP()
		{
			CThostFtdcReqSyncKeyField* result = new CThostFtdcReqSyncKeyField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			return result;
		}
	};

	/// <summary>
	///交易核心向银期报盘发出密钥同步响应
	/// </summary>
	public ref struct RspSyncKeyField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易核心给银期报盘的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		RspSyncKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspSyncKeyField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Message = char2NetString(source->Message);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspSyncKeyField(CThostFtdcRspSyncKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspSyncKeyField* getUnmanagedStructP()
		{
			CThostFtdcRspSyncKeyField* result = new CThostFtdcRspSyncKeyField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///查询账户信息通知
	/// </summary>
	public ref struct NotifyQueryAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///银行可用金额
		/// </summary>
		double BankUseAmount;
		/// <summary>
		///银行可取金额
		/// </summary>
		double BankFetchAmount;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		NotifyQueryAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcNotifyQueryAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustType = source->CustType;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			FutureSerial = source->FutureSerial;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			BankUseAmount = source->BankUseAmount;
			BankFetchAmount = source->BankFetchAmount;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		NotifyQueryAccountField(CThostFtdcNotifyQueryAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcNotifyQueryAccountField* getUnmanagedStructP()
		{
			CThostFtdcNotifyQueryAccountField* result = new CThostFtdcNotifyQueryAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->CustType = CustType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->FutureSerial = FutureSerial;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->BankUseAmount = BankUseAmount;
			result->BankFetchAmount = BankFetchAmount;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///银期转账交易流水表
	/// </summary>
	public ref struct TransferSerialField
	{
		/// <summary>
		///平台流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///交易发起方日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///交易代码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///会话编号
		/// </summary>
		int SessionID;
		/// <summary>
		///银行编码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构编码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///期货公司编码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///期货公司帐号类型
		/// </summary>
		char FutureAccType;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///期货公司流水号
		/// </summary>
		int FutureSerial;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///交易金额
		/// </summary>
		double TradeAmount;
		/// <summary>
		///应收客户费用
		/// </summary>
		double CustFee;
		/// <summary>
		///应收期货公司费用
		/// </summary>
		double BrokerFee;
		/// <summary>
		///有效标志
		/// </summary>
		char AvailabilityFlag;
		/// <summary>
		///操作员
		/// </summary>
		System::String^ OperatorCode;
		/// <summary>
		///新银行帐号
		/// </summary>
		System::String^ BankNewAccount;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		TransferSerialField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTransferSerialField* source)
		{
			PlateSerial = source->PlateSerial;
			TradeDate = char2NetString(source->TradeDate);
			TradingDay = char2NetString(source->TradingDay);
			TradeTime = char2NetString(source->TradeTime);
			TradeCode = char2NetString(source->TradeCode);
			SessionID = source->SessionID;
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BankAccType = source->BankAccType;
			BankAccount = char2NetString(source->BankAccount);
			BankSerial = char2NetString(source->BankSerial);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			FutureAccType = source->FutureAccType;
			AccountID = char2NetString(source->AccountID);
			InvestorID = char2NetString(source->InvestorID);
			FutureSerial = source->FutureSerial;
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CurrencyID = char2NetString(source->CurrencyID);
			TradeAmount = source->TradeAmount;
			CustFee = source->CustFee;
			BrokerFee = source->BrokerFee;
			AvailabilityFlag = source->AvailabilityFlag;
			OperatorCode = char2NetString(source->OperatorCode);
			BankNewAccount = char2NetString(source->BankNewAccount);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TransferSerialField(CThostFtdcTransferSerialField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTransferSerialField* getUnmanagedStructP()
		{
			CThostFtdcTransferSerialField* result = new CThostFtdcTransferSerialField();
			result->PlateSerial = PlateSerial;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			result->SessionID = SessionID;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			result->BankAccType = BankAccType;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			result->FutureAccType = FutureAccType;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->FutureSerial = FutureSerial;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->TradeAmount = TradeAmount;
			result->CustFee = CustFee;
			result->BrokerFee = BrokerFee;
			result->AvailabilityFlag = AvailabilityFlag;
			OperatorCode ? strcpy_s(result->OperatorCode, netString2ConstChar(OperatorCode)) : false;
			BankNewAccount ? strcpy_s(result->BankNewAccount, netString2ConstChar(BankNewAccount)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///请求查询转帐流水
	/// </summary>
	public ref struct QryTransferSerialField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///银行编码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryTransferSerialField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryTransferSerialField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			BankID = char2NetString(source->BankID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryTransferSerialField(CThostFtdcQryTransferSerialField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryTransferSerialField* getUnmanagedStructP()
		{
			CThostFtdcQryTransferSerialField* result = new CThostFtdcQryTransferSerialField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///期商签到通知
	/// </summary>
	public ref struct NotifyFutureSignInField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///PIN密钥
		/// </summary>
		System::String^ PinKey;
		/// <summary>
		///MAC密钥
		/// </summary>
		System::String^ MacKey;

		/// <summary>
		/// 默认构造函数	</summary>
		NotifyFutureSignInField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcNotifyFutureSignInField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Digest = char2NetString(source->Digest);
			CurrencyID = char2NetString(source->CurrencyID);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			PinKey = char2NetString(source->PinKey);
			MacKey = char2NetString(source->MacKey);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		NotifyFutureSignInField(CThostFtdcNotifyFutureSignInField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcNotifyFutureSignInField* getUnmanagedStructP()
		{
			CThostFtdcNotifyFutureSignInField* result = new CThostFtdcNotifyFutureSignInField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			PinKey ? strcpy_s(result->PinKey, netString2ConstChar(PinKey)) : false;
			MacKey ? strcpy_s(result->MacKey, netString2ConstChar(MacKey)) : false;
			return result;
		}
	};

	/// <summary>
	///期商签退通知
	/// </summary>
	public ref struct NotifyFutureSignOutField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		NotifyFutureSignOutField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcNotifyFutureSignOutField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Digest = char2NetString(source->Digest);
			CurrencyID = char2NetString(source->CurrencyID);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		NotifyFutureSignOutField(CThostFtdcNotifyFutureSignOutField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcNotifyFutureSignOutField* getUnmanagedStructP()
		{
			CThostFtdcNotifyFutureSignOutField* result = new CThostFtdcNotifyFutureSignOutField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///交易核心向银期报盘发出密钥同步处理结果的通知
	/// </summary>
	public ref struct NotifySyncKeyField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易核心给银期报盘的消息
		/// </summary>
		System::String^ Message;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///请求编号
		/// </summary>
		int RequestID;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		NotifySyncKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcNotifySyncKeyField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			InstallID = source->InstallID;
			UserID = char2NetString(source->UserID);
			Message = char2NetString(source->Message);
			DeviceID = char2NetString(source->DeviceID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			OperNo = char2NetString(source->OperNo);
			RequestID = source->RequestID;
			TID = source->TID;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		NotifySyncKeyField(CThostFtdcNotifySyncKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcNotifySyncKeyField* getUnmanagedStructP()
		{
			CThostFtdcNotifySyncKeyField* result = new CThostFtdcNotifySyncKeyField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			result->InstallID = InstallID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Message ? strcpy_s(result->Message, netString2ConstChar(Message)) : false;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->RequestID = RequestID;
			result->TID = TID;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///请求查询银期签约关系
	/// </summary>
	public ref struct QryAccountregisterField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///银行编码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构编码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryAccountregisterField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryAccountregisterField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryAccountregisterField(CThostFtdcQryAccountregisterField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryAccountregisterField* getUnmanagedStructP()
		{
			CThostFtdcQryAccountregisterField* result = new CThostFtdcQryAccountregisterField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///客户开销户信息表
	/// </summary>
	public ref struct AccountregisterField
	{
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDay;
		/// <summary>
		///银行编码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构编码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///期货公司编码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期货公司分支机构编码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///开销户类别
		/// </summary>
		char OpenOrDestroy;
		/// <summary>
		///签约日期
		/// </summary>
		System::String^ RegDate;
		/// <summary>
		///解约日期
		/// </summary>
		System::String^ OutDate;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		AccountregisterField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAccountregisterField* source)
		{
			TradeDay = char2NetString(source->TradeDay);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BankAccount = char2NetString(source->BankAccount);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			AccountID = char2NetString(source->AccountID);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			CustomerName = char2NetString(source->CustomerName);
			CurrencyID = char2NetString(source->CurrencyID);
			OpenOrDestroy = source->OpenOrDestroy;
			RegDate = char2NetString(source->RegDate);
			OutDate = char2NetString(source->OutDate);
			TID = source->TID;
			CustType = source->CustType;
			BankAccType = source->BankAccType;
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AccountregisterField(CThostFtdcAccountregisterField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAccountregisterField* getUnmanagedStructP()
		{
			CThostFtdcAccountregisterField* result = new CThostFtdcAccountregisterField();
			TradeDay ? strcpy_s(result->TradeDay, netString2ConstChar(TradeDay)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->OpenOrDestroy = OpenOrDestroy;
			RegDate ? strcpy_s(result->RegDate, netString2ConstChar(RegDate)) : false;
			OutDate ? strcpy_s(result->OutDate, netString2ConstChar(OutDate)) : false;
			result->TID = TID;
			result->CustType = CustType;
			result->BankAccType = BankAccType;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///银期开户信息
	/// </summary>
	public ref struct OpenAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///汇钞标志
		/// </summary>
		char CashExchangeCode;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		OpenAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcOpenAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			CashExchangeCode = source->CashExchangeCode;
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			TID = source->TID;
			UserID = char2NetString(source->UserID);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		OpenAccountField(CThostFtdcOpenAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcOpenAccountField* getUnmanagedStructP()
		{
			CThostFtdcOpenAccountField* result = new CThostFtdcOpenAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->CashExchangeCode = CashExchangeCode;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->TID = TID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///银期销户信息
	/// </summary>
	public ref struct CancelAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///汇钞标志
		/// </summary>
		char CashExchangeCode;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///渠道标志
		/// </summary>
		System::String^ DeviceID;
		/// <summary>
		///期货单位帐号类型
		/// </summary>
		char BankSecuAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///期货单位帐号
		/// </summary>
		System::String^ BankSecuAcc;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易柜员
		/// </summary>
		System::String^ OperNo;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///用户标识
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		CancelAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCancelAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			CashExchangeCode = source->CashExchangeCode;
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			DeviceID = char2NetString(source->DeviceID);
			BankSecuAccType = source->BankSecuAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankSecuAcc = char2NetString(source->BankSecuAcc);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			OperNo = char2NetString(source->OperNo);
			TID = source->TID;
			UserID = char2NetString(source->UserID);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CancelAccountField(CThostFtdcCancelAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCancelAccountField* getUnmanagedStructP()
		{
			CThostFtdcCancelAccountField* result = new CThostFtdcCancelAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->CashExchangeCode = CashExchangeCode;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			DeviceID ? strcpy_s(result->DeviceID, netString2ConstChar(DeviceID)) : false;
			result->BankSecuAccType = BankSecuAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			BankSecuAcc ? strcpy_s(result->BankSecuAcc, netString2ConstChar(BankSecuAcc)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			OperNo ? strcpy_s(result->OperNo, netString2ConstChar(OperNo)) : false;
			result->TID = TID;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///银期变更银行账号信息
	/// </summary>
	public ref struct ChangeAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///新银行帐号
		/// </summary>
		System::String^ NewBankAccount;
		/// <summary>
		///新银行密码
		/// </summary>
		System::String^ NewBankPassWord;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///银行密码标志
		/// </summary>
		char BankPwdFlag;
		/// <summary>
		///期货资金密码核对标志
		/// </summary>
		char SecuPwdFlag;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;
		/// <summary>
		///长客户姓名
		/// </summary>
		System::String^ LongCustomerName;

		/// <summary>
		/// 默认构造函数	</summary>
		ChangeAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcChangeAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			NewBankAccount = char2NetString(source->NewBankAccount);
			NewBankPassWord = char2NetString(source->NewBankPassWord);
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			BankAccType = source->BankAccType;
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			BankPwdFlag = source->BankPwdFlag;
			SecuPwdFlag = source->SecuPwdFlag;
			TID = source->TID;
			Digest = char2NetString(source->Digest);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
			LongCustomerName = char2NetString(source->LongCustomerName);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ChangeAccountField(CThostFtdcChangeAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcChangeAccountField* getUnmanagedStructP()
		{
			CThostFtdcChangeAccountField* result = new CThostFtdcChangeAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			NewBankAccount ? strcpy_s(result->NewBankAccount, netString2ConstChar(NewBankAccount)) : false;
			NewBankPassWord ? strcpy_s(result->NewBankPassWord, netString2ConstChar(NewBankPassWord)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			result->BankAccType = BankAccType;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			result->BankPwdFlag = BankPwdFlag;
			result->SecuPwdFlag = SecuPwdFlag;
			result->TID = TID;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			LongCustomerName ? strcpy_s(result->LongCustomerName, netString2ConstChar(LongCustomerName)) : false;
			return result;
		}
	};

	/// <summary>
	///二级代理操作员银期权限
	/// </summary>
	public ref struct SecAgentACIDMapField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///资金账户
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///境外中介机构资金帐号
		/// </summary>
		System::String^ BrokerSecAgentID;

		/// <summary>
		/// 默认构造函数	</summary>
		SecAgentACIDMapField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSecAgentACIDMapField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
			BrokerSecAgentID = char2NetString(source->BrokerSecAgentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SecAgentACIDMapField(CThostFtdcSecAgentACIDMapField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSecAgentACIDMapField* getUnmanagedStructP()
		{
			CThostFtdcSecAgentACIDMapField* result = new CThostFtdcSecAgentACIDMapField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			BrokerSecAgentID ? strcpy_s(result->BrokerSecAgentID, netString2ConstChar(BrokerSecAgentID)) : false;
			return result;
		}
	};

	/// <summary>
	///二级代理操作员银期权限查询
	/// </summary>
	public ref struct QrySecAgentACIDMapField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///资金账户
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///币种
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySecAgentACIDMapField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySecAgentACIDMapField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			AccountID = char2NetString(source->AccountID);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySecAgentACIDMapField(CThostFtdcQrySecAgentACIDMapField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySecAgentACIDMapField* getUnmanagedStructP()
		{
			CThostFtdcQrySecAgentACIDMapField* result = new CThostFtdcQrySecAgentACIDMapField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///灾备中心交易权限
	/// </summary>
	public ref struct UserRightsAssignField
	{
		/// <summary>
		///应用单元代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///交易中心代码
		/// </summary>
		int DRIdentityID;

		/// <summary>
		/// 默认构造函数	</summary>
		UserRightsAssignField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserRightsAssignField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			DRIdentityID = source->DRIdentityID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserRightsAssignField(CThostFtdcUserRightsAssignField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserRightsAssignField* getUnmanagedStructP()
		{
			CThostFtdcUserRightsAssignField* result = new CThostFtdcUserRightsAssignField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->DRIdentityID = DRIdentityID;
			return result;
		}
	};

	/// <summary>
	///经济公司是否有在本标示的交易权限
	/// </summary>
	public ref struct BrokerUserRightAssignField
	{
		/// <summary>
		///应用单元代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///交易中心代码
		/// </summary>
		int DRIdentityID;
		/// <summary>
		///能否交易
		/// </summary>
		int Tradeable;

		/// <summary>
		/// 默认构造函数	</summary>
		BrokerUserRightAssignField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcBrokerUserRightAssignField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			DRIdentityID = source->DRIdentityID;
			Tradeable = source->Tradeable;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		BrokerUserRightAssignField(CThostFtdcBrokerUserRightAssignField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcBrokerUserRightAssignField* getUnmanagedStructP()
		{
			CThostFtdcBrokerUserRightAssignField* result = new CThostFtdcBrokerUserRightAssignField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			result->DRIdentityID = DRIdentityID;
			result->Tradeable = Tradeable;
			return result;
		}
	};

	/// <summary>
	///灾备交易转换报文
	/// </summary>
	public ref struct DRTransferField
	{
		/// <summary>
		///原交易中心代码
		/// </summary>
		int OrigDRIdentityID;
		/// <summary>
		///目标交易中心代码
		/// </summary>
		int DestDRIdentityID;
		/// <summary>
		///原应用单元代码
		/// </summary>
		System::String^ OrigBrokerID;
		/// <summary>
		///目标易用单元代码
		/// </summary>
		System::String^ DestBrokerID;

		/// <summary>
		/// 默认构造函数	</summary>
		DRTransferField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcDRTransferField* source)
		{
			OrigDRIdentityID = source->OrigDRIdentityID;
			DestDRIdentityID = source->DestDRIdentityID;
			OrigBrokerID = char2NetString(source->OrigBrokerID);
			DestBrokerID = char2NetString(source->DestBrokerID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		DRTransferField(CThostFtdcDRTransferField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcDRTransferField* getUnmanagedStructP()
		{
			CThostFtdcDRTransferField* result = new CThostFtdcDRTransferField();
			result->OrigDRIdentityID = OrigDRIdentityID;
			result->DestDRIdentityID = DestDRIdentityID;
			OrigBrokerID ? strcpy_s(result->OrigBrokerID, netString2ConstChar(OrigBrokerID)) : false;
			DestBrokerID ? strcpy_s(result->DestBrokerID, netString2ConstChar(DestBrokerID)) : false;
			return result;
		}
	};

	/// <summary>
	///Fens用户信息
	/// </summary>
	public ref struct FensUserInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///登录模式
		/// </summary>
		char LoginMode;

		/// <summary>
		/// 默认构造函数	</summary>
		FensUserInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcFensUserInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			LoginMode = source->LoginMode;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		FensUserInfoField(CThostFtdcFensUserInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcFensUserInfoField* getUnmanagedStructP()
		{
			CThostFtdcFensUserInfoField* result = new CThostFtdcFensUserInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->LoginMode = LoginMode;
			return result;
		}
	};

	/// <summary>
	///当前银期所属交易中心
	/// </summary>
	public ref struct CurrTransferIdentityField
	{
		/// <summary>
		///交易中心代码
		/// </summary>
		int IdentityID;

		/// <summary>
		/// 默认构造函数	</summary>
		CurrTransferIdentityField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCurrTransferIdentityField* source)
		{
			IdentityID = source->IdentityID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CurrTransferIdentityField(CThostFtdcCurrTransferIdentityField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCurrTransferIdentityField* getUnmanagedStructP()
		{
			CThostFtdcCurrTransferIdentityField* result = new CThostFtdcCurrTransferIdentityField();
			result->IdentityID = IdentityID;
			return result;
		}
	};

	/// <summary>
	///禁止登录用户
	/// </summary>
	public ref struct LoginForbiddenUserField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		LoginForbiddenUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcLoginForbiddenUserField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			reserve1 = char2NetString(source->reserve1);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		LoginForbiddenUserField(CThostFtdcLoginForbiddenUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcLoginForbiddenUserField* getUnmanagedStructP()
		{
			CThostFtdcLoginForbiddenUserField* result = new CThostFtdcLoginForbiddenUserField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询禁止登录用户
	/// </summary>
	public ref struct QryLoginForbiddenUserField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryLoginForbiddenUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryLoginForbiddenUserField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryLoginForbiddenUserField(CThostFtdcQryLoginForbiddenUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryLoginForbiddenUserField* getUnmanagedStructP()
		{
			CThostFtdcQryLoginForbiddenUserField* result = new CThostFtdcQryLoginForbiddenUserField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///资金账户基本准备金
	/// </summary>
	public ref struct TradingAccountReserveField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///基本准备金
		/// </summary>
		double Reserve;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		TradingAccountReserveField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcTradingAccountReserveField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			Reserve = source->Reserve;
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		TradingAccountReserveField(CThostFtdcTradingAccountReserveField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcTradingAccountReserveField* getUnmanagedStructP()
		{
			CThostFtdcTradingAccountReserveField* result = new CThostFtdcTradingAccountReserveField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->Reserve = Reserve;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询禁止登录IP
	/// </summary>
	public ref struct QryLoginForbiddenIPField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		QryLoginForbiddenIPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryLoginForbiddenIPField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryLoginForbiddenIPField(CThostFtdcQryLoginForbiddenIPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryLoginForbiddenIPField* getUnmanagedStructP()
		{
			CThostFtdcQryLoginForbiddenIPField* result = new CThostFtdcQryLoginForbiddenIPField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询IP列表
	/// </summary>
	public ref struct QryIPListField
	{
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		QryIPListField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryIPListField* source)
		{
			reserve1 = char2NetString(source->reserve1);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryIPListField(CThostFtdcQryIPListField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryIPListField* getUnmanagedStructP()
		{
			CThostFtdcQryIPListField* result = new CThostFtdcQryIPListField();
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询用户下单权限分配表
	/// </summary>
	public ref struct QryUserRightsAssignField
	{
		/// <summary>
		///应用单元代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryUserRightsAssignField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryUserRightsAssignField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryUserRightsAssignField(CThostFtdcQryUserRightsAssignField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryUserRightsAssignField* getUnmanagedStructP()
		{
			CThostFtdcQryUserRightsAssignField* result = new CThostFtdcQryUserRightsAssignField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///银期预约开户确认请求
	/// </summary>
	public ref struct ReserveOpenAccountConfirmField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///期货密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///预约开户银行流水号
		/// </summary>
		System::String^ BankReserveOpenSeq;
		/// <summary>
		///预约开户日期
		/// </summary>
		System::String^ BookDate;
		/// <summary>
		///预约开户验证密码
		/// </summary>
		System::String^ BookPsw;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		ReserveOpenAccountConfirmField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReserveOpenAccountConfirmField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			TID = source->TID;
			AccountID = char2NetString(source->AccountID);
			Password = char2NetString(source->Password);
			BankReserveOpenSeq = char2NetString(source->BankReserveOpenSeq);
			BookDate = char2NetString(source->BookDate);
			BookPsw = char2NetString(source->BookPsw);
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReserveOpenAccountConfirmField(CThostFtdcReserveOpenAccountConfirmField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReserveOpenAccountConfirmField* getUnmanagedStructP()
		{
			CThostFtdcReserveOpenAccountConfirmField* result = new CThostFtdcReserveOpenAccountConfirmField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			result->TID = TID;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			BankReserveOpenSeq ? strcpy_s(result->BankReserveOpenSeq, netString2ConstChar(BankReserveOpenSeq)) : false;
			BookDate ? strcpy_s(result->BookDate, netString2ConstChar(BookDate)) : false;
			BookPsw ? strcpy_s(result->BookPsw, netString2ConstChar(BookPsw)) : false;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///银期预约开户
	/// </summary>
	public ref struct ReserveOpenAccountField
	{
		/// <summary>
		///业务功能码
		/// </summary>
		System::String^ TradeCode;
		/// <summary>
		///银行代码
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行分支机构代码
		/// </summary>
		System::String^ BankBranchID;
		/// <summary>
		///期商代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///期商分支机构代码
		/// </summary>
		System::String^ BrokerBranchID;
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradeDate;
		/// <summary>
		///交易时间
		/// </summary>
		System::String^ TradeTime;
		/// <summary>
		///银行流水号
		/// </summary>
		System::String^ BankSerial;
		/// <summary>
		///交易系统日期 
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///银期平台消息流水号
		/// </summary>
		int PlateSerial;
		/// <summary>
		///最后分片标志
		/// </summary>
		char LastFragment;
		/// <summary>
		///会话号
		/// </summary>
		int SessionID;
		/// <summary>
		///客户姓名
		/// </summary>
		System::String^ CustomerName;
		/// <summary>
		///证件类型
		/// </summary>
		char IdCardType;
		/// <summary>
		///证件号码
		/// </summary>
		System::String^ IdentifiedCardNo;
		/// <summary>
		///性别
		/// </summary>
		char Gender;
		/// <summary>
		///国家代码
		/// </summary>
		System::String^ CountryCode;
		/// <summary>
		///客户类型
		/// </summary>
		char CustType;
		/// <summary>
		///地址
		/// </summary>
		System::String^ Address;
		/// <summary>
		///邮编
		/// </summary>
		System::String^ ZipCode;
		/// <summary>
		///电话号码
		/// </summary>
		System::String^ Telephone;
		/// <summary>
		///手机
		/// </summary>
		System::String^ MobilePhone;
		/// <summary>
		///传真
		/// </summary>
		System::String^ Fax;
		/// <summary>
		///电子邮件
		/// </summary>
		System::String^ EMail;
		/// <summary>
		///资金账户状态
		/// </summary>
		char MoneyAccountStatus;
		/// <summary>
		///银行帐号
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行密码
		/// </summary>
		System::String^ BankPassWord;
		/// <summary>
		///安装编号
		/// </summary>
		int InstallID;
		/// <summary>
		///验证客户证件号码标志
		/// </summary>
		char VerifyCertNoFlag;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///摘要
		/// </summary>
		System::String^ Digest;
		/// <summary>
		///银行帐号类型
		/// </summary>
		char BankAccType;
		/// <summary>
		///期货公司银行编码
		/// </summary>
		System::String^ BrokerIDByBank;
		/// <summary>
		///交易ID
		/// </summary>
		int TID;
		/// <summary>
		///预约开户状态
		/// </summary>
		char ReserveOpenAccStas;
		/// <summary>
		///错误代码
		/// </summary>
		int ErrorID;
		/// <summary>
		///错误信息
		/// </summary>
		System::String^ ErrorMsg;

		/// <summary>
		/// 默认构造函数	</summary>
		ReserveOpenAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReserveOpenAccountField* source)
		{
			TradeCode = char2NetString(source->TradeCode);
			BankID = char2NetString(source->BankID);
			BankBranchID = char2NetString(source->BankBranchID);
			BrokerID = char2NetString(source->BrokerID);
			BrokerBranchID = char2NetString(source->BrokerBranchID);
			TradeDate = char2NetString(source->TradeDate);
			TradeTime = char2NetString(source->TradeTime);
			BankSerial = char2NetString(source->BankSerial);
			TradingDay = char2NetString(source->TradingDay);
			PlateSerial = source->PlateSerial;
			LastFragment = source->LastFragment;
			SessionID = source->SessionID;
			CustomerName = char2NetString(source->CustomerName);
			IdCardType = source->IdCardType;
			IdentifiedCardNo = char2NetString(source->IdentifiedCardNo);
			Gender = source->Gender;
			CountryCode = char2NetString(source->CountryCode);
			CustType = source->CustType;
			Address = char2NetString(source->Address);
			ZipCode = char2NetString(source->ZipCode);
			Telephone = char2NetString(source->Telephone);
			MobilePhone = char2NetString(source->MobilePhone);
			Fax = char2NetString(source->Fax);
			EMail = char2NetString(source->EMail);
			MoneyAccountStatus = source->MoneyAccountStatus;
			BankAccount = char2NetString(source->BankAccount);
			BankPassWord = char2NetString(source->BankPassWord);
			InstallID = source->InstallID;
			VerifyCertNoFlag = source->VerifyCertNoFlag;
			CurrencyID = char2NetString(source->CurrencyID);
			Digest = char2NetString(source->Digest);
			BankAccType = source->BankAccType;
			BrokerIDByBank = char2NetString(source->BrokerIDByBank);
			TID = source->TID;
			ReserveOpenAccStas = source->ReserveOpenAccStas;
			ErrorID = source->ErrorID;
			ErrorMsg = char2NetString(source->ErrorMsg);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReserveOpenAccountField(CThostFtdcReserveOpenAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReserveOpenAccountField* getUnmanagedStructP()
		{
			CThostFtdcReserveOpenAccountField* result = new CThostFtdcReserveOpenAccountField();
			TradeCode ? strcpy_s(result->TradeCode, netString2ConstChar(TradeCode)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankBranchID ? strcpy_s(result->BankBranchID, netString2ConstChar(BankBranchID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerBranchID ? strcpy_s(result->BrokerBranchID, netString2ConstChar(BrokerBranchID)) : false;
			TradeDate ? strcpy_s(result->TradeDate, netString2ConstChar(TradeDate)) : false;
			TradeTime ? strcpy_s(result->TradeTime, netString2ConstChar(TradeTime)) : false;
			BankSerial ? strcpy_s(result->BankSerial, netString2ConstChar(BankSerial)) : false;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->PlateSerial = PlateSerial;
			result->LastFragment = LastFragment;
			result->SessionID = SessionID;
			CustomerName ? strcpy_s(result->CustomerName, netString2ConstChar(CustomerName)) : false;
			result->IdCardType = IdCardType;
			IdentifiedCardNo ? strcpy_s(result->IdentifiedCardNo, netString2ConstChar(IdentifiedCardNo)) : false;
			result->Gender = Gender;
			CountryCode ? strcpy_s(result->CountryCode, netString2ConstChar(CountryCode)) : false;
			result->CustType = CustType;
			Address ? strcpy_s(result->Address, netString2ConstChar(Address)) : false;
			ZipCode ? strcpy_s(result->ZipCode, netString2ConstChar(ZipCode)) : false;
			Telephone ? strcpy_s(result->Telephone, netString2ConstChar(Telephone)) : false;
			MobilePhone ? strcpy_s(result->MobilePhone, netString2ConstChar(MobilePhone)) : false;
			Fax ? strcpy_s(result->Fax, netString2ConstChar(Fax)) : false;
			EMail ? strcpy_s(result->EMail, netString2ConstChar(EMail)) : false;
			result->MoneyAccountStatus = MoneyAccountStatus;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			BankPassWord ? strcpy_s(result->BankPassWord, netString2ConstChar(BankPassWord)) : false;
			result->InstallID = InstallID;
			result->VerifyCertNoFlag = VerifyCertNoFlag;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			Digest ? strcpy_s(result->Digest, netString2ConstChar(Digest)) : false;
			result->BankAccType = BankAccType;
			BrokerIDByBank ? strcpy_s(result->BrokerIDByBank, netString2ConstChar(BrokerIDByBank)) : false;
			result->TID = TID;
			result->ReserveOpenAccStas = ReserveOpenAccStas;
			result->ErrorID = ErrorID;
			ErrorMsg ? strcpy_s(result->ErrorMsg, netString2ConstChar(ErrorMsg)) : false;
			return result;
		}
	};

	/// <summary>
	///银行账户属性
	/// </summary>
	public ref struct AccountPropertyField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///银行统一标识类型
		/// </summary>
		System::String^ BankID;
		/// <summary>
		///银行账户
		/// </summary>
		System::String^ BankAccount;
		/// <summary>
		///银行账户的开户人名称
		/// </summary>
		System::String^ OpenName;
		/// <summary>
		///银行账户的开户行
		/// </summary>
		System::String^ OpenBank;
		/// <summary>
		///是否活跃
		/// </summary>
		int IsActive;
		/// <summary>
		///账户来源
		/// </summary>
		char AccountSourceType;
		/// <summary>
		///开户日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///注销日期
		/// </summary>
		System::String^ CancelDate;
		/// <summary>
		///录入员代码
		/// </summary>
		System::String^ OperatorID;
		/// <summary>
		///录入日期
		/// </summary>
		System::String^ OperateDate;
		/// <summary>
		///录入时间
		/// </summary>
		System::String^ OperateTime;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;

		/// <summary>
		/// 默认构造函数	</summary>
		AccountPropertyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAccountPropertyField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			BankID = char2NetString(source->BankID);
			BankAccount = char2NetString(source->BankAccount);
			OpenName = char2NetString(source->OpenName);
			OpenBank = char2NetString(source->OpenBank);
			IsActive = source->IsActive;
			AccountSourceType = source->AccountSourceType;
			OpenDate = char2NetString(source->OpenDate);
			CancelDate = char2NetString(source->CancelDate);
			OperatorID = char2NetString(source->OperatorID);
			OperateDate = char2NetString(source->OperateDate);
			OperateTime = char2NetString(source->OperateTime);
			CurrencyID = char2NetString(source->CurrencyID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AccountPropertyField(CThostFtdcAccountPropertyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAccountPropertyField* getUnmanagedStructP()
		{
			CThostFtdcAccountPropertyField* result = new CThostFtdcAccountPropertyField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			BankID ? strcpy_s(result->BankID, netString2ConstChar(BankID)) : false;
			BankAccount ? strcpy_s(result->BankAccount, netString2ConstChar(BankAccount)) : false;
			OpenName ? strcpy_s(result->OpenName, netString2ConstChar(OpenName)) : false;
			OpenBank ? strcpy_s(result->OpenBank, netString2ConstChar(OpenBank)) : false;
			result->IsActive = IsActive;
			result->AccountSourceType = AccountSourceType;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			CancelDate ? strcpy_s(result->CancelDate, netString2ConstChar(CancelDate)) : false;
			OperatorID ? strcpy_s(result->OperatorID, netString2ConstChar(OperatorID)) : false;
			OperateDate ? strcpy_s(result->OperateDate, netString2ConstChar(OperateDate)) : false;
			OperateTime ? strcpy_s(result->OperateTime, netString2ConstChar(OperateTime)) : false;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询当前交易中心
	/// </summary>
	public ref struct QryCurrDRIdentityField
	{
		/// <summary>
		///交易中心代码
		/// </summary>
		int DRIdentityID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCurrDRIdentityField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCurrDRIdentityField* source)
		{
			DRIdentityID = source->DRIdentityID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCurrDRIdentityField(CThostFtdcQryCurrDRIdentityField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCurrDRIdentityField* getUnmanagedStructP()
		{
			CThostFtdcQryCurrDRIdentityField* result = new CThostFtdcQryCurrDRIdentityField();
			result->DRIdentityID = DRIdentityID;
			return result;
		}
	};

	/// <summary>
	///当前交易中心
	/// </summary>
	public ref struct CurrDRIdentityField
	{
		/// <summary>
		///交易中心代码
		/// </summary>
		int DRIdentityID;

		/// <summary>
		/// 默认构造函数	</summary>
		CurrDRIdentityField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCurrDRIdentityField* source)
		{
			DRIdentityID = source->DRIdentityID;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CurrDRIdentityField(CThostFtdcCurrDRIdentityField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCurrDRIdentityField* getUnmanagedStructP()
		{
			CThostFtdcCurrDRIdentityField* result = new CThostFtdcCurrDRIdentityField();
			result->DRIdentityID = DRIdentityID;
			return result;
		}
	};

	/// <summary>
	///查询二级代理商资金校验模式
	/// </summary>
	public ref struct QrySecAgentCheckModeField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySecAgentCheckModeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySecAgentCheckModeField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySecAgentCheckModeField(CThostFtdcQrySecAgentCheckModeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySecAgentCheckModeField* getUnmanagedStructP()
		{
			CThostFtdcQrySecAgentCheckModeField* result = new CThostFtdcQrySecAgentCheckModeField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询二级代理商信息
	/// </summary>
	public ref struct QrySecAgentTradeInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///境外中介机构资金帐号
		/// </summary>
		System::String^ BrokerSecAgentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QrySecAgentTradeInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQrySecAgentTradeInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			BrokerSecAgentID = char2NetString(source->BrokerSecAgentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QrySecAgentTradeInfoField(CThostFtdcQrySecAgentTradeInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQrySecAgentTradeInfoField* getUnmanagedStructP()
		{
			CThostFtdcQrySecAgentTradeInfoField* result = new CThostFtdcQrySecAgentTradeInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			BrokerSecAgentID ? strcpy_s(result->BrokerSecAgentID, netString2ConstChar(BrokerSecAgentID)) : false;
			return result;
		}
	};

	/// <summary>
	///用户发出获取安全安全登陆方法请求
	/// </summary>
	public ref struct ReqUserAuthMethodField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqUserAuthMethodField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqUserAuthMethodField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqUserAuthMethodField(CThostFtdcReqUserAuthMethodField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqUserAuthMethodField* getUnmanagedStructP()
		{
			CThostFtdcReqUserAuthMethodField* result = new CThostFtdcReqUserAuthMethodField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///用户发出获取安全安全登陆方法回复
	/// </summary>
	public ref struct RspUserAuthMethodField
	{
		/// <summary>
		///当前可以用的认证模式
		/// </summary>
		int UsableAuthMethod;

		/// <summary>
		/// 默认构造函数	</summary>
		RspUserAuthMethodField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspUserAuthMethodField* source)
		{
			UsableAuthMethod = source->UsableAuthMethod;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspUserAuthMethodField(CThostFtdcRspUserAuthMethodField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspUserAuthMethodField* getUnmanagedStructP()
		{
			CThostFtdcRspUserAuthMethodField* result = new CThostFtdcRspUserAuthMethodField();
			result->UsableAuthMethod = UsableAuthMethod;
			return result;
		}
	};

	/// <summary>
	///用户发出获取安全安全登陆方法请求
	/// </summary>
	public ref struct ReqGenUserCaptchaField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqGenUserCaptchaField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqGenUserCaptchaField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqGenUserCaptchaField(CThostFtdcReqGenUserCaptchaField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqGenUserCaptchaField* getUnmanagedStructP()
		{
			CThostFtdcReqGenUserCaptchaField* result = new CThostFtdcReqGenUserCaptchaField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///生成的图片验证码信息
	/// </summary>
	public ref struct RspGenUserCaptchaField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///图片信息长度
		/// </summary>
		int CaptchaInfoLen;
		/// <summary>
		///图片信息
		/// </summary>
		System::String^ CaptchaInfo;

		/// <summary>
		/// 默认构造函数	</summary>
		RspGenUserCaptchaField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspGenUserCaptchaField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			CaptchaInfoLen = source->CaptchaInfoLen;
			CaptchaInfo = char2NetString(source->CaptchaInfo);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspGenUserCaptchaField(CThostFtdcRspGenUserCaptchaField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspGenUserCaptchaField* getUnmanagedStructP()
		{
			CThostFtdcRspGenUserCaptchaField* result = new CThostFtdcRspGenUserCaptchaField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->CaptchaInfoLen = CaptchaInfoLen;
			CaptchaInfo ? strcpy_s(result->CaptchaInfo, netString2ConstChar(CaptchaInfo)) : false;
			return result;
		}
	};

	/// <summary>
	///用户发出获取安全安全登陆方法请求
	/// </summary>
	public ref struct ReqGenUserTextField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqGenUserTextField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqGenUserTextField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqGenUserTextField(CThostFtdcReqGenUserTextField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqGenUserTextField* getUnmanagedStructP()
		{
			CThostFtdcReqGenUserTextField* result = new CThostFtdcReqGenUserTextField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			return result;
		}
	};

	/// <summary>
	///短信验证码生成的回复
	/// </summary>
	public ref struct RspGenUserTextField
	{
		/// <summary>
		///短信验证码序号
		/// </summary>
		int UserTextSeq;

		/// <summary>
		/// 默认构造函数	</summary>
		RspGenUserTextField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspGenUserTextField* source)
		{
			UserTextSeq = source->UserTextSeq;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspGenUserTextField(CThostFtdcRspGenUserTextField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspGenUserTextField* getUnmanagedStructP()
		{
			CThostFtdcRspGenUserTextField* result = new CThostFtdcRspGenUserTextField();
			result->UserTextSeq = UserTextSeq;
			return result;
		}
	};

	/// <summary>
	///用户发出带图形验证码的登录请求请求
	/// </summary>
	public ref struct ReqUserLoginWithCaptchaField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///接口端产品信息
		/// </summary>
		System::String^ InterfaceProductInfo;
		/// <summary>
		///协议信息
		/// </summary>
		System::String^ ProtocolInfo;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///登录备注
		/// </summary>
		System::String^ LoginRemark;
		/// <summary>
		///图形验证码的文字内容
		/// </summary>
		System::String^ Captcha;
		/// <summary>
		///终端IP端口
		/// </summary>
		int ClientIPPort;
		/// <summary>
		///终端IP地址
		/// </summary>
		System::String^ ClientIPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqUserLoginWithCaptchaField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqUserLoginWithCaptchaField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			Password = char2NetString(source->Password);
			UserProductInfo = char2NetString(source->UserProductInfo);
			InterfaceProductInfo = char2NetString(source->InterfaceProductInfo);
			ProtocolInfo = char2NetString(source->ProtocolInfo);
			MacAddress = char2NetString(source->MacAddress);
			reserve1 = char2NetString(source->reserve1);
			LoginRemark = char2NetString(source->LoginRemark);
			Captcha = char2NetString(source->Captcha);
			ClientIPPort = source->ClientIPPort;
			ClientIPAddress = char2NetString(source->ClientIPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqUserLoginWithCaptchaField(CThostFtdcReqUserLoginWithCaptchaField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqUserLoginWithCaptchaField* getUnmanagedStructP()
		{
			CThostFtdcReqUserLoginWithCaptchaField* result = new CThostFtdcReqUserLoginWithCaptchaField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			InterfaceProductInfo ? strcpy_s(result->InterfaceProductInfo, netString2ConstChar(InterfaceProductInfo)) : false;
			ProtocolInfo ? strcpy_s(result->ProtocolInfo, netString2ConstChar(ProtocolInfo)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			LoginRemark ? strcpy_s(result->LoginRemark, netString2ConstChar(LoginRemark)) : false;
			Captcha ? strcpy_s(result->Captcha, netString2ConstChar(Captcha)) : false;
			result->ClientIPPort = ClientIPPort;
			ClientIPAddress ? strcpy_s(result->ClientIPAddress, netString2ConstChar(ClientIPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///用户发出带短信验证码的登录请求请求
	/// </summary>
	public ref struct ReqUserLoginWithTextField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///接口端产品信息
		/// </summary>
		System::String^ InterfaceProductInfo;
		/// <summary>
		///协议信息
		/// </summary>
		System::String^ ProtocolInfo;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///登录备注
		/// </summary>
		System::String^ LoginRemark;
		/// <summary>
		///短信验证码文字内容
		/// </summary>
		System::String^ Text;
		/// <summary>
		///终端IP端口
		/// </summary>
		int ClientIPPort;
		/// <summary>
		///终端IP地址
		/// </summary>
		System::String^ ClientIPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqUserLoginWithTextField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqUserLoginWithTextField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			Password = char2NetString(source->Password);
			UserProductInfo = char2NetString(source->UserProductInfo);
			InterfaceProductInfo = char2NetString(source->InterfaceProductInfo);
			ProtocolInfo = char2NetString(source->ProtocolInfo);
			MacAddress = char2NetString(source->MacAddress);
			reserve1 = char2NetString(source->reserve1);
			LoginRemark = char2NetString(source->LoginRemark);
			Text = char2NetString(source->Text);
			ClientIPPort = source->ClientIPPort;
			ClientIPAddress = char2NetString(source->ClientIPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqUserLoginWithTextField(CThostFtdcReqUserLoginWithTextField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqUserLoginWithTextField* getUnmanagedStructP()
		{
			CThostFtdcReqUserLoginWithTextField* result = new CThostFtdcReqUserLoginWithTextField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			InterfaceProductInfo ? strcpy_s(result->InterfaceProductInfo, netString2ConstChar(InterfaceProductInfo)) : false;
			ProtocolInfo ? strcpy_s(result->ProtocolInfo, netString2ConstChar(ProtocolInfo)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			LoginRemark ? strcpy_s(result->LoginRemark, netString2ConstChar(LoginRemark)) : false;
			Text ? strcpy_s(result->Text, netString2ConstChar(Text)) : false;
			result->ClientIPPort = ClientIPPort;
			ClientIPAddress ? strcpy_s(result->ClientIPAddress, netString2ConstChar(ClientIPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///用户发出带动态验证码的登录请求请求
	/// </summary>
	public ref struct ReqUserLoginWithOTPField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///密码
		/// </summary>
		System::String^ Password;
		/// <summary>
		///用户端产品信息
		/// </summary>
		System::String^ UserProductInfo;
		/// <summary>
		///接口端产品信息
		/// </summary>
		System::String^ InterfaceProductInfo;
		/// <summary>
		///协议信息
		/// </summary>
		System::String^ ProtocolInfo;
		/// <summary>
		///Mac地址
		/// </summary>
		System::String^ MacAddress;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///登录备注
		/// </summary>
		System::String^ LoginRemark;
		/// <summary>
		///OTP密码
		/// </summary>
		System::String^ OTPPassword;
		/// <summary>
		///终端IP端口
		/// </summary>
		int ClientIPPort;
		/// <summary>
		///终端IP地址
		/// </summary>
		System::String^ ClientIPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqUserLoginWithOTPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqUserLoginWithOTPField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			Password = char2NetString(source->Password);
			UserProductInfo = char2NetString(source->UserProductInfo);
			InterfaceProductInfo = char2NetString(source->InterfaceProductInfo);
			ProtocolInfo = char2NetString(source->ProtocolInfo);
			MacAddress = char2NetString(source->MacAddress);
			reserve1 = char2NetString(source->reserve1);
			LoginRemark = char2NetString(source->LoginRemark);
			OTPPassword = char2NetString(source->OTPPassword);
			ClientIPPort = source->ClientIPPort;
			ClientIPAddress = char2NetString(source->ClientIPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqUserLoginWithOTPField(CThostFtdcReqUserLoginWithOTPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqUserLoginWithOTPField* getUnmanagedStructP()
		{
			CThostFtdcReqUserLoginWithOTPField* result = new CThostFtdcReqUserLoginWithOTPField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			Password ? strcpy_s(result->Password, netString2ConstChar(Password)) : false;
			UserProductInfo ? strcpy_s(result->UserProductInfo, netString2ConstChar(UserProductInfo)) : false;
			InterfaceProductInfo ? strcpy_s(result->InterfaceProductInfo, netString2ConstChar(InterfaceProductInfo)) : false;
			ProtocolInfo ? strcpy_s(result->ProtocolInfo, netString2ConstChar(ProtocolInfo)) : false;
			MacAddress ? strcpy_s(result->MacAddress, netString2ConstChar(MacAddress)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			LoginRemark ? strcpy_s(result->LoginRemark, netString2ConstChar(LoginRemark)) : false;
			OTPPassword ? strcpy_s(result->OTPPassword, netString2ConstChar(OTPPassword)) : false;
			result->ClientIPPort = ClientIPPort;
			ClientIPAddress ? strcpy_s(result->ClientIPAddress, netString2ConstChar(ClientIPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///api握手请求
	/// </summary>
	public ref struct ReqApiHandshakeField
	{
		/// <summary>
		///api与front通信密钥版本号
		/// </summary>
		System::String^ CryptoKeyVersion;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqApiHandshakeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqApiHandshakeField* source)
		{
			CryptoKeyVersion = char2NetString(source->CryptoKeyVersion);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqApiHandshakeField(CThostFtdcReqApiHandshakeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqApiHandshakeField* getUnmanagedStructP()
		{
			CThostFtdcReqApiHandshakeField* result = new CThostFtdcReqApiHandshakeField();
			CryptoKeyVersion ? strcpy_s(result->CryptoKeyVersion, netString2ConstChar(CryptoKeyVersion)) : false;
			return result;
		}
	};

	/// <summary>
	///front发给api的握手回复
	/// </summary>
	public ref struct RspApiHandshakeField
	{
		/// <summary>
		///握手回复数据长度
		/// </summary>
		int FrontHandshakeDataLen;
		/// <summary>
		///握手回复数据
		/// </summary>
		System::String^ FrontHandshakeData;
		/// <summary>
		///API认证是否开启
		/// </summary>
		int IsApiAuthEnabled;

		/// <summary>
		/// 默认构造函数	</summary>
		RspApiHandshakeField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRspApiHandshakeField* source)
		{
			FrontHandshakeDataLen = source->FrontHandshakeDataLen;
			FrontHandshakeData = char2NetString(source->FrontHandshakeData);
			IsApiAuthEnabled = source->IsApiAuthEnabled;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RspApiHandshakeField(CThostFtdcRspApiHandshakeField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRspApiHandshakeField* getUnmanagedStructP()
		{
			CThostFtdcRspApiHandshakeField* result = new CThostFtdcRspApiHandshakeField();
			result->FrontHandshakeDataLen = FrontHandshakeDataLen;
			FrontHandshakeData ? strcpy_s(result->FrontHandshakeData, netString2ConstChar(FrontHandshakeData)) : false;
			result->IsApiAuthEnabled = IsApiAuthEnabled;
			return result;
		}
	};

	/// <summary>
	///api给front的验证key的请求
	/// </summary>
	public ref struct ReqVerifyApiKeyField
	{
		/// <summary>
		///握手回复数据长度
		/// </summary>
		int ApiHandshakeDataLen;
		/// <summary>
		///握手回复数据
		/// </summary>
		System::String^ ApiHandshakeData;

		/// <summary>
		/// 默认构造函数	</summary>
		ReqVerifyApiKeyField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcReqVerifyApiKeyField* source)
		{
			ApiHandshakeDataLen = source->ApiHandshakeDataLen;
			ApiHandshakeData = char2NetString(source->ApiHandshakeData);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		ReqVerifyApiKeyField(CThostFtdcReqVerifyApiKeyField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcReqVerifyApiKeyField* getUnmanagedStructP()
		{
			CThostFtdcReqVerifyApiKeyField* result = new CThostFtdcReqVerifyApiKeyField();
			result->ApiHandshakeDataLen = ApiHandshakeDataLen;
			ApiHandshakeData ? strcpy_s(result->ApiHandshakeData, netString2ConstChar(ApiHandshakeData)) : false;
			return result;
		}
	};

	/// <summary>
	///操作员组织架构关系
	/// </summary>
	public ref struct DepartmentUserField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;

		/// <summary>
		/// 默认构造函数	</summary>
		DepartmentUserField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcDepartmentUserField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			InvestorRange = source->InvestorRange;
			InvestorID = char2NetString(source->InvestorID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		DepartmentUserField(CThostFtdcDepartmentUserField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcDepartmentUserField* getUnmanagedStructP()
		{
			CThostFtdcDepartmentUserField* result = new CThostFtdcDepartmentUserField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->InvestorRange = InvestorRange;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			return result;
		}
	};

	/// <summary>
	///查询频率，每秒查询比数
	/// </summary>
	public ref struct QueryFreqField
	{
		/// <summary>
		///查询频率
		/// </summary>
		int QueryFreq;

		/// <summary>
		/// 默认构造函数	</summary>
		QueryFreqField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQueryFreqField* source)
		{
			QueryFreq = source->QueryFreq;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QueryFreqField(CThostFtdcQueryFreqField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQueryFreqField* getUnmanagedStructP()
		{
			CThostFtdcQueryFreqField* result = new CThostFtdcQueryFreqField();
			result->QueryFreq = QueryFreq;
			return result;
		}
	};

	/// <summary>
	///禁止认证IP
	/// </summary>
	public ref struct AuthForbiddenIPField
	{
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		AuthForbiddenIPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAuthForbiddenIPField* source)
		{
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AuthForbiddenIPField(CThostFtdcAuthForbiddenIPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAuthForbiddenIPField* getUnmanagedStructP()
		{
			CThostFtdcAuthForbiddenIPField* result = new CThostFtdcAuthForbiddenIPField();
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询禁止认证IP
	/// </summary>
	public ref struct QryAuthForbiddenIPField
	{
		/// <summary>
		///IP地址
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		QryAuthForbiddenIPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryAuthForbiddenIPField* source)
		{
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryAuthForbiddenIPField(CThostFtdcQryAuthForbiddenIPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryAuthForbiddenIPField* getUnmanagedStructP()
		{
			CThostFtdcQryAuthForbiddenIPField* result = new CThostFtdcQryAuthForbiddenIPField();
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///换汇可提冻结
	/// </summary>
	public ref struct SyncDelaySwapFrozenField
	{
		/// <summary>
		///换汇流水号
		/// </summary>
		System::String^ DelaySwapSeqNo;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///源币种
		/// </summary>
		System::String^ FromCurrencyID;
		/// <summary>
		///源剩余换汇额度(可提冻结)
		/// </summary>
		double FromRemainSwap;
		/// <summary>
		///是否手工换汇
		/// </summary>
		int IsManualSwap;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDelaySwapFrozenField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDelaySwapFrozenField* source)
		{
			DelaySwapSeqNo = char2NetString(source->DelaySwapSeqNo);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			FromCurrencyID = char2NetString(source->FromCurrencyID);
			FromRemainSwap = source->FromRemainSwap;
			IsManualSwap = source->IsManualSwap;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDelaySwapFrozenField(CThostFtdcSyncDelaySwapFrozenField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDelaySwapFrozenField* getUnmanagedStructP()
		{
			CThostFtdcSyncDelaySwapFrozenField* result = new CThostFtdcSyncDelaySwapFrozenField();
			DelaySwapSeqNo ? strcpy_s(result->DelaySwapSeqNo, netString2ConstChar(DelaySwapSeqNo)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			FromCurrencyID ? strcpy_s(result->FromCurrencyID, netString2ConstChar(FromCurrencyID)) : false;
			result->FromRemainSwap = FromRemainSwap;
			result->IsManualSwap = IsManualSwap;
			return result;
		}
	};

	/// <summary>
	///用户系统信息
	/// </summary>
	public ref struct UserSystemInfoField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///用户端系统内部信息长度
		/// </summary>
		int ClientSystemInfoLen;
		/// <summary>
		///用户端系统内部信息
		/// </summary>
		System::String^ ClientSystemInfo;
		/// <summary>
		///保留的无效字段
		/// </summary>
		System::String^ reserve1;
		/// <summary>
		///终端IP端口
		/// </summary>
		int ClientIPPort;
		/// <summary>
		///登录成功时间
		/// </summary>
		System::String^ ClientLoginTime;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ ClientAppID;
		/// <summary>
		///用户公网IP
		/// </summary>
		System::String^ ClientPublicIP;
		/// <summary>
		///客户登录备注2
		/// </summary>
		System::String^ ClientLoginRemark;

		/// <summary>
		/// 默认构造函数	</summary>
		UserSystemInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcUserSystemInfoField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			UserID = char2NetString(source->UserID);
			ClientSystemInfoLen = source->ClientSystemInfoLen;
			ClientSystemInfo = char2NetString(source->ClientSystemInfo);
			reserve1 = char2NetString(source->reserve1);
			ClientIPPort = source->ClientIPPort;
			ClientLoginTime = char2NetString(source->ClientLoginTime);
			ClientAppID = char2NetString(source->ClientAppID);
			ClientPublicIP = char2NetString(source->ClientPublicIP);
			ClientLoginRemark = char2NetString(source->ClientLoginRemark);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		UserSystemInfoField(CThostFtdcUserSystemInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcUserSystemInfoField* getUnmanagedStructP()
		{
			CThostFtdcUserSystemInfoField* result = new CThostFtdcUserSystemInfoField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->ClientSystemInfoLen = ClientSystemInfoLen;
			ClientSystemInfo ? strcpy_s(result->ClientSystemInfo, netString2ConstChar(ClientSystemInfo)) : false;
			reserve1 ? strcpy_s(result->reserve1, netString2ConstChar(reserve1)) : false;
			result->ClientIPPort = ClientIPPort;
			ClientLoginTime ? strcpy_s(result->ClientLoginTime, netString2ConstChar(ClientLoginTime)) : false;
			ClientAppID ? strcpy_s(result->ClientAppID, netString2ConstChar(ClientAppID)) : false;
			ClientPublicIP ? strcpy_s(result->ClientPublicIP, netString2ConstChar(ClientPublicIP)) : false;
			ClientLoginRemark ? strcpy_s(result->ClientLoginRemark, netString2ConstChar(ClientLoginRemark)) : false;
			return result;
		}
	};

	/// <summary>
	///终端用户绑定信息
	/// </summary>
	public ref struct AuthUserIDField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ AppID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ UserID;
		/// <summary>
		///校验类型
		/// </summary>
		char AuthType;

		/// <summary>
		/// 默认构造函数	</summary>
		AuthUserIDField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAuthUserIDField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AppID = char2NetString(source->AppID);
			UserID = char2NetString(source->UserID);
			AuthType = source->AuthType;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AuthUserIDField(CThostFtdcAuthUserIDField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAuthUserIDField* getUnmanagedStructP()
		{
			CThostFtdcAuthUserIDField* result = new CThostFtdcAuthUserIDField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AppID ? strcpy_s(result->AppID, netString2ConstChar(AppID)) : false;
			UserID ? strcpy_s(result->UserID, netString2ConstChar(UserID)) : false;
			result->AuthType = AuthType;
			return result;
		}
	};

	/// <summary>
	///用户IP绑定信息
	/// </summary>
	public ref struct AuthIPField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///App代码
		/// </summary>
		System::String^ AppID;
		/// <summary>
		///用户代码
		/// </summary>
		System::String^ IPAddress;

		/// <summary>
		/// 默认构造函数	</summary>
		AuthIPField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcAuthIPField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AppID = char2NetString(source->AppID);
			IPAddress = char2NetString(source->IPAddress);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		AuthIPField(CThostFtdcAuthIPField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcAuthIPField* getUnmanagedStructP()
		{
			CThostFtdcAuthIPField* result = new CThostFtdcAuthIPField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AppID ? strcpy_s(result->AppID, netString2ConstChar(AppID)) : false;
			IPAddress ? strcpy_s(result->IPAddress, netString2ConstChar(IPAddress)) : false;
			return result;
		}
	};

	/// <summary>
	///查询分类合约
	/// </summary>
	public ref struct QryClassifiedInstrumentField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///合约交易状态
		/// </summary>
		char TradingType;
		/// <summary>
		///合约分类类型
		/// </summary>
		char ClassType;

		/// <summary>
		/// 默认构造函数	</summary>
		QryClassifiedInstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryClassifiedInstrumentField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeID = char2NetString(source->ExchangeID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			ProductID = char2NetString(source->ProductID);
			TradingType = source->TradingType;
			ClassType = source->ClassType;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryClassifiedInstrumentField(CThostFtdcQryClassifiedInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryClassifiedInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcQryClassifiedInstrumentField* result = new CThostFtdcQryClassifiedInstrumentField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			result->TradingType = TradingType;
			result->ClassType = ClassType;
			return result;
		}
	};

	/// <summary>
	///查询组合优惠比例
	/// </summary>
	public ref struct QryCombPromotionParamField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryCombPromotionParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryCombPromotionParamField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryCombPromotionParamField(CThostFtdcQryCombPromotionParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryCombPromotionParamField* getUnmanagedStructP()
		{
			CThostFtdcQryCombPromotionParamField* result = new CThostFtdcQryCombPromotionParamField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///组合优惠比例
	/// </summary>
	public ref struct CombPromotionParamField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投机套保标志
		/// </summary>
		System::String^ CombHedgeFlag;
		/// <summary>
		///期权组合保证金比例
		/// </summary>
		double Xparameter;

		/// <summary>
		/// 默认构造函数	</summary>
		CombPromotionParamField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcCombPromotionParamField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
			CombHedgeFlag = char2NetString(source->CombHedgeFlag);
			Xparameter = source->Xparameter;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		CombPromotionParamField(CThostFtdcCombPromotionParamField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcCombPromotionParamField* getUnmanagedStructP()
		{
			CThostFtdcCombPromotionParamField* result = new CThostFtdcCombPromotionParamField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			CombHedgeFlag ? strcpy_s(result->CombHedgeFlag, netString2ConstChar(CombHedgeFlag)) : false;
			result->Xparameter = Xparameter;
			return result;
		}
	};

	/// <summary>
	///投资者风险结算持仓查询
	/// </summary>
	public ref struct QryRiskSettleInvstPositionField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryRiskSettleInvstPositionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryRiskSettleInvstPositionField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			InstrumentID = char2NetString(source->InstrumentID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryRiskSettleInvstPositionField(CThostFtdcQryRiskSettleInvstPositionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryRiskSettleInvstPositionField* getUnmanagedStructP()
		{
			CThostFtdcQryRiskSettleInvstPositionField* result = new CThostFtdcQryRiskSettleInvstPositionField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			return result;
		}
	};

	/// <summary>
	///风险结算产品查询
	/// </summary>
	public ref struct QryRiskSettleProductStatusField
	{
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;

		/// <summary>
		/// 默认构造函数	</summary>
		QryRiskSettleProductStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcQryRiskSettleProductStatusField* source)
		{
			ProductID = char2NetString(source->ProductID);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		QryRiskSettleProductStatusField(CThostFtdcQryRiskSettleProductStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcQryRiskSettleProductStatusField* getUnmanagedStructP()
		{
			CThostFtdcQryRiskSettleProductStatusField* result = new CThostFtdcQryRiskSettleProductStatusField();
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			return result;
		}
	};

	/// <summary>
	///投资者风险结算持仓
	/// </summary>
	public ref struct RiskSettleInvstPositionField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///持仓多空方向
		/// </summary>
		char PosiDirection;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///持仓日期
		/// </summary>
		char PositionDate;
		/// <summary>
		///上日持仓
		/// </summary>
		int YdPosition;
		/// <summary>
		///今日持仓
		/// </summary>
		int Position;
		/// <summary>
		///多头冻结
		/// </summary>
		int LongFrozen;
		/// <summary>
		///空头冻结
		/// </summary>
		int ShortFrozen;
		/// <summary>
		///开仓冻结金额
		/// </summary>
		double LongFrozenAmount;
		/// <summary>
		///开仓冻结金额
		/// </summary>
		double ShortFrozenAmount;
		/// <summary>
		///开仓量
		/// </summary>
		int OpenVolume;
		/// <summary>
		///平仓量
		/// </summary>
		int CloseVolume;
		/// <summary>
		///开仓金额
		/// </summary>
		double OpenAmount;
		/// <summary>
		///平仓金额
		/// </summary>
		double CloseAmount;
		/// <summary>
		///持仓成本
		/// </summary>
		double PositionCost;
		/// <summary>
		///上次占用的保证金
		/// </summary>
		double PreMargin;
		/// <summary>
		///占用的保证金
		/// </summary>
		double UseMargin;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///开仓成本
		/// </summary>
		double OpenCost;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchangeMargin;
		/// <summary>
		///组合成交形成的持仓
		/// </summary>
		int CombPosition;
		/// <summary>
		///组合多头冻结
		/// </summary>
		int CombLongFrozen;
		/// <summary>
		///组合空头冻结
		/// </summary>
		int CombShortFrozen;
		/// <summary>
		///逐日盯市平仓盈亏
		/// </summary>
		double CloseProfitByDate;
		/// <summary>
		///逐笔对冲平仓盈亏
		/// </summary>
		double CloseProfitByTrade;
		/// <summary>
		///今日持仓
		/// </summary>
		int TodayPosition;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///执行冻结
		/// </summary>
		int StrikeFrozen;
		/// <summary>
		///执行冻结金额
		/// </summary>
		double StrikeFrozenAmount;
		/// <summary>
		///放弃执行冻结
		/// </summary>
		int AbandonFrozen;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///执行冻结的昨仓
		/// </summary>
		int YdStrikeFrozen;
		/// <summary>
		///投资单元代码
		/// </summary>
		System::String^ InvestUnitID;
		/// <summary>
		///大商所持仓成本差值，只有大商所使用
		/// </summary>
		double PositionCostOffset;
		/// <summary>
		///tas持仓手数
		/// </summary>
		int TasPosition;
		/// <summary>
		///tas持仓成本
		/// </summary>
		double TasPositionCost;

		/// <summary>
		/// 默认构造函数	</summary>
		RiskSettleInvstPositionField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRiskSettleInvstPositionField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			PosiDirection = source->PosiDirection;
			HedgeFlag = source->HedgeFlag;
			PositionDate = source->PositionDate;
			YdPosition = source->YdPosition;
			Position = source->Position;
			LongFrozen = source->LongFrozen;
			ShortFrozen = source->ShortFrozen;
			LongFrozenAmount = source->LongFrozenAmount;
			ShortFrozenAmount = source->ShortFrozenAmount;
			OpenVolume = source->OpenVolume;
			CloseVolume = source->CloseVolume;
			OpenAmount = source->OpenAmount;
			CloseAmount = source->CloseAmount;
			PositionCost = source->PositionCost;
			PreMargin = source->PreMargin;
			UseMargin = source->UseMargin;
			FrozenMargin = source->FrozenMargin;
			FrozenCash = source->FrozenCash;
			FrozenCommission = source->FrozenCommission;
			CashIn = source->CashIn;
			Commission = source->Commission;
			CloseProfit = source->CloseProfit;
			PositionProfit = source->PositionProfit;
			PreSettlementPrice = source->PreSettlementPrice;
			SettlementPrice = source->SettlementPrice;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			OpenCost = source->OpenCost;
			ExchangeMargin = source->ExchangeMargin;
			CombPosition = source->CombPosition;
			CombLongFrozen = source->CombLongFrozen;
			CombShortFrozen = source->CombShortFrozen;
			CloseProfitByDate = source->CloseProfitByDate;
			CloseProfitByTrade = source->CloseProfitByTrade;
			TodayPosition = source->TodayPosition;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			StrikeFrozen = source->StrikeFrozen;
			StrikeFrozenAmount = source->StrikeFrozenAmount;
			AbandonFrozen = source->AbandonFrozen;
			ExchangeID = char2NetString(source->ExchangeID);
			YdStrikeFrozen = source->YdStrikeFrozen;
			InvestUnitID = char2NetString(source->InvestUnitID);
			PositionCostOffset = source->PositionCostOffset;
			TasPosition = source->TasPosition;
			TasPositionCost = source->TasPositionCost;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RiskSettleInvstPositionField(CThostFtdcRiskSettleInvstPositionField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRiskSettleInvstPositionField* getUnmanagedStructP()
		{
			CThostFtdcRiskSettleInvstPositionField* result = new CThostFtdcRiskSettleInvstPositionField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->PosiDirection = PosiDirection;
			result->HedgeFlag = HedgeFlag;
			result->PositionDate = PositionDate;
			result->YdPosition = YdPosition;
			result->Position = Position;
			result->LongFrozen = LongFrozen;
			result->ShortFrozen = ShortFrozen;
			result->LongFrozenAmount = LongFrozenAmount;
			result->ShortFrozenAmount = ShortFrozenAmount;
			result->OpenVolume = OpenVolume;
			result->CloseVolume = CloseVolume;
			result->OpenAmount = OpenAmount;
			result->CloseAmount = CloseAmount;
			result->PositionCost = PositionCost;
			result->PreMargin = PreMargin;
			result->UseMargin = UseMargin;
			result->FrozenMargin = FrozenMargin;
			result->FrozenCash = FrozenCash;
			result->FrozenCommission = FrozenCommission;
			result->CashIn = CashIn;
			result->Commission = Commission;
			result->CloseProfit = CloseProfit;
			result->PositionProfit = PositionProfit;
			result->PreSettlementPrice = PreSettlementPrice;
			result->SettlementPrice = SettlementPrice;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->OpenCost = OpenCost;
			result->ExchangeMargin = ExchangeMargin;
			result->CombPosition = CombPosition;
			result->CombLongFrozen = CombLongFrozen;
			result->CombShortFrozen = CombShortFrozen;
			result->CloseProfitByDate = CloseProfitByDate;
			result->CloseProfitByTrade = CloseProfitByTrade;
			result->TodayPosition = TodayPosition;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->StrikeFrozen = StrikeFrozen;
			result->StrikeFrozenAmount = StrikeFrozenAmount;
			result->AbandonFrozen = AbandonFrozen;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->YdStrikeFrozen = YdStrikeFrozen;
			InvestUnitID ? strcpy_s(result->InvestUnitID, netString2ConstChar(InvestUnitID)) : false;
			result->PositionCostOffset = PositionCostOffset;
			result->TasPosition = TasPosition;
			result->TasPositionCost = TasPositionCost;
			return result;
		}
	};

	/// <summary>
	///风险品种
	/// </summary>
	public ref struct RiskSettleProductStatusField
	{
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品编号
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///产品结算状态
		/// </summary>
		char ProductStatus;

		/// <summary>
		/// 默认构造函数	</summary>
		RiskSettleProductStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcRiskSettleProductStatusField* source)
		{
			ExchangeID = char2NetString(source->ExchangeID);
			ProductID = char2NetString(source->ProductID);
			ProductStatus = source->ProductStatus;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		RiskSettleProductStatusField(CThostFtdcRiskSettleProductStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcRiskSettleProductStatusField* getUnmanagedStructP()
		{
			CThostFtdcRiskSettleProductStatusField* result = new CThostFtdcRiskSettleProductStatusField();
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			result->ProductStatus = ProductStatus;
			return result;
		}
	};

	/// <summary>
	///风险结算追平信息
	/// </summary>
	public ref struct SyncDeltaInfoField
	{
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;
		/// <summary>
		///追平状态
		/// </summary>
		char SyncDeltaStatus;
		/// <summary>
		///追平描述
		/// </summary>
		System::String^ SyncDescription;
		/// <summary>
		///是否只有资金追平
		/// </summary>
		int IsOnlyTrdDelta;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInfoField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInfoField* source)
		{
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
			SyncDeltaStatus = source->SyncDeltaStatus;
			SyncDescription = char2NetString(source->SyncDescription);
			IsOnlyTrdDelta = source->IsOnlyTrdDelta;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInfoField(CThostFtdcSyncDeltaInfoField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInfoField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInfoField* result = new CThostFtdcSyncDeltaInfoField();
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			result->SyncDeltaStatus = SyncDeltaStatus;
			SyncDescription ? strcpy_s(result->SyncDescription, netString2ConstChar(SyncDescription)) : false;
			result->IsOnlyTrdDelta = IsOnlyTrdDelta;
			return result;
		}
	};

	/// <summary>
	///风险结算追平产品信息
	/// </summary>
	public ref struct SyncDeltaProductStatusField
	{
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///是否允许交易
		/// </summary>
		char ProductStatus;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaProductStatusField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaProductStatusField* source)
		{
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
			ExchangeID = char2NetString(source->ExchangeID);
			ProductID = char2NetString(source->ProductID);
			ProductStatus = source->ProductStatus;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaProductStatusField(CThostFtdcSyncDeltaProductStatusField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaProductStatusField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaProductStatusField* result = new CThostFtdcSyncDeltaProductStatusField();
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			result->ProductStatus = ProductStatus;
			return result;
		}
	};

	/// <summary>
	///风险结算追平持仓明细
	/// </summary>
	public ref struct SyncDeltaInvstPosDtlField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///买卖
		/// </summary>
		char Direction;
		/// <summary>
		///开仓日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///成交编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///开仓价
		/// </summary>
		double OpenPrice;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///成交类型
		/// </summary>
		char TradeType;
		/// <summary>
		///组合合约代码
		/// </summary>
		System::String^ CombInstrumentID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///逐日盯市平仓盈亏
		/// </summary>
		double CloseProfitByDate;
		/// <summary>
		///逐笔对冲平仓盈亏
		/// </summary>
		double CloseProfitByTrade;
		/// <summary>
		///逐日盯市持仓盈亏
		/// </summary>
		double PositionProfitByDate;
		/// <summary>
		///逐笔对冲持仓盈亏
		/// </summary>
		double PositionProfitByTrade;
		/// <summary>
		///投资者保证金
		/// </summary>
		double Margin;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchMargin;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///昨结算价
		/// </summary>
		double LastSettlementPrice;
		/// <summary>
		///结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///平仓量
		/// </summary>
		int CloseVolume;
		/// <summary>
		///平仓金额
		/// </summary>
		double CloseAmount;
		/// <summary>
		///先开先平剩余数量（DCE）
		/// </summary>
		int TimeFirstVolume;
		/// <summary>
		///特殊持仓标志
		/// </summary>
		char SpecPosiType;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInvstPosDtlField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInvstPosDtlField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			Direction = source->Direction;
			OpenDate = char2NetString(source->OpenDate);
			TradeID = char2NetString(source->TradeID);
			Volume = source->Volume;
			OpenPrice = source->OpenPrice;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			TradeType = source->TradeType;
			CombInstrumentID = char2NetString(source->CombInstrumentID);
			ExchangeID = char2NetString(source->ExchangeID);
			CloseProfitByDate = source->CloseProfitByDate;
			CloseProfitByTrade = source->CloseProfitByTrade;
			PositionProfitByDate = source->PositionProfitByDate;
			PositionProfitByTrade = source->PositionProfitByTrade;
			Margin = source->Margin;
			ExchMargin = source->ExchMargin;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			LastSettlementPrice = source->LastSettlementPrice;
			SettlementPrice = source->SettlementPrice;
			CloseVolume = source->CloseVolume;
			CloseAmount = source->CloseAmount;
			TimeFirstVolume = source->TimeFirstVolume;
			SpecPosiType = source->SpecPosiType;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInvstPosDtlField(CThostFtdcSyncDeltaInvstPosDtlField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInvstPosDtlField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInvstPosDtlField* result = new CThostFtdcSyncDeltaInvstPosDtlField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->Direction = Direction;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			result->Volume = Volume;
			result->OpenPrice = OpenPrice;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->TradeType = TradeType;
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->CloseProfitByDate = CloseProfitByDate;
			result->CloseProfitByTrade = CloseProfitByTrade;
			result->PositionProfitByDate = PositionProfitByDate;
			result->PositionProfitByTrade = PositionProfitByTrade;
			result->Margin = Margin;
			result->ExchMargin = ExchMargin;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->LastSettlementPrice = LastSettlementPrice;
			result->SettlementPrice = SettlementPrice;
			result->CloseVolume = CloseVolume;
			result->CloseAmount = CloseAmount;
			result->TimeFirstVolume = TimeFirstVolume;
			result->SpecPosiType = SpecPosiType;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平组合持仓明细
	/// </summary>
	public ref struct SyncDeltaInvstPosCombDtlField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///开仓日期
		/// </summary>
		System::String^ OpenDate;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///组合编号
		/// </summary>
		System::String^ ComTradeID;
		/// <summary>
		///撮合编号
		/// </summary>
		System::String^ TradeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///买卖
		/// </summary>
		char Direction;
		/// <summary>
		///持仓量
		/// </summary>
		int TotalAmt;
		/// <summary>
		///投资者保证金
		/// </summary>
		double Margin;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchMargin;
		/// <summary>
		///保证金率
		/// </summary>
		double MarginRateByMoney;
		/// <summary>
		///保证金率(按手数)
		/// </summary>
		double MarginRateByVolume;
		/// <summary>
		///单腿编号
		/// </summary>
		int LegID;
		/// <summary>
		///单腿乘数
		/// </summary>
		int LegMultiple;
		/// <summary>
		///成交组号
		/// </summary>
		int TradeGroupID;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInvstPosCombDtlField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInvstPosCombDtlField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			OpenDate = char2NetString(source->OpenDate);
			ExchangeID = char2NetString(source->ExchangeID);
			SettlementID = source->SettlementID;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ComTradeID = char2NetString(source->ComTradeID);
			TradeID = char2NetString(source->TradeID);
			InstrumentID = char2NetString(source->InstrumentID);
			HedgeFlag = source->HedgeFlag;
			Direction = source->Direction;
			TotalAmt = source->TotalAmt;
			Margin = source->Margin;
			ExchMargin = source->ExchMargin;
			MarginRateByMoney = source->MarginRateByMoney;
			MarginRateByVolume = source->MarginRateByVolume;
			LegID = source->LegID;
			LegMultiple = source->LegMultiple;
			TradeGroupID = source->TradeGroupID;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInvstPosCombDtlField(CThostFtdcSyncDeltaInvstPosCombDtlField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInvstPosCombDtlField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInvstPosCombDtlField* result = new CThostFtdcSyncDeltaInvstPosCombDtlField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			OpenDate ? strcpy_s(result->OpenDate, netString2ConstChar(OpenDate)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			result->SettlementID = SettlementID;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ComTradeID ? strcpy_s(result->ComTradeID, netString2ConstChar(ComTradeID)) : false;
			TradeID ? strcpy_s(result->TradeID, netString2ConstChar(TradeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->Direction = Direction;
			result->TotalAmt = TotalAmt;
			result->Margin = Margin;
			result->ExchMargin = ExchMargin;
			result->MarginRateByMoney = MarginRateByMoney;
			result->MarginRateByVolume = MarginRateByVolume;
			result->LegID = LegID;
			result->LegMultiple = LegMultiple;
			result->TradeGroupID = TradeGroupID;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平资金
	/// </summary>
	public ref struct SyncDeltaTradingAccountField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者帐号
		/// </summary>
		System::String^ AccountID;
		/// <summary>
		///上次质押金额
		/// </summary>
		double PreMortgage;
		/// <summary>
		///上次信用额度
		/// </summary>
		double PreCredit;
		/// <summary>
		///上次存款额
		/// </summary>
		double PreDeposit;
		/// <summary>
		///上次结算准备金
		/// </summary>
		double PreBalance;
		/// <summary>
		///上次占用的保证金
		/// </summary>
		double PreMargin;
		/// <summary>
		///利息基数
		/// </summary>
		double InterestBase;
		/// <summary>
		///利息收入
		/// </summary>
		double Interest;
		/// <summary>
		///入金金额
		/// </summary>
		double Deposit;
		/// <summary>
		///出金金额
		/// </summary>
		double Withdraw;
		/// <summary>
		///冻结的保证金
		/// </summary>
		double FrozenMargin;
		/// <summary>
		///冻结的资金
		/// </summary>
		double FrozenCash;
		/// <summary>
		///冻结的手续费
		/// </summary>
		double FrozenCommission;
		/// <summary>
		///当前保证金总额
		/// </summary>
		double CurrMargin;
		/// <summary>
		///资金差额
		/// </summary>
		double CashIn;
		/// <summary>
		///手续费
		/// </summary>
		double Commission;
		/// <summary>
		///平仓盈亏
		/// </summary>
		double CloseProfit;
		/// <summary>
		///持仓盈亏
		/// </summary>
		double PositionProfit;
		/// <summary>
		///期货结算准备金
		/// </summary>
		double Balance;
		/// <summary>
		///可用资金
		/// </summary>
		double Available;
		/// <summary>
		///可取资金
		/// </summary>
		double WithdrawQuota;
		/// <summary>
		///基本准备金
		/// </summary>
		double Reserve;
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///结算编号
		/// </summary>
		int SettlementID;
		/// <summary>
		///信用额度
		/// </summary>
		double Credit;
		/// <summary>
		///质押金额
		/// </summary>
		double Mortgage;
		/// <summary>
		///交易所保证金
		/// </summary>
		double ExchangeMargin;
		/// <summary>
		///投资者交割保证金
		/// </summary>
		double DeliveryMargin;
		/// <summary>
		///交易所交割保证金
		/// </summary>
		double ExchangeDeliveryMargin;
		/// <summary>
		///保底期货结算准备金
		/// </summary>
		double ReserveBalance;
		/// <summary>
		///币种代码
		/// </summary>
		System::String^ CurrencyID;
		/// <summary>
		///上次货币质入金额
		/// </summary>
		double PreFundMortgageIn;
		/// <summary>
		///上次货币质出金额
		/// </summary>
		double PreFundMortgageOut;
		/// <summary>
		///货币质入金额
		/// </summary>
		double FundMortgageIn;
		/// <summary>
		///货币质出金额
		/// </summary>
		double FundMortgageOut;
		/// <summary>
		///货币质押余额
		/// </summary>
		double FundMortgageAvailable;
		/// <summary>
		///可质押货币金额
		/// </summary>
		double MortgageableFund;
		/// <summary>
		///特殊产品占用保证金
		/// </summary>
		double SpecProductMargin;
		/// <summary>
		///特殊产品冻结保证金
		/// </summary>
		double SpecProductFrozenMargin;
		/// <summary>
		///特殊产品手续费
		/// </summary>
		double SpecProductCommission;
		/// <summary>
		///特殊产品冻结手续费
		/// </summary>
		double SpecProductFrozenCommission;
		/// <summary>
		///特殊产品持仓盈亏
		/// </summary>
		double SpecProductPositionProfit;
		/// <summary>
		///特殊产品平仓盈亏
		/// </summary>
		double SpecProductCloseProfit;
		/// <summary>
		///根据持仓盈亏算法计算的特殊产品持仓盈亏
		/// </summary>
		double SpecProductPositionProfitByAlg;
		/// <summary>
		///特殊产品交易所保证金
		/// </summary>
		double SpecProductExchangeMargin;
		/// <summary>
		///延时换汇冻结金额
		/// </summary>
		double FrozenSwap;
		/// <summary>
		///剩余换汇额度
		/// </summary>
		double RemainSwap;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaTradingAccountField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaTradingAccountField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			AccountID = char2NetString(source->AccountID);
			PreMortgage = source->PreMortgage;
			PreCredit = source->PreCredit;
			PreDeposit = source->PreDeposit;
			PreBalance = source->PreBalance;
			PreMargin = source->PreMargin;
			InterestBase = source->InterestBase;
			Interest = source->Interest;
			Deposit = source->Deposit;
			Withdraw = source->Withdraw;
			FrozenMargin = source->FrozenMargin;
			FrozenCash = source->FrozenCash;
			FrozenCommission = source->FrozenCommission;
			CurrMargin = source->CurrMargin;
			CashIn = source->CashIn;
			Commission = source->Commission;
			CloseProfit = source->CloseProfit;
			PositionProfit = source->PositionProfit;
			Balance = source->Balance;
			Available = source->Available;
			WithdrawQuota = source->WithdrawQuota;
			Reserve = source->Reserve;
			TradingDay = char2NetString(source->TradingDay);
			SettlementID = source->SettlementID;
			Credit = source->Credit;
			Mortgage = source->Mortgage;
			ExchangeMargin = source->ExchangeMargin;
			DeliveryMargin = source->DeliveryMargin;
			ExchangeDeliveryMargin = source->ExchangeDeliveryMargin;
			ReserveBalance = source->ReserveBalance;
			CurrencyID = char2NetString(source->CurrencyID);
			PreFundMortgageIn = source->PreFundMortgageIn;
			PreFundMortgageOut = source->PreFundMortgageOut;
			FundMortgageIn = source->FundMortgageIn;
			FundMortgageOut = source->FundMortgageOut;
			FundMortgageAvailable = source->FundMortgageAvailable;
			MortgageableFund = source->MortgageableFund;
			SpecProductMargin = source->SpecProductMargin;
			SpecProductFrozenMargin = source->SpecProductFrozenMargin;
			SpecProductCommission = source->SpecProductCommission;
			SpecProductFrozenCommission = source->SpecProductFrozenCommission;
			SpecProductPositionProfit = source->SpecProductPositionProfit;
			SpecProductCloseProfit = source->SpecProductCloseProfit;
			SpecProductPositionProfitByAlg = source->SpecProductPositionProfitByAlg;
			SpecProductExchangeMargin = source->SpecProductExchangeMargin;
			FrozenSwap = source->FrozenSwap;
			RemainSwap = source->RemainSwap;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaTradingAccountField(CThostFtdcSyncDeltaTradingAccountField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaTradingAccountField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaTradingAccountField* result = new CThostFtdcSyncDeltaTradingAccountField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			AccountID ? strcpy_s(result->AccountID, netString2ConstChar(AccountID)) : false;
			result->PreMortgage = PreMortgage;
			result->PreCredit = PreCredit;
			result->PreDeposit = PreDeposit;
			result->PreBalance = PreBalance;
			result->PreMargin = PreMargin;
			result->InterestBase = InterestBase;
			result->Interest = Interest;
			result->Deposit = Deposit;
			result->Withdraw = Withdraw;
			result->FrozenMargin = FrozenMargin;
			result->FrozenCash = FrozenCash;
			result->FrozenCommission = FrozenCommission;
			result->CurrMargin = CurrMargin;
			result->CashIn = CashIn;
			result->Commission = Commission;
			result->CloseProfit = CloseProfit;
			result->PositionProfit = PositionProfit;
			result->Balance = Balance;
			result->Available = Available;
			result->WithdrawQuota = WithdrawQuota;
			result->Reserve = Reserve;
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			result->SettlementID = SettlementID;
			result->Credit = Credit;
			result->Mortgage = Mortgage;
			result->ExchangeMargin = ExchangeMargin;
			result->DeliveryMargin = DeliveryMargin;
			result->ExchangeDeliveryMargin = ExchangeDeliveryMargin;
			result->ReserveBalance = ReserveBalance;
			CurrencyID ? strcpy_s(result->CurrencyID, netString2ConstChar(CurrencyID)) : false;
			result->PreFundMortgageIn = PreFundMortgageIn;
			result->PreFundMortgageOut = PreFundMortgageOut;
			result->FundMortgageIn = FundMortgageIn;
			result->FundMortgageOut = FundMortgageOut;
			result->FundMortgageAvailable = FundMortgageAvailable;
			result->MortgageableFund = MortgageableFund;
			result->SpecProductMargin = SpecProductMargin;
			result->SpecProductFrozenMargin = SpecProductFrozenMargin;
			result->SpecProductCommission = SpecProductCommission;
			result->SpecProductFrozenCommission = SpecProductFrozenCommission;
			result->SpecProductPositionProfit = SpecProductPositionProfit;
			result->SpecProductCloseProfit = SpecProductCloseProfit;
			result->SpecProductPositionProfitByAlg = SpecProductPositionProfitByAlg;
			result->SpecProductExchangeMargin = SpecProductExchangeMargin;
			result->FrozenSwap = FrozenSwap;
			result->RemainSwap = RemainSwap;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///投资者风险结算总保证金
	/// </summary>
	public ref struct SyncDeltaInitInvstMarginField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///追平前总风险保证金
		/// </summary>
		double LastRiskTotalInvstMargin;
		/// <summary>
		///追平前交易所总风险保证金
		/// </summary>
		double LastRiskTotalExchMargin;
		/// <summary>
		///本次追平品种总保证金
		/// </summary>
		double ThisSyncInvstMargin;
		/// <summary>
		///本次追平品种交易所总保证金
		/// </summary>
		double ThisSyncExchMargin;
		/// <summary>
		///本次未追平品种总保证金
		/// </summary>
		double RemainRiskInvstMargin;
		/// <summary>
		///本次未追平品种交易所总保证金
		/// </summary>
		double RemainRiskExchMargin;
		/// <summary>
		///追平前总特殊产品风险保证金
		/// </summary>
		double LastRiskSpecTotalInvstMargin;
		/// <summary>
		///追平前总特殊产品交易所风险保证金
		/// </summary>
		double LastRiskSpecTotalExchMargin;
		/// <summary>
		///本次追平品种特殊产品总保证金
		/// </summary>
		double ThisSyncSpecInvstMargin;
		/// <summary>
		///本次追平品种特殊产品交易所总保证金
		/// </summary>
		double ThisSyncSpecExchMargin;
		/// <summary>
		///本次未追平品种特殊产品总保证金
		/// </summary>
		double RemainRiskSpecInvstMargin;
		/// <summary>
		///本次未追平品种特殊产品交易所总保证金
		/// </summary>
		double RemainRiskSpecExchMargin;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInitInvstMarginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInitInvstMarginField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			LastRiskTotalInvstMargin = source->LastRiskTotalInvstMargin;
			LastRiskTotalExchMargin = source->LastRiskTotalExchMargin;
			ThisSyncInvstMargin = source->ThisSyncInvstMargin;
			ThisSyncExchMargin = source->ThisSyncExchMargin;
			RemainRiskInvstMargin = source->RemainRiskInvstMargin;
			RemainRiskExchMargin = source->RemainRiskExchMargin;
			LastRiskSpecTotalInvstMargin = source->LastRiskSpecTotalInvstMargin;
			LastRiskSpecTotalExchMargin = source->LastRiskSpecTotalExchMargin;
			ThisSyncSpecInvstMargin = source->ThisSyncSpecInvstMargin;
			ThisSyncSpecExchMargin = source->ThisSyncSpecExchMargin;
			RemainRiskSpecInvstMargin = source->RemainRiskSpecInvstMargin;
			RemainRiskSpecExchMargin = source->RemainRiskSpecExchMargin;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInitInvstMarginField(CThostFtdcSyncDeltaInitInvstMarginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInitInvstMarginField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInitInvstMarginField* result = new CThostFtdcSyncDeltaInitInvstMarginField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->LastRiskTotalInvstMargin = LastRiskTotalInvstMargin;
			result->LastRiskTotalExchMargin = LastRiskTotalExchMargin;
			result->ThisSyncInvstMargin = ThisSyncInvstMargin;
			result->ThisSyncExchMargin = ThisSyncExchMargin;
			result->RemainRiskInvstMargin = RemainRiskInvstMargin;
			result->RemainRiskExchMargin = RemainRiskExchMargin;
			result->LastRiskSpecTotalInvstMargin = LastRiskSpecTotalInvstMargin;
			result->LastRiskSpecTotalExchMargin = LastRiskSpecTotalExchMargin;
			result->ThisSyncSpecInvstMargin = ThisSyncSpecInvstMargin;
			result->ThisSyncSpecExchMargin = ThisSyncSpecExchMargin;
			result->RemainRiskSpecInvstMargin = RemainRiskSpecInvstMargin;
			result->RemainRiskSpecExchMargin = RemainRiskSpecExchMargin;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平组合优先级
	/// </summary>
	public ref struct SyncDeltaDceCombInstrumentField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ CombInstrumentID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///成交组号
		/// </summary>
		int TradeGroupID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char CombHedgeFlag;
		/// <summary>
		///组合类型
		/// </summary>
		char CombinationType;
		/// <summary>
		///买卖
		/// </summary>
		char Direction;
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///期权组合保证金比例
		/// </summary>
		double Xparameter;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaDceCombInstrumentField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaDceCombInstrumentField* source)
		{
			CombInstrumentID = char2NetString(source->CombInstrumentID);
			ExchangeID = char2NetString(source->ExchangeID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			TradeGroupID = source->TradeGroupID;
			CombHedgeFlag = source->CombHedgeFlag;
			CombinationType = source->CombinationType;
			Direction = source->Direction;
			ProductID = char2NetString(source->ProductID);
			Xparameter = source->Xparameter;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaDceCombInstrumentField(CThostFtdcSyncDeltaDceCombInstrumentField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaDceCombInstrumentField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaDceCombInstrumentField* result = new CThostFtdcSyncDeltaDceCombInstrumentField();
			CombInstrumentID ? strcpy_s(result->CombInstrumentID, netString2ConstChar(CombInstrumentID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			result->TradeGroupID = TradeGroupID;
			result->CombHedgeFlag = CombHedgeFlag;
			result->CombinationType = CombinationType;
			result->Direction = Direction;
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			result->Xparameter = Xparameter;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平投资者期货保证金率
	/// </summary>
	public ref struct SyncDeltaInvstMarginRateField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///是否相对交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInvstMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInvstMarginRateField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			IsRelative = source->IsRelative;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInvstMarginRateField(CThostFtdcSyncDeltaInvstMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInvstMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInvstMarginRateField* result = new CThostFtdcSyncDeltaInvstMarginRateField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->IsRelative = IsRelative;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平交易所期货保证金率
	/// </summary>
	public ref struct SyncDeltaExchMarginRateField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaExchMarginRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaExchMarginRateField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InstrumentID = char2NetString(source->InstrumentID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaExchMarginRateField(CThostFtdcSyncDeltaExchMarginRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaExchMarginRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaExchMarginRateField* result = new CThostFtdcSyncDeltaExchMarginRateField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平中金现货期权交易所保证金率
	/// </summary>
	public ref struct SyncDeltaOptExchMarginField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投机空头保证金调整系数
		/// </summary>
		double SShortMarginRatioByMoney;
		/// <summary>
		///投机空头保证金调整系数
		/// </summary>
		double SShortMarginRatioByVolume;
		/// <summary>
		///保值空头保证金调整系数
		/// </summary>
		double HShortMarginRatioByMoney;
		/// <summary>
		///保值空头保证金调整系数
		/// </summary>
		double HShortMarginRatioByVolume;
		/// <summary>
		///套利空头保证金调整系数
		/// </summary>
		double AShortMarginRatioByMoney;
		/// <summary>
		///套利空头保证金调整系数
		/// </summary>
		double AShortMarginRatioByVolume;
		/// <summary>
		///做市商空头保证金调整系数
		/// </summary>
		double MShortMarginRatioByMoney;
		/// <summary>
		///做市商空头保证金调整系数
		/// </summary>
		double MShortMarginRatioByVolume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaOptExchMarginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaOptExchMarginField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InstrumentID = char2NetString(source->InstrumentID);
			SShortMarginRatioByMoney = source->SShortMarginRatioByMoney;
			SShortMarginRatioByVolume = source->SShortMarginRatioByVolume;
			HShortMarginRatioByMoney = source->HShortMarginRatioByMoney;
			HShortMarginRatioByVolume = source->HShortMarginRatioByVolume;
			AShortMarginRatioByMoney = source->AShortMarginRatioByMoney;
			AShortMarginRatioByVolume = source->AShortMarginRatioByVolume;
			MShortMarginRatioByMoney = source->MShortMarginRatioByMoney;
			MShortMarginRatioByVolume = source->MShortMarginRatioByVolume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaOptExchMarginField(CThostFtdcSyncDeltaOptExchMarginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaOptExchMarginField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaOptExchMarginField* result = new CThostFtdcSyncDeltaOptExchMarginField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->SShortMarginRatioByMoney = SShortMarginRatioByMoney;
			result->SShortMarginRatioByVolume = SShortMarginRatioByVolume;
			result->HShortMarginRatioByMoney = HShortMarginRatioByMoney;
			result->HShortMarginRatioByVolume = HShortMarginRatioByVolume;
			result->AShortMarginRatioByMoney = AShortMarginRatioByMoney;
			result->AShortMarginRatioByVolume = AShortMarginRatioByVolume;
			result->MShortMarginRatioByMoney = MShortMarginRatioByMoney;
			result->MShortMarginRatioByVolume = MShortMarginRatioByVolume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平中金现货期权投资者保证金率
	/// </summary>
	public ref struct SyncDeltaOptInvstMarginField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机空头保证金调整系数
		/// </summary>
		double SShortMarginRatioByMoney;
		/// <summary>
		///投机空头保证金调整系数
		/// </summary>
		double SShortMarginRatioByVolume;
		/// <summary>
		///保值空头保证金调整系数
		/// </summary>
		double HShortMarginRatioByMoney;
		/// <summary>
		///保值空头保证金调整系数
		/// </summary>
		double HShortMarginRatioByVolume;
		/// <summary>
		///套利空头保证金调整系数
		/// </summary>
		double AShortMarginRatioByMoney;
		/// <summary>
		///套利空头保证金调整系数
		/// </summary>
		double AShortMarginRatioByVolume;
		/// <summary>
		///是否跟随交易所收取
		/// </summary>
		int IsRelative;
		/// <summary>
		///做市商空头保证金调整系数
		/// </summary>
		double MShortMarginRatioByMoney;
		/// <summary>
		///做市商空头保证金调整系数
		/// </summary>
		double MShortMarginRatioByVolume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaOptInvstMarginField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaOptInvstMarginField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			SShortMarginRatioByMoney = source->SShortMarginRatioByMoney;
			SShortMarginRatioByVolume = source->SShortMarginRatioByVolume;
			HShortMarginRatioByMoney = source->HShortMarginRatioByMoney;
			HShortMarginRatioByVolume = source->HShortMarginRatioByVolume;
			AShortMarginRatioByMoney = source->AShortMarginRatioByMoney;
			AShortMarginRatioByVolume = source->AShortMarginRatioByVolume;
			IsRelative = source->IsRelative;
			MShortMarginRatioByMoney = source->MShortMarginRatioByMoney;
			MShortMarginRatioByVolume = source->MShortMarginRatioByVolume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaOptInvstMarginField(CThostFtdcSyncDeltaOptInvstMarginField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaOptInvstMarginField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaOptInvstMarginField* result = new CThostFtdcSyncDeltaOptInvstMarginField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->SShortMarginRatioByMoney = SShortMarginRatioByMoney;
			result->SShortMarginRatioByVolume = SShortMarginRatioByVolume;
			result->HShortMarginRatioByMoney = HShortMarginRatioByMoney;
			result->HShortMarginRatioByVolume = HShortMarginRatioByVolume;
			result->AShortMarginRatioByMoney = AShortMarginRatioByMoney;
			result->AShortMarginRatioByVolume = AShortMarginRatioByVolume;
			result->IsRelative = IsRelative;
			result->MShortMarginRatioByMoney = MShortMarginRatioByMoney;
			result->MShortMarginRatioByVolume = MShortMarginRatioByVolume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平期权标的调整保证金率
	/// </summary>
	public ref struct SyncDeltaInvstMarginRateULField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///多头保证金率
		/// </summary>
		double LongMarginRatioByMoney;
		/// <summary>
		///多头保证金费
		/// </summary>
		double LongMarginRatioByVolume;
		/// <summary>
		///空头保证金率
		/// </summary>
		double ShortMarginRatioByMoney;
		/// <summary>
		///空头保证金费
		/// </summary>
		double ShortMarginRatioByVolume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInvstMarginRateULField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInvstMarginRateULField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			HedgeFlag = source->HedgeFlag;
			LongMarginRatioByMoney = source->LongMarginRatioByMoney;
			LongMarginRatioByVolume = source->LongMarginRatioByVolume;
			ShortMarginRatioByMoney = source->ShortMarginRatioByMoney;
			ShortMarginRatioByVolume = source->ShortMarginRatioByVolume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInvstMarginRateULField(CThostFtdcSyncDeltaInvstMarginRateULField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInvstMarginRateULField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInvstMarginRateULField* result = new CThostFtdcSyncDeltaInvstMarginRateULField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->HedgeFlag = HedgeFlag;
			result->LongMarginRatioByMoney = LongMarginRatioByMoney;
			result->LongMarginRatioByVolume = LongMarginRatioByVolume;
			result->ShortMarginRatioByMoney = ShortMarginRatioByMoney;
			result->ShortMarginRatioByVolume = ShortMarginRatioByVolume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平期权手续费率
	/// </summary>
	public ref struct SyncDeltaOptInvstCommRateField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///执行手续费率
		/// </summary>
		double StrikeRatioByMoney;
		/// <summary>
		///执行手续费
		/// </summary>
		double StrikeRatioByVolume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaOptInvstCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaOptInvstCommRateField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			StrikeRatioByMoney = source->StrikeRatioByMoney;
			StrikeRatioByVolume = source->StrikeRatioByVolume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaOptInvstCommRateField(CThostFtdcSyncDeltaOptInvstCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaOptInvstCommRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaOptInvstCommRateField* result = new CThostFtdcSyncDeltaOptInvstCommRateField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			result->StrikeRatioByMoney = StrikeRatioByMoney;
			result->StrikeRatioByVolume = StrikeRatioByVolume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平期货手续费率
	/// </summary>
	public ref struct SyncDeltaInvstCommRateField
	{
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///投资者范围
		/// </summary>
		char InvestorRange;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///开仓手续费率
		/// </summary>
		double OpenRatioByMoney;
		/// <summary>
		///开仓手续费
		/// </summary>
		double OpenRatioByVolume;
		/// <summary>
		///平仓手续费率
		/// </summary>
		double CloseRatioByMoney;
		/// <summary>
		///平仓手续费
		/// </summary>
		double CloseRatioByVolume;
		/// <summary>
		///平今手续费率
		/// </summary>
		double CloseTodayRatioByMoney;
		/// <summary>
		///平今手续费
		/// </summary>
		double CloseTodayRatioByVolume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaInvstCommRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaInvstCommRateField* source)
		{
			InstrumentID = char2NetString(source->InstrumentID);
			InvestorRange = source->InvestorRange;
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			OpenRatioByMoney = source->OpenRatioByMoney;
			OpenRatioByVolume = source->OpenRatioByVolume;
			CloseRatioByMoney = source->CloseRatioByMoney;
			CloseRatioByVolume = source->CloseRatioByVolume;
			CloseTodayRatioByMoney = source->CloseTodayRatioByMoney;
			CloseTodayRatioByVolume = source->CloseTodayRatioByVolume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaInvstCommRateField(CThostFtdcSyncDeltaInvstCommRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaInvstCommRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaInvstCommRateField* result = new CThostFtdcSyncDeltaInvstCommRateField();
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->InvestorRange = InvestorRange;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			result->OpenRatioByMoney = OpenRatioByMoney;
			result->OpenRatioByVolume = OpenRatioByVolume;
			result->CloseRatioByMoney = CloseRatioByMoney;
			result->CloseRatioByVolume = CloseRatioByVolume;
			result->CloseTodayRatioByMoney = CloseTodayRatioByMoney;
			result->CloseTodayRatioByVolume = CloseTodayRatioByVolume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平交叉汇率
	/// </summary>
	public ref struct SyncDeltaProductExchRateField
	{
		/// <summary>
		///产品代码
		/// </summary>
		System::String^ ProductID;
		/// <summary>
		///报价币种类型
		/// </summary>
		System::String^ QuoteCurrencyID;
		/// <summary>
		///汇率
		/// </summary>
		double ExchangeRate;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaProductExchRateField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaProductExchRateField* source)
		{
			ProductID = char2NetString(source->ProductID);
			QuoteCurrencyID = char2NetString(source->QuoteCurrencyID);
			ExchangeRate = source->ExchangeRate;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaProductExchRateField(CThostFtdcSyncDeltaProductExchRateField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaProductExchRateField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaProductExchRateField* result = new CThostFtdcSyncDeltaProductExchRateField();
			ProductID ? strcpy_s(result->ProductID, netString2ConstChar(ProductID)) : false;
			QuoteCurrencyID ? strcpy_s(result->QuoteCurrencyID, netString2ConstChar(QuoteCurrencyID)) : false;
			result->ExchangeRate = ExchangeRate;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平行情
	/// </summary>
	public ref struct SyncDeltaDepthMarketDataField
	{
		/// <summary>
		///交易日
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约在交易所的代码
		/// </summary>
		System::String^ ExchangeInstID;
		/// <summary>
		///最新价
		/// </summary>
		double LastPrice;
		/// <summary>
		///上次结算价
		/// </summary>
		double PreSettlementPrice;
		/// <summary>
		///昨收盘
		/// </summary>
		double PreClosePrice;
		/// <summary>
		///昨持仓量
		/// </summary>
		double PreOpenInterest;
		/// <summary>
		///今开盘
		/// </summary>
		double OpenPrice;
		/// <summary>
		///最高价
		/// </summary>
		double HighestPrice;
		/// <summary>
		///最低价
		/// </summary>
		double LowestPrice;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///成交金额
		/// </summary>
		double Turnover;
		/// <summary>
		///持仓量
		/// </summary>
		double OpenInterest;
		/// <summary>
		///今收盘
		/// </summary>
		double ClosePrice;
		/// <summary>
		///本次结算价
		/// </summary>
		double SettlementPrice;
		/// <summary>
		///涨停板价
		/// </summary>
		double UpperLimitPrice;
		/// <summary>
		///跌停板价
		/// </summary>
		double LowerLimitPrice;
		/// <summary>
		///昨虚实度
		/// </summary>
		double PreDelta;
		/// <summary>
		///今虚实度
		/// </summary>
		double CurrDelta;
		/// <summary>
		///最后修改时间
		/// </summary>
		System::String^ UpdateTime;
		/// <summary>
		///最后修改毫秒
		/// </summary>
		int UpdateMillisec;
		/// <summary>
		///申买价一
		/// </summary>
		double BidPrice1;
		/// <summary>
		///申买量一
		/// </summary>
		int BidVolume1;
		/// <summary>
		///申卖价一
		/// </summary>
		double AskPrice1;
		/// <summary>
		///申卖量一
		/// </summary>
		int AskVolume1;
		/// <summary>
		///申买价二
		/// </summary>
		double BidPrice2;
		/// <summary>
		///申买量二
		/// </summary>
		int BidVolume2;
		/// <summary>
		///申卖价二
		/// </summary>
		double AskPrice2;
		/// <summary>
		///申卖量二
		/// </summary>
		int AskVolume2;
		/// <summary>
		///申买价三
		/// </summary>
		double BidPrice3;
		/// <summary>
		///申买量三
		/// </summary>
		int BidVolume3;
		/// <summary>
		///申卖价三
		/// </summary>
		double AskPrice3;
		/// <summary>
		///申卖量三
		/// </summary>
		int AskVolume3;
		/// <summary>
		///申买价四
		/// </summary>
		double BidPrice4;
		/// <summary>
		///申买量四
		/// </summary>
		int BidVolume4;
		/// <summary>
		///申卖价四
		/// </summary>
		double AskPrice4;
		/// <summary>
		///申卖量四
		/// </summary>
		int AskVolume4;
		/// <summary>
		///申买价五
		/// </summary>
		double BidPrice5;
		/// <summary>
		///申买量五
		/// </summary>
		int BidVolume5;
		/// <summary>
		///申卖价五
		/// </summary>
		double AskPrice5;
		/// <summary>
		///申卖量五
		/// </summary>
		int AskVolume5;
		/// <summary>
		///当日均价
		/// </summary>
		double AveragePrice;
		/// <summary>
		///业务日期
		/// </summary>
		System::String^ ActionDay;
		/// <summary>
		///上带价
		/// </summary>
		double BandingUpperPrice;
		/// <summary>
		///下带价
		/// </summary>
		double BandingLowerPrice;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaDepthMarketDataField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaDepthMarketDataField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			InstrumentID = char2NetString(source->InstrumentID);
			ExchangeID = char2NetString(source->ExchangeID);
			ExchangeInstID = char2NetString(source->ExchangeInstID);
			LastPrice = source->LastPrice;
			PreSettlementPrice = source->PreSettlementPrice;
			PreClosePrice = source->PreClosePrice;
			PreOpenInterest = source->PreOpenInterest;
			OpenPrice = source->OpenPrice;
			HighestPrice = source->HighestPrice;
			LowestPrice = source->LowestPrice;
			Volume = source->Volume;
			Turnover = source->Turnover;
			OpenInterest = source->OpenInterest;
			ClosePrice = source->ClosePrice;
			SettlementPrice = source->SettlementPrice;
			UpperLimitPrice = source->UpperLimitPrice;
			LowerLimitPrice = source->LowerLimitPrice;
			PreDelta = source->PreDelta;
			CurrDelta = source->CurrDelta;
			UpdateTime = char2NetString(source->UpdateTime);
			UpdateMillisec = source->UpdateMillisec;
			BidPrice1 = source->BidPrice1;
			BidVolume1 = source->BidVolume1;
			AskPrice1 = source->AskPrice1;
			AskVolume1 = source->AskVolume1;
			BidPrice2 = source->BidPrice2;
			BidVolume2 = source->BidVolume2;
			AskPrice2 = source->AskPrice2;
			AskVolume2 = source->AskVolume2;
			BidPrice3 = source->BidPrice3;
			BidVolume3 = source->BidVolume3;
			AskPrice3 = source->AskPrice3;
			AskVolume3 = source->AskVolume3;
			BidPrice4 = source->BidPrice4;
			BidVolume4 = source->BidVolume4;
			AskPrice4 = source->AskPrice4;
			AskVolume4 = source->AskVolume4;
			BidPrice5 = source->BidPrice5;
			BidVolume5 = source->BidVolume5;
			AskPrice5 = source->AskPrice5;
			AskVolume5 = source->AskVolume5;
			AveragePrice = source->AveragePrice;
			ActionDay = char2NetString(source->ActionDay);
			BandingUpperPrice = source->BandingUpperPrice;
			BandingLowerPrice = source->BandingLowerPrice;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaDepthMarketDataField(CThostFtdcSyncDeltaDepthMarketDataField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaDepthMarketDataField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaDepthMarketDataField* result = new CThostFtdcSyncDeltaDepthMarketDataField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			ExchangeInstID ? strcpy_s(result->ExchangeInstID, netString2ConstChar(ExchangeInstID)) : false;
			result->LastPrice = LastPrice;
			result->PreSettlementPrice = PreSettlementPrice;
			result->PreClosePrice = PreClosePrice;
			result->PreOpenInterest = PreOpenInterest;
			result->OpenPrice = OpenPrice;
			result->HighestPrice = HighestPrice;
			result->LowestPrice = LowestPrice;
			result->Volume = Volume;
			result->Turnover = Turnover;
			result->OpenInterest = OpenInterest;
			result->ClosePrice = ClosePrice;
			result->SettlementPrice = SettlementPrice;
			result->UpperLimitPrice = UpperLimitPrice;
			result->LowerLimitPrice = LowerLimitPrice;
			result->PreDelta = PreDelta;
			result->CurrDelta = CurrDelta;
			UpdateTime ? strcpy_s(result->UpdateTime, netString2ConstChar(UpdateTime)) : false;
			result->UpdateMillisec = UpdateMillisec;
			result->BidPrice1 = BidPrice1;
			result->BidVolume1 = BidVolume1;
			result->AskPrice1 = AskPrice1;
			result->AskVolume1 = AskVolume1;
			result->BidPrice2 = BidPrice2;
			result->BidVolume2 = BidVolume2;
			result->AskPrice2 = AskPrice2;
			result->AskVolume2 = AskVolume2;
			result->BidPrice3 = BidPrice3;
			result->BidVolume3 = BidVolume3;
			result->AskPrice3 = AskPrice3;
			result->AskVolume3 = AskVolume3;
			result->BidPrice4 = BidPrice4;
			result->BidVolume4 = BidVolume4;
			result->AskPrice4 = AskPrice4;
			result->AskVolume4 = AskVolume4;
			result->BidPrice5 = BidPrice5;
			result->BidVolume5 = BidVolume5;
			result->AskPrice5 = AskPrice5;
			result->AskVolume5 = AskVolume5;
			result->AveragePrice = AveragePrice;
			ActionDay ? strcpy_s(result->ActionDay, netString2ConstChar(ActionDay)) : false;
			result->BandingUpperPrice = BandingUpperPrice;
			result->BandingLowerPrice = BandingLowerPrice;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平现货指数
	/// </summary>
	public ref struct SyncDeltaIndexPriceField
	{
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///指数现货收盘价
		/// </summary>
		double ClosePrice;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaIndexPriceField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaIndexPriceField* source)
		{
			BrokerID = char2NetString(source->BrokerID);
			InstrumentID = char2NetString(source->InstrumentID);
			ClosePrice = source->ClosePrice;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaIndexPriceField(CThostFtdcSyncDeltaIndexPriceField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaIndexPriceField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaIndexPriceField* result = new CThostFtdcSyncDeltaIndexPriceField();
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->ClosePrice = ClosePrice;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};

	/// <summary>
	///风险结算追平仓单折抵
	/// </summary>
	public ref struct SyncDeltaEWarrantOffsetField
	{
		/// <summary>
		///交易日期
		/// </summary>
		System::String^ TradingDay;
		/// <summary>
		///经纪公司代码
		/// </summary>
		System::String^ BrokerID;
		/// <summary>
		///投资者代码
		/// </summary>
		System::String^ InvestorID;
		/// <summary>
		///交易所代码
		/// </summary>
		System::String^ ExchangeID;
		/// <summary>
		///合约代码
		/// </summary>
		System::String^ InstrumentID;
		/// <summary>
		///买卖方向
		/// </summary>
		char Direction;
		/// <summary>
		///投机套保标志
		/// </summary>
		char HedgeFlag;
		/// <summary>
		///数量
		/// </summary>
		int Volume;
		/// <summary>
		///操作标志
		/// </summary>
		char ActionDirection;
		/// <summary>
		///追平序号
		/// </summary>
		int SyncDeltaSequenceNo;

		/// <summary>
		/// 默认构造函数	</summary>
		SyncDeltaEWarrantOffsetField()
		{
		}


		/// <summary>
		/// 使用非托管的结构体初始化本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		void initFromUnmanagedStruct(CThostFtdcSyncDeltaEWarrantOffsetField* source)
		{
			TradingDay = char2NetString(source->TradingDay);
			BrokerID = char2NetString(source->BrokerID);
			InvestorID = char2NetString(source->InvestorID);
			ExchangeID = char2NetString(source->ExchangeID);
			InstrumentID = char2NetString(source->InstrumentID);
			Direction = source->Direction;
			HedgeFlag = source->HedgeFlag;
			Volume = source->Volume;
			ActionDirection = source->ActionDirection;
			SyncDeltaSequenceNo = source->SyncDeltaSequenceNo;
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <param name="source">指向非托管结构体的指针</param>
		SyncDeltaEWarrantOffsetField(CThostFtdcSyncDeltaEWarrantOffsetField* source)
		{
			initFromUnmanagedStruct(source);
		}

		/// <summary>
		/// 使用非托管的结构体构造本结构体
		/// </summary>
		/// <returns>新生成的非托管类型结构体指针</returns>
		CThostFtdcSyncDeltaEWarrantOffsetField* getUnmanagedStructP()
		{
			CThostFtdcSyncDeltaEWarrantOffsetField* result = new CThostFtdcSyncDeltaEWarrantOffsetField();
			TradingDay ? strcpy_s(result->TradingDay, netString2ConstChar(TradingDay)) : false;
			BrokerID ? strcpy_s(result->BrokerID, netString2ConstChar(BrokerID)) : false;
			InvestorID ? strcpy_s(result->InvestorID, netString2ConstChar(InvestorID)) : false;
			ExchangeID ? strcpy_s(result->ExchangeID, netString2ConstChar(ExchangeID)) : false;
			InstrumentID ? strcpy_s(result->InstrumentID, netString2ConstChar(InstrumentID)) : false;
			result->Direction = Direction;
			result->HedgeFlag = HedgeFlag;
			result->Volume = Volume;
			result->ActionDirection = ActionDirection;
			result->SyncDeltaSequenceNo = SyncDeltaSequenceNo;
			return result;
		}
	};


}
